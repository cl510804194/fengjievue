package yrd.app;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.junit.Test;
import org.junit.runner.RunWith;

import testbase.ServiceAutoTestBase;

import com.alibaba.fastjson.JSONObject;
import com.autotest.annotation.AutoTestCase;
import com.autotest.runner.AutoTestJUnit4ClassRunner;
import com.yjf.common.lang.util.money.Money;
import com.yjf.esupplier.common.util.MD5Util;
import com.yjf.esupplier.dal.dataobject.PaymentFlowDO;
import com.yjf.esupplier.dal.dataobject.TblOrderInfoDO;
import com.yjf.esupplier.dal.dataobject.TblSupplierDO;
import com.yjf.esupplier.dal.dataobject.UserBaseInfoDO;
import com.yjf.esupplier.dal.dataobject.UserLoginLogDO;
import com.yjf.esupplier.web.util.AESUtil;
import com.yjf.esupplier.ws.enums.BooleanEnum;
@RunWith(AutoTestJUnit4ClassRunner.class)
public class AppUseQrCodeTest extends ServiceAutoTestBase {

	/*
	 * 测试方向：
	 * 1001 未登录
	 * 1002 消费失败(根据团购券没查到订单信息)
	 * 1003 消费成功
	 */
	@Test
	@AutoTestCase(file = "yrd/app/appUseQrCodeTestSuccess.csv", 
			description = "商家使用消费码,成功用例")
	public void appUseQrCodeTestSuccess(int testId,
								     String userName,
								     String mobile,
								     String logPassword,
								     long id,
									 String orderStatus,
									 long supplierId,
									 Money totalAmount,
									 String workflowStatus,
									 String supplierName,
									 String saleTypeB2c,
									 String saleTypeO2o,
									 String facade,
									 String paymentFlowId,
									 String refundStatus,
									 String saleTypeHotels,
									 long resortsBusinessId,
									 long batchNo,
									 String tuneMeal,
									 String isPayed,
									 long takegoodsId,
									 String paymentMethod,
									 String saleTypeOrderMeal,
									 String tableNumber,
									 String tableNumberSeq,
									 String qrCode,
									 long itemId,
									 long itemProductId,
									 String itemProductName,
									 long quantity,
									 Money proPrice,
									 String picPath, 
									 Money postFree,
									 long days,
									 String roomType){
		long userId=0;
		String userBaseId="";
		TblOrderInfoDO tblOrderInfoDOex=null;
		TblSupplierDO tblSupplierDOex=null;
		//清除数据
		clearnPointsRuleByRuleType("REGISTER");
		clearnPointsRuleByRuleType("LOGIN");
		UserBaseInfoDO userBaseInfoDO=findUserBaseInfoByUserName(userName);
		if (userBaseInfoDO!=null) {
			userId=userBaseInfoDO.getUserId();
			userBaseId=userBaseInfoDO.getUserBaseId();
		}
		clearnUserRoleByUserId(userId);
		clearnUserByUserName(userName);
		clearnPersonaInfoByUserBaseId(userBaseId);
		clearnUserBaseInfoByUserName(userName);
		clearnUserAccountDataByUserId(userId);
		clearnUserExtendByUserId(userId);
		clearnUserLogin(userName);
		
		clearnTblOrderInfoById(id);
		clearnTblOrderItemByOrderId(id);
		clearnPaymentFlowByPaymentFlowId(paymentFlowId);
		// 准备数据
		logger.info("更新系统参数");
		updateSysParamInfoDOByParamName("SYS_PARAM_HUA_HONG_IS_USE","Y");
		sysParameterService.clearCache();
		
		
		// 测试过程
		HttpClient httpclient = new DefaultHttpClient();
		HttpResponse response =null;
		String conResult =null;
		JSONObject jobj =null;
		try {
			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
			nameValuePairs.add(new BasicNameValuePair("msg", getStringFromJson(new JSONObject())));
			HttpEntity httpEntity=new UrlEncodedFormEntity(nameValuePairs, "UTF-8");

			if (testId!=1001) {
				//获取图片验证码
				String getImgCodeUrl="http://127.0.0.1:8085/app/getImgCode.htm";
				HttpPost getImgCodeHP = new HttpPost(getImgCodeUrl);
				getImgCodeHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				getImgCodeHP.setEntity(httpEntity);
				response = httpclient.execute(getImgCodeHP);
				getImgCodeHP.releaseConnection();
				
				
				//发送短信验证码(register注册)
				String sendSmsCodeUrl="http://127.0.0.1:8085/app/sendSmsCode.htm?mobile="+mobile+"&business=register";
				HttpPost sendSmsCodeHP = new HttpPost(sendSmsCodeUrl);
				sendSmsCodeHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				sendSmsCodeHP.setEntity(httpEntity);
				response = httpclient.execute(sendSmsCodeHP);
				/*读返回数据*/
				conResult = EntityUtils.toString(response.getEntity());
				jobj = JSONObject.parseObject(conResult);
				sendSmsCodeHP.releaseConnection();
				System.out.println(jobj.get("code"));
				System.out.println(jobj.get("message"));
				assertEquals(1, jobj.get("code"));
				assertEquals("发送手机验证码成功", jobj.get("message"));	
				
				
				//提交注册信息
				String registerSubmitUrl="http://127.0.0.1:8085/app/registerSubmit.htm?userName="+userName+
						"&mobile="+mobile+"&logPassword="+AESUtil.encode(logPassword)+"&code=888888&imgCode=8888";
				HttpPost registerSubmitHP = new HttpPost(registerSubmitUrl);
				registerSubmitHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				registerSubmitHP.setEntity(httpEntity);
				response = httpclient.execute(registerSubmitHP);
				/*读返回数据*/
				conResult = EntityUtils.toString(response.getEntity());
				jobj = JSONObject.parseObject(conResult);
				registerSubmitHP.releaseConnection();
				System.out.println(jobj.get("code"));
				System.out.println(jobj.get("message"));
				//验证结果
				assertEquals(1, jobj.get("code"));
				assertEquals("注册成功", jobj.get("message"));
				assertEquals(0, jobj.get("giftMoney"));
				assertEquals("无优惠券信息", jobj.get("giftMoneyMessage"));
				//数据校验
				userBaseInfoDO=findUserBaseInfoByUserName(userName);
				userId=userBaseInfoDO.getUserId();
				userBaseId=userBaseInfoDO.getUserBaseId();
				assertEquals(mobile, userBaseInfoDO.getMobile());
				assertEquals(userName, userBaseInfoDO.getUserName());
				assertEquals(MD5Util.getMD5_32(logPassword), userBaseInfoDO.getLogPassword());
			}
			
			
			//商家使用消费码
			if (testId==1003) {
				saleTypeHotels=BooleanEnum.YES.code();
				insertTblOrderInfoIncomplete(id, userId, orderStatus, userId, totalAmount, workflowStatus, supplierName, saleTypeB2c,
						saleTypeO2o, facade, paymentFlowId, refundStatus, saleTypeHotels, resortsBusinessId, batchNo, tuneMeal, isPayed,
						takegoodsId, paymentMethod, saleTypeOrderMeal, tableNumber, tableNumberSeq);
				tblOrderInfoDOex=findTblOrderInfoByUserId(userId);
				tblOrderInfoDOex.setQrCode(qrCode);
				tblOrderInfoDOex.setValidationStatus(BooleanEnum.NO.code());
				tblOrderInfoDAO.update(tblOrderInfoDOex);//订单信息
				insertTblOrderItemAll(itemId, id, itemProductId, itemProductName, quantity, proPrice, picPath, postFree, new Date(),tomorrow(),
						days, roomType);//订单详细信息
				insertTblSupplierIncomplete(userId, "152", "0");//商户信息
				PaymentFlowDO paymentFlowDO=new PaymentFlowDO();
				paymentFlowDO.setPaymentFlowId(paymentFlowId);
				paymentFlowDO.setPaymentAmount(Money.zero());
				paymentFlowDO.setUserId(userId);
				paymentFlowDO.setPaymentDate(new Date());
				paymentFlowDAO.insert(paymentFlowDO);//支付信息
			}
			String useQrCodeUrl="http://127.0.0.1:8085/app/useQrCode.htm?qrCode="+qrCode;
			HttpPost useQrCodeHP = new HttpPost(useQrCodeUrl);
			useQrCodeHP.addHeader("Content-type", "application/x-www-form-urlencoded");
			useQrCodeHP.setEntity(httpEntity);
			response = httpclient.execute(useQrCodeHP);
			/*读返回数据*/
			conResult = EntityUtils.toString(response.getEntity());
			jobj = JSONObject.parseObject(conResult);
			useQrCodeHP.releaseConnection();
			System.out.println(jobj.get("code"));
			System.out.println(jobj.get("message"));
			//验证结果
			if (testId==1001) {
				assertEquals(-1, jobj.get("code"));
				assertEquals("未登录或登录失效", jobj.get("message"));
			}else if (testId==1002) {
				assertEquals(0, jobj.get("code"));
				assertEquals("对不起，您输入的团购券码不存在！", jobj.get("message"));
			}else if (testId==1003) {
				TblOrderInfoDO tblOrderInfoDO=findTblOrderInfoByUserId(userId);
				assertEquals(1, jobj.get("code"));
				assertEquals("消费成功", jobj.get("message"));
				assertEquals(BooleanEnum.YES.code(), tblOrderInfoDO.getValidationStatus());
			}
			
			//清除数据
			clearnUserRoleByUserId(userId);
			clearnUserByUserName(userName);
			clearnPersonaInfoByUserBaseId(userBaseId);
			clearnUserBaseInfoByUserName(userName);
			clearnUserAccountDataByUserId(userId);
			clearnUserExtendByUserId(userId);
			clearnUserLogin(userName);
			
			//清除登录日志
			List<UserLoginLogDO> userLoginLogDOlist=findUserLoginLogByUserId(userId);
			if (!userLoginLogDOlist.isEmpty()) {
				for (int i = 0; i < userLoginLogDOlist.size(); i++) {
					UserLoginLogDO userLoginLogDO=userLoginLogDOlist.get(i);
					if (userLoginLogDO!=null) {
						clearnUserLoginLogById(userLoginLogDO.getTblBaseId());
					}
				}
			}
			clearnTblOrderInfoById(id);
			clearnTblOrderItemByOrderId(id);
			clearnTblSupplierById(userId);
			clearnPaymentFlowByPaymentFlowId(paymentFlowId);
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private static String getStringFromJson(JSONObject adata) {
		StringBuffer sb = new StringBuffer();
		sb.append("{");
		for (Object key : adata.keySet()) {
			sb.append("\"" + key + "\":\"" + adata.get(key) + "\",");
		}
		String rtn = sb.toString().substring(0, sb.toString().length() - 1)
				+ "}";
		return rtn;
	}
}
