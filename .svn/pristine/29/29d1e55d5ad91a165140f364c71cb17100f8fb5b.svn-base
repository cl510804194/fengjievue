/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.LoanAuthRecordDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.LoanAuthRecordDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.LoanAuthRecordDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/loan_auth_record.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisLoanAuthRecordDAO extends SqlMapClientDaoSupport implements LoanAuthRecordDAO {
	/**
	 *  Insert one <tt>LoanAuthRecordDO</tt> object to DB table <tt>loan_auth_record</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into loan_auth_record(tb_base_id,auth_user_id,loan_demand_id,auth_type,auth_time,note,rem1) values (?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param loanAuthRecord
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(LoanAuthRecordDO loanAuthRecord) throws DataAccessException {
    	if (loanAuthRecord == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-LOAN-AUTH-RECORD-INSERT", loanAuthRecord);

        return loanAuthRecord.getTbBaseId();
    }

	/**
	 *  Update DB table <tt>loan_auth_record</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update loan_auth_record set auth_user_id=?, loan_demand_id=?, auth_type=?, auth_time=?, note=?, rem1=? where (tb_base_id = ?)</tt>
	 *
	 *	@param loanAuthRecord
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(LoanAuthRecordDO loanAuthRecord) throws DataAccessException {
    	if (loanAuthRecord == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-LOAN-AUTH-RECORD-UPDATE", loanAuthRecord);
    }

	/**
	 *  Query DB table <tt>loan_auth_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select tb_base_id, auth_user_id, loan_demand_id, auth_type, auth_time, note, rem1 from loan_auth_record where (tb_base_id = ?)</tt>
	 *
	 *	@param tbBaseId
	 *	@return LoanAuthRecordDO
	 *	@throws DataAccessException
	 */	 
    public LoanAuthRecordDO findById(String tbBaseId) throws DataAccessException {

        return (LoanAuthRecordDO) getSqlMapClientTemplate().queryForObject("MS-LOAN-AUTH-RECORD-FIND-BY-ID", tbBaseId);

    }

	/**
	 *  Delete records from DB table <tt>loan_auth_record</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from loan_auth_record where (tb_base_id = ?)</tt>
	 *
	 *	@param tbBaseId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(String tbBaseId) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-LOAN-AUTH-RECORD-DELETE-BY-ID", tbBaseId);
    }

	/**
	 *  Query DB table <tt>loan_auth_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from loan_auth_record</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException {

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-LOAN-AUTH-RECORD-FIND-ALL-COUNT", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>loan_auth_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from loan_auth_record</tt>
	 *
	 *	@param baseId
	 *	@param authUserId
	 *	@param loanDemandId
	 *	@param authType
	 *	@param startTime
	 *	@param endTime
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findCountByCondition(long baseId, long authUserId, long loanDemandId, String authType, Date startTime, Date endTime) throws DataAccessException {
        Map param = new HashMap();

        param.put("baseId", new Long(baseId));
        param.put("authUserId", new Long(authUserId));
        param.put("loanDemandId", new Long(loanDemandId));
        param.put("authType", authType);
        param.put("startTime", startTime);
        param.put("endTime", endTime);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-LOAN-AUTH-RECORD-FIND-COUNT-BY-CONDITION", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>loan_auth_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select tb_base_id, auth_user_id, loan_demand_id, auth_type, auth_time, note, rem1 from loan_auth_record</tt>
	 *
	 *	@param baseId
	 *	@param authUserId
	 *	@param loanDemandId
	 *	@param authType
	 *	@param startTime
	 *	@param endTime
	 *	@return List<LoanAuthRecordDO>
	 *	@throws DataAccessException
	 */	 
    public List<LoanAuthRecordDO> findByCondition(long baseId, long authUserId, long loanDemandId, String authType, Date startTime, Date endTime) throws DataAccessException {
        Map param = new HashMap();

        param.put("baseId", new Long(baseId));
        param.put("authUserId", new Long(authUserId));
        param.put("loanDemandId", new Long(loanDemandId));
        param.put("authType", authType);
        param.put("startTime", startTime);
        param.put("endTime", endTime);

        return getSqlMapClientTemplate().queryForList("MS-LOAN-AUTH-RECORD-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>loan_auth_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select tb_base_id, auth_user_id, loan_demand_id, auth_type, auth_time, note, rem1 from loan_auth_record where (loan_demand_id = ?)</tt>
	 *
	 *	@param loanDemandId
	 *	@return LoanAuthRecordDO
	 *	@throws DataAccessException
	 */	 
    public LoanAuthRecordDO findByLoanDemandIdAutotest(long loanDemandId) throws DataAccessException {
        Long param = new Long(loanDemandId);

        return (LoanAuthRecordDO) getSqlMapClientTemplate().queryForObject("MS-LOAN-AUTH-RECORD-FIND-BY-LOAN-DEMAND-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>loan_auth_record</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from loan_auth_record where (loan_demand_id = ?)</tt>
	 *
	 *	@param loanDemandId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteLoanDemandIdAutotest(long loanDemandId) throws DataAccessException {
        Long param = new Long(loanDemandId);

        return getSqlMapClientTemplate().delete("MS-LOAN-AUTH-RECORD-DELETE-LOAN-DEMAND-ID-AUTOTEST", param);
    }

}