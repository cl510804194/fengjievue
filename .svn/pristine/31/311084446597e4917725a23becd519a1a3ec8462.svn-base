package yrd.app;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.alibaba.fastjson.JSONObject;
import com.autotest.annotation.AutoTestCase;
import com.autotest.runner.AutoTestJUnit4ClassRunner;
import com.yjf.esupplier.common.util.MD5Util;
import com.yjf.esupplier.dal.dataobject.UserBaseInfoDO;
import com.yjf.esupplier.dal.dataobject.UserLoginDO;
import com.yjf.esupplier.dal.dataobject.UserLoginLogDO;
import com.yjf.esupplier.web.util.AESUtil;

import testbase.ServiceAutoTestBase;
@RunWith(AutoTestJUnit4ClassRunner.class)
public class AppChangeToNewPhoneTest extends ServiceAutoTestBase {

	/*
	 * 测试方向：
	 * 1001 未登录
	 * 1002 验证失败，验证码没获取
	 * 1003 没有验证旧手机
	 * 1004 修改失败
	 * 1005 修改成功
	 */
	@Test
	@AutoTestCase(file = "yrd/app/appChangeToNewPhoneTestSuccess.csv", 
			description = "修改绑定手机号，验证新手机号,成功用例")
	public void appChangeToNewPhoneTestSuccess(int testId,
											 String userName,
											 String mobile,
											 String logPassword,
											 String newMobile, String md5UserBaseId){
		long userId=0;
		String userBaseId="";
		//清除数据
		clearnPointsRuleByRuleType("REGISTER");
		clearnPointsRuleByRuleType("LOGIN");
		UserBaseInfoDO userBaseInfoDO=findUserBaseInfoByUserName(userName);
		if (userBaseInfoDO!=null) {
			userId=userBaseInfoDO.getUserId();
			userBaseId=userBaseInfoDO.getUserBaseId();
		}
		clearnUserRoleByUserId(userId);
		clearnUserByUserName(userName);
		clearnPersonaInfoByUserBaseId(userBaseId);
		clearnUserBaseInfoByUserName(userName);
		clearnUserAccountDataByUserId(userId);
		clearnUserExtendByUserId(userId);
		clearnUserLogin(userName);
		clearnUserLogin(newMobile);
		
		// 准备数据
		logger.info("更新系统参数");
		updateSysParamInfoDOByParamName("SYS_PARAM_HUA_HONG_IS_USE","Y");
		sysParameterService.clearCache();
		
		
		// 测试过程
		HttpClient httpclient = new DefaultHttpClient();
		HttpResponse response =null;
		String conResult =null;
		JSONObject jobj =null;
		try {
			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
			nameValuePairs.add(new BasicNameValuePair("msg", getStringFromJson(new JSONObject())));
			HttpEntity httpEntity=new UrlEncodedFormEntity(nameValuePairs, "UTF-8");

			String sendSmsCodeUrl=null;
			HttpPost sendSmsCodeHP=null;
			if (testId!=1001) {
				//获取图片验证码
				String getImgCodeUrl="http://127.0.0.1:8085/app/getImgCode.htm";
				HttpPost getImgCodeHP = new HttpPost(getImgCodeUrl);
				getImgCodeHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				getImgCodeHP.setEntity(httpEntity);
				response = httpclient.execute(getImgCodeHP);
				getImgCodeHP.releaseConnection();
				
				
				//发送短信验证码(register注册)
				sendSmsCodeUrl="http://127.0.0.1:8085/app/sendSmsCode.htm?mobile="+mobile+"&business=register";
				sendSmsCodeHP = new HttpPost(sendSmsCodeUrl);
				sendSmsCodeHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				sendSmsCodeHP.setEntity(httpEntity);
				response = httpclient.execute(sendSmsCodeHP);
				/*读返回数据*/
				conResult = EntityUtils.toString(response.getEntity());
				jobj = JSONObject.parseObject(conResult);
				sendSmsCodeHP.releaseConnection();
				System.out.println(jobj.get("code"));
				System.out.println(jobj.get("message"));
				assertEquals(1, jobj.get("code"));
				assertEquals("发送手机验证码成功", jobj.get("message"));	
				
				
				//提交注册信息
				String registerSubmitUrl="http://127.0.0.1:8085/app/registerSubmit.htm?userName="+userName+
						"&mobile="+mobile+"&logPassword="+AESUtil.encode(logPassword)+"&code=888888&imgCode=8888";
				HttpPost registerSubmitHP = new HttpPost(registerSubmitUrl);
				registerSubmitHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				registerSubmitHP.setEntity(httpEntity);
				response = httpclient.execute(registerSubmitHP);
				/*读返回数据*/
				conResult = EntityUtils.toString(response.getEntity());
				jobj = JSONObject.parseObject(conResult);
				registerSubmitHP.releaseConnection();
				System.out.println(jobj.get("code"));
				System.out.println(jobj.get("message"));
				//验证结果
				assertEquals(1, jobj.get("code"));
				assertEquals("注册成功", jobj.get("message"));
				assertEquals(0, jobj.get("giftMoney"));
				assertEquals("无优惠券信息", jobj.get("giftMoneyMessage"));
				//数据校验
				userBaseInfoDO=findUserBaseInfoByUserName(userName);
				userId=userBaseInfoDO.getUserId();
				userBaseId=userBaseInfoDO.getUserBaseId();
				assertEquals(mobile, userBaseInfoDO.getMobile());
				assertEquals(userName, userBaseInfoDO.getUserName());
				assertEquals(MD5Util.getMD5_32(logPassword), userBaseInfoDO.getLogPassword());
				
				
				//发送短信验证码(cellphone修改手机,旧手机)
				sendSmsCodeUrl="http://127.0.0.1:8085/app/sendSmsCode.htm?mobile="+mobile+"&business=cellphone";
				sendSmsCodeHP = new HttpPost(sendSmsCodeUrl);
				sendSmsCodeHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				sendSmsCodeHP.setEntity(httpEntity);
				response = httpclient.execute(sendSmsCodeHP);
				/*读返回数据*/
				conResult = EntityUtils.toString(response.getEntity());
				jobj = JSONObject.parseObject(conResult);
				sendSmsCodeHP.releaseConnection();
				System.out.println(jobj.get("code"));
				System.out.println(jobj.get("message"));
				assertEquals(1, jobj.get("code"));
				assertEquals("发送手机验证码成功", jobj.get("message"));	
				
				
				//修改绑定手机号，验证旧手机号
				String appChangeMobileUrl="http://127.0.0.1:8085//app/appChangeMobile.htm?code=888888";
				HttpPost appChangeMobileHP = new HttpPost(appChangeMobileUrl);
				appChangeMobileHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				appChangeMobileHP.setEntity(httpEntity);
				response = httpclient.execute(appChangeMobileHP);
				/*读返回数据*/
				conResult = EntityUtils.toString(response.getEntity());
				jobj = JSONObject.parseObject(conResult);
				appChangeMobileHP.releaseConnection();
				System.out.println(jobj.get("code"));
				System.out.println(jobj.get("message"));
				//验证结果
				assertEquals(1, jobj.get("code"));
				assertEquals("旧手机号校验成功", jobj.get("message"));
				if (testId!=1003) {
					md5UserBaseId=jobj.get("md5UserBaseId").toString();
				}
				assertNotNull(jobj.get("md5UserBaseId"));
				
				
				if (testId!=1002) {
					//发送短信验证码(newCellphone修改手机,新手机)
					sendSmsCodeUrl="http://127.0.0.1:8085/app/sendSmsCode.htm?mobile="+newMobile+"&business=newCellphone";
					sendSmsCodeHP = new HttpPost(sendSmsCodeUrl);
					sendSmsCodeHP.addHeader("Content-type", "application/x-www-form-urlencoded");
					sendSmsCodeHP.setEntity(httpEntity);
					response = httpclient.execute(sendSmsCodeHP);
					/*读返回数据*/
					conResult = EntityUtils.toString(response.getEntity());
					jobj = JSONObject.parseObject(conResult);
					sendSmsCodeHP.releaseConnection();
					System.out.println(jobj.get("code"));
					System.out.println(jobj.get("message"));
					assertEquals(1, jobj.get("code"));
					assertEquals("发送手机验证码成功", jobj.get("message"));	
				}
				if (testId==1004) {
					//模拟新手机号存在
					UserLoginDO userLoginDO=findUserLoginByName(userName);
					userLoginDO.setLoginName(newMobile);
					userLoginDAO.update(userLoginDO);
				}
			}
			
			//修改绑定手机号，验证新手机号
			String appChangeToNewPhoneUrl="http://127.0.0.1:8085//app/appChangeToNewPhone.htm?code=888888&newMobile="
										+newMobile+"&md5UserBaseId="+md5UserBaseId;
			HttpPost appChangeToNewPhoneHP = new HttpPost(appChangeToNewPhoneUrl);
			appChangeToNewPhoneHP.addHeader("Content-type", "application/x-www-form-urlencoded");
			appChangeToNewPhoneHP.setEntity(httpEntity);
			response = httpclient.execute(appChangeToNewPhoneHP);
			/*读返回数据*/
			conResult = EntityUtils.toString(response.getEntity());
			jobj = JSONObject.parseObject(conResult);
			appChangeToNewPhoneHP.releaseConnection();
			System.out.println(jobj.get("code"));
			System.out.println(jobj.get("message"));
			//验证结果
			if (testId==1001) {
				assertEquals(-1, jobj.get("code"));
				assertEquals("未登录或登录失效", jobj.get("message"));
			}else if (testId==1002) {
				assertEquals(0, jobj.get("code"));
				assertEquals("验证码校验失败", jobj.get("message"));
			}else if (testId==1003) {
				assertEquals(0, jobj.get("code"));
				assertEquals("md5UserBaseId错误", jobj.get("message"));
			}else if (testId==1004) {
				assertEquals(0, jobj.get("code"));
				assertEquals("手机号已存在", jobj.get("message"));
			}else if (testId==1005) {
				assertEquals(1, jobj.get("code"));
				assertEquals("修改绑定手机成功", jobj.get("message"));
			}
			
			
			
			
			
			//清除数据
			clearnUserRoleByUserId(userId);
			clearnUserByUserName(userName);
			clearnPersonaInfoByUserBaseId(userBaseId);
			clearnUserBaseInfoByUserName(userName);
			clearnUserAccountDataByUserId(userId);
			clearnUserExtendByUserId(userId);
			clearnUserLogin(userName);
			clearnUserLogin(newMobile);
			
			//清除登录日志
			List<UserLoginLogDO> userLoginLogDOlist=findUserLoginLogByUserId(userId);
			if (!userLoginLogDOlist.isEmpty()) {
				for (int i = 0; i < userLoginLogDOlist.size(); i++) {
					UserLoginLogDO userLoginLogDO=userLoginLogDOlist.get(i);
					if (userLoginLogDO!=null) {
						clearnUserLoginLogById(userLoginLogDO.getTblBaseId());
					}
				}
			}
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private static String getStringFromJson(JSONObject adata) {
		StringBuffer sb = new StringBuffer();
		sb.append("{");
		for (Object key : adata.keySet()) {
			sb.append("\"" + key + "\":\"" + adata.get(key) + "\",");
		}
		String rtn = sb.toString().substring(0, sb.toString().length() - 1)
				+ "}";
		return rtn;
	}
}
