/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.ChargeTempleDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.ChargeTempleDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.ChargeTempleDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/charge_temple.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisChargeTempleDAO extends SqlMapClientDaoSupport implements ChargeTempleDAO {
	/**
	 *  Insert one <tt>ChargeTempleDO</tt> object to DB table <tt>charge_temple</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into charge_temple(charge_id,charge_name,interest_rate,manage_rate,service_charge,loan_type,commodity_type,stages_num,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param chargeTemple
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int insert(ChargeTempleDO chargeTemple) throws DataAccessException {
    	if (chargeTemple == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-CHARGE-TEMPLE-INSERT", chargeTemple);

        return chargeTemple.getChargeId();
    }

	/**
	 *  Update DB table <tt>charge_temple</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update charge_temple set charge_name=?, interest_rate=?, manage_rate=?, service_charge=?, loan_type=?, commodity_type=?, stages_num=? where (charge_id = ?)</tt>
	 *
	 *	@param chargeTemple
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ChargeTempleDO chargeTemple) throws DataAccessException {
    	if (chargeTemple == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-CHARGE-TEMPLE-UPDATE", chargeTemple);
    }

	/**
	 *  Query DB table <tt>charge_temple</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, charge_name, interest_rate, manage_rate, service_charge, loan_type, commodity_type, stages_num, raw_add_time, raw_update_time from charge_temple where (charge_id = ?)</tt>
	 *
	 *	@param chargeId
	 *	@return ChargeTempleDO
	 *	@throws DataAccessException
	 */	 
    public ChargeTempleDO findById(int chargeId) throws DataAccessException {
        Integer param = new Integer(chargeId);

        return (ChargeTempleDO) getSqlMapClientTemplate().queryForObject("MS-CHARGE-TEMPLE-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>charge_temple</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from charge_temple where (charge_id = ?)</tt>
	 *
	 *	@param chargeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(int chargeId) throws DataAccessException {
        Integer param = new Integer(chargeId);

        return getSqlMapClientTemplate().delete("MS-CHARGE-TEMPLE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>charge_temple</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from charge_temple</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-CHARGE-TEMPLE-FIND-ALL-COUNT", null);

    }

	/**
	 *  Query DB table <tt>charge_temple</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from charge_temple</tt>
	 *
	 *	@return List<ChargeTempleDO>
	 *	@throws DataAccessException
	 */	 
    public List<ChargeTempleDO> findAllList() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-CHARGE-TEMPLE-FIND-ALL-LIST", null);

    }

	/**
	 *  Query DB table <tt>charge_temple</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from charge_temple where (1 = 1)</tt>
	 *
	 *	@param chargeName
	 *	@param serviceCharge
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long chargeTempleQueryCount(String chargeName, double serviceCharge) throws DataAccessException {
        Map param = new HashMap();

        param.put("chargeName", chargeName);
        param.put("serviceCharge", new Double(serviceCharge));

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-CHARGE-TEMPLE-CHARGE-TEMPLE-QUERY-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>charge_temple</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, charge_name, interest_rate, manage_rate, service_charge, loan_type, commodity_type, stages_num, raw_add_time, raw_update_time from charge_temple where (1 = 1)</tt>
	 *
	 *	@param chargeName
	 *	@param serviceCharge
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<ChargeTempleDO>
	 *	@throws DataAccessException
	 */	 
    public List<ChargeTempleDO> chargeTempleQueryList(String chargeName, double serviceCharge, long limitStart, long pageSize) throws DataAccessException {
        Map param = new HashMap();

        param.put("chargeName", chargeName);
        param.put("serviceCharge", new Double(serviceCharge));
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-CHARGE-TEMPLE-CHARGE-TEMPLE-QUERY-LIST", param);

    }

	/**
	 *  Query DB table <tt>charge_temple</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, charge_name, interest_rate, manage_rate, service_charge, loan_type, commodity_type, stages_num, raw_add_time, raw_update_time from charge_temple where (1 = 1)</tt>
	 *
	 *	@param loanType
	 *	@param commodityType
	 *	@param stagesNum
	 *	@return ChargeTempleDO
	 *	@throws DataAccessException
	 */	 
    public ChargeTempleDO findChargeTempleByTypeAndNum(String loanType, String commodityType, int stagesNum) throws DataAccessException {
        Map param = new HashMap();

        param.put("loanType", loanType);
        param.put("commodityType", commodityType);
        param.put("stagesNum", new Integer(stagesNum));

        return (ChargeTempleDO) getSqlMapClientTemplate().queryForObject("MS-CHARGE-TEMPLE-FIND-CHARGE-TEMPLE-BY-TYPE-AND-NUM", param);

    }

}