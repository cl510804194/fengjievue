/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.TblOrderItemDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.TblOrderItemDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.TblOrderItemDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/tbl_order_items.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisTblOrderItemDAO extends SqlMapClientDaoSupport implements TblOrderItemDAO {
	/**
	 *  Insert one <tt>TblOrderItemDO</tt> object to DB table <tt>tbl_order_items</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into tbl_order_items(id,order_id,item_product_id,item_product_name,quantity,pro_price,pic_path,post_free,begin_time,end_time,days,room_type,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tblOrderItem
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(TblOrderItemDO tblOrderItem) throws DataAccessException {
    	if (tblOrderItem == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TBL-ORDER-ITEM-INSERT", tblOrderItem);

        return tblOrderItem.getId();
    }

	/**
	 *  Update DB table <tt>tbl_order_items</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_order_items set item_product_id=?, item_product_name=?, quantity=?, pro_price=?, pic_path=?, post_free=?, begin_time=?, end_time=?, days=?, room_type=? where ((id = ?) AND (order_id = ?))</tt>
	 *
	 *	@param tblOrderItem
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TblOrderItemDO tblOrderItem) throws DataAccessException {
    	if (tblOrderItem == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-TBL-ORDER-ITEM-UPDATE", tblOrderItem);
    }

	/**
	 *  Query DB table <tt>tbl_order_items</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, order_id, item_product_id, item_product_name, quantity, pro_price, pic_path, post_free, begin_time, end_time, days, room_type, raw_add_time, raw_update_time from tbl_order_items where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return TblOrderItemDO
	 *	@throws DataAccessException
	 */	 
    public TblOrderItemDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (TblOrderItemDO) getSqlMapClientTemplate().queryForObject("MS-TBL-ORDER-ITEM-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>tbl_order_items</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, order_id, item_product_id, item_product_name, quantity, pro_price, pic_path, post_free, begin_time, end_time, days, room_type, raw_add_time, raw_update_time from tbl_order_items where (order_id = ?) order by raw_add_time ASC</tt>
	 *
	 *	@param orderId
	 *	@return List<TblOrderItemDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblOrderItemDO> findByOrderId(long orderId) throws DataAccessException {
        Long param = new Long(orderId);

        return getSqlMapClientTemplate().queryForList("MS-TBL-ORDER-ITEM-FIND-BY-ORDER-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>tbl_order_items</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_order_items where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-TBL-ORDER-ITEM-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>tbl_order_items</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_order_items where (order_id = ?)</tt>
	 *
	 *	@param orderId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByOrderId(long orderId) throws DataAccessException {
        Long param = new Long(orderId);

        return getSqlMapClientTemplate().delete("MS-TBL-ORDER-ITEM-DELETE-BY-ORDER-ID", param);
    }

	/**
	 *  Query DB table <tt>tbl_order_items</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_order_info</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TBL-ORDER-ITEM-FIND-ALL-COUNT", null);

    }

}