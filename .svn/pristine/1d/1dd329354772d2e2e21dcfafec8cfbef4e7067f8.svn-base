/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.RoleReportDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.RoleReportDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.RoleReportDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/role_report.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisRoleReportDAO extends SqlMapClientDaoSupport implements RoleReportDAO {
	/**
	 *  Insert one <tt>RoleReportDO</tt> object to DB table <tt>role_report</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into role_report(role_id,report_id) values (?, ?)</tt>
	 *
	 *	@param roleReport
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(RoleReportDO roleReport) throws DataAccessException {
    	if (roleReport == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-ROLE-REPORT-INSERT", roleReport);

        return roleReport.getRoleReportId();
    }

	/**
	 *  Query DB table <tt>role_report</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select role_report_id, role_id, report_id from role_report where (report_id = ?)</tt>
	 *
	 *	@param reportId
	 *	@return List<RoleReportDO>
	 *	@throws DataAccessException
	 */	 
    public List<RoleReportDO> findByReportId(long reportId) throws DataAccessException {
        Long param = new Long(reportId);

        return getSqlMapClientTemplate().queryForList("MS-ROLE-REPORT-FIND-BY-REPORT-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>role_report</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from role_report where (role_report_id = ?)</tt>
	 *
	 *	@param roleReportId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long roleReportId) throws DataAccessException {
        Long param = new Long(roleReportId);

        return getSqlMapClientTemplate().delete("MS-ROLE-REPORT-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>role_report</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from role_report where (report_id = ?)</tt>
	 *
	 *	@param reportId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByReportId(long reportId) throws DataAccessException {
        Long param = new Long(reportId);

        return getSqlMapClientTemplate().delete("MS-ROLE-REPORT-DELETE-BY-REPORT-ID", param);
    }

}