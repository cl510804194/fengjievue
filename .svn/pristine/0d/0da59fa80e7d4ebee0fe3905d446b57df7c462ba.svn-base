/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.RefundItemDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>refund_item</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/refund_item.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface RefundItemDAO {
	/**
	 *  Insert one <tt>RefundItemDO</tt> object to DB table <tt>refund_item</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into refund_item(item_id,contract_id,yjf_account_id,yjf_account_name,out_biz_no,sales_date,sales_area,customer_name,certificate_card,customer_sex,customer_birthday,commodity_type,commodity_brand,commodity_amount,loan_amount,stages_num,monthly_amount,user_name,store_name,store_id,referrer_name,stage_num,current_num,refund_bank,refund_card_number,loan_type,user_id,current_refund_amount,breach_of_contract_amount,refund_time,actual_refund_time,refund_status,remark,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param refundItem
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(RefundItemDO refundItem) throws DataAccessException;

	/**
	 *  Update DB table <tt>refund_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update refund_item set contract_id=?, yjf_account_id=?, yjf_account_name=?, sales_date=?, sales_area=?, customer_name=?, certificate_card=?, customer_sex=?, customer_birthday=?, commodity_type=?, commodity_brand=?, commodity_amount=?, loan_amount=?, stages_num=?, monthly_amount=?, user_name=?, store_name=?, store_id=?, referrer_name=?, stage_num=?, current_num=?, refund_bank=?, refund_card_number=?, loan_type=?, user_id=?, current_refund_amount=?, breach_of_contract_amount=?, refund_time=?, actual_refund_time=?, out_biz_no=?, refund_status=?, remark=? where (item_id = ?)</tt>
	 *
	 *	@param refundItem
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(RefundItemDO refundItem) throws DataAccessException;

	/**
	 *  Query DB table <tt>refund_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select item_id, contract_id, yjf_account_id, yjf_account_name, sales_date, sales_area, customer_name, certificate_card, customer_sex, customer_birthday, commodity_type, commodity_brand, commodity_amount, loan_amount, stages_num, monthly_amount, user_name, store_name, store_id, referrer_name, stage_num, current_num, refund_bank, refund_card_number, loan_type, user_id, current_refund_amount, breach_of_contract_amount, refund_time, actual_refund_time, refund_status, remark, out_biz_no, raw_add_time, raw_update_time from refund_item where (item_id = ?)</tt>
	 *
	 *	@param itemId
	 *	@return RefundItemDO
	 *	@throws DataAccessException
	 */	 
    public RefundItemDO findById(long itemId) throws DataAccessException;

	/**
	 *  Query DB table <tt>refund_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select item_id, contract_id, yjf_account_id, yjf_account_name, sales_date, sales_area, customer_name, certificate_card, customer_sex, customer_birthday, commodity_type, commodity_brand, commodity_amount, loan_amount, stages_num, monthly_amount, user_name, store_name, store_id, referrer_name, stage_num, current_num, refund_bank, refund_card_number, loan_type, user_id, current_refund_amount, breach_of_contract_amount, refund_time, actual_refund_time, refund_status, out_biz_no, remark, raw_add_time, raw_update_time from refund_item where (item_id = ?) for update</tt>
	 *
	 *	@param itemId
	 *	@return RefundItemDO
	 *	@throws DataAccessException
	 */	 
    public RefundItemDO findByIdForUpdate(long itemId) throws DataAccessException;

	/**
	 *  Query DB table <tt>refund_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select item_id, contract_id, yjf_account_id, yjf_account_name, sales_date, sales_area, customer_name, certificate_card, customer_sex, customer_birthday, commodity_type, commodity_brand, commodity_amount, loan_amount, stages_num, monthly_amount, user_name, store_name, store_id, referrer_name, stage_num, current_num, refund_bank, refund_card_number, loan_type, user_id, current_refund_amount, breach_of_contract_amount, refund_time, actual_refund_time, refund_status, out_biz_no, remark, raw_add_time, raw_update_time from refund_item where (out_biz_no = ?)</tt>
	 *
	 *	@param outBizNo
	 *	@return RefundItemDO
	 *	@throws DataAccessException
	 */	 
    public RefundItemDO findByOutBizNo(String outBizNo) throws DataAccessException;

	/**
	 *  Query DB table <tt>refund_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select item_id, contract_id, yjf_account_id, yjf_account_name, sales_date, sales_area, customer_name, certificate_card, customer_sex, customer_birthday, commodity_type, commodity_brand, commodity_amount, loan_amount, stages_num, monthly_amount, user_name, store_name, store_id, referrer_name, stage_num, current_num, refund_bank, out_biz_no, refund_card_number, loan_type, user_id, current_refund_amount, breach_of_contract_amount, refund_time, actual_refund_time, refund_status, remark, raw_add_time, raw_update_time from refund_item where (1 = 1)</tt>
	 *
	 *	@param refundItem
	 *	@param customerBirthdayStart
	 *	@param customerBirthdayEnd
	 *	@param refundTimeStart
	 *	@param refundTimeEnd
	 *	@param actualRefundTimeStart
	 *	@param actualRefundTimeEnd
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<RefundItemDO>
	 *	@throws DataAccessException
	 */	 
    public List<RefundItemDO> queryCondition(RefundItemDO refundItem, Date customerBirthdayStart, Date customerBirthdayEnd, Date refundTimeStart, Date refundTimeEnd, Date actualRefundTimeStart, Date actualRefundTimeEnd, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>refund_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from refund_item where (1 = 1)</tt>
	 *
	 *	@param refundItem
	 *	@param customerBirthdayStart
	 *	@param customerBirthdayEnd
	 *	@param refundTimeStart
	 *	@param refundTimeEnd
	 *	@param actualRefundTimeStart
	 *	@param actualRefundTimeEnd
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long queryConditionCount(RefundItemDO refundItem, Date customerBirthdayStart, Date customerBirthdayEnd, Date refundTimeStart, Date refundTimeEnd, Date actualRefundTimeStart, Date actualRefundTimeEnd) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>refund_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from refund_item where (item_id = ?)</tt>
	 *
	 *	@param itemId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long itemId) throws DataAccessException;

	/**
	 *  Query DB table <tt>refund_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from refund_item</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException;

}