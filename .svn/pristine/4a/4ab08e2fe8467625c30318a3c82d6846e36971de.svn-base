/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.PaymentFlowDO;
import org.springframework.dao.DataAccessException;

/**
 * A dao interface provides methods to access database table <tt>payment_flow</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/payment_flow.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */

public interface PaymentFlowDAO {
	/**
	 *  Insert one <tt>PaymentFlowDO</tt> object to DB table <tt>payment_flow</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into payment_flow(payment_flow_id,order_no,payment_amount,user_id,user_name,real_name,bank_code,payment_date,payment_success_date,payment_type,status,order_ids,raw_add_time,red_pay,integral_pay,ticket_amount,refund_status,refund_amount,payment_mode,ticket_id,trade_no,ext_order,ext_order1) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param paymentFlow
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(PaymentFlowDO paymentFlow) throws DataAccessException;

	/**
	 *  Query DB table <tt>payment_flow</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from payment_flow where (payment_flow_id = ?)</tt>
	 *
	 *	@param paymentFlowId
	 *	@return PaymentFlowDO
	 *	@throws DataAccessException
	 */	 
    public PaymentFlowDO findById(String paymentFlowId) throws DataAccessException;

	/**
	 *  Query DB table <tt>payment_flow</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from payment_flow where (order_no = ?)</tt>
	 *
	 *	@param orderNo
	 *	@return PaymentFlowDO
	 *	@throws DataAccessException
	 */	 
    public PaymentFlowDO findByOrderNo(String orderNo) throws DataAccessException;

	/**
	 *  Query DB table <tt>payment_flow</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from payment_flow where (ext_order = ?)</tt>
	 *
	 *	@param extOrder
	 *	@return PaymentFlowDO
	 *	@throws DataAccessException
	 */	 
    public PaymentFlowDO findByExtOrder(String extOrder) throws DataAccessException;

	/**
	 *  Query DB table <tt>payment_flow</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from payment_flow where (payment_flow_id = ?) for update</tt>
	 *
	 *	@param paymentFlowId
	 *	@return PaymentFlowDO
	 *	@throws DataAccessException
	 */	 
    public PaymentFlowDO findByIdForUpdate(String paymentFlowId) throws DataAccessException;

	/**
	 *  Query DB table <tt>payment_flow</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from payment_flow where (order_no = ?) for update</tt>
	 *
	 *	@param orderNo
	 *	@return PaymentFlowDO
	 *	@throws DataAccessException
	 */	 
    public PaymentFlowDO findByOrderNoForUpdate(String orderNo) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>payment_flow</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from payment_flow where (payment_flow_id = ?)</tt>
	 *
	 *	@param paymentFlowId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(String paymentFlowId) throws DataAccessException;

	/**
	 *  Update DB table <tt>payment_flow</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update payment_flow set order_no=?, payment_amount=?, user_id=?, user_name=?, real_name=?, bank_code=?, payment_date=?, payment_success_date=?, payment_type=?, status=?, order_ids=?, red_pay=?, integral_pay=?, ticket_amount=?, refund_status=?, refund_amount=?, payment_mode=?, ticket_id=?, trade_no=?, ext_order=?, ext_order1=? where (payment_flow_id = ?)</tt>
	 *
	 *	@param paymentFlow
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(PaymentFlowDO paymentFlow) throws DataAccessException;

	/**
	 *  Query DB table <tt>payment_flow</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from payment_flow where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return PaymentFlowDO
	 *	@throws DataAccessException
	 */	 
    public PaymentFlowDO findByUserIdAutotest(long userId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>payment_flow</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from payment_flow where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserIdAutotest(long userId) throws DataAccessException;

}