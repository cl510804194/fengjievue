/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.TblSupplierRecommendDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.TblSupplierRecommendDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.TblSupplierRecommendDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/tbl_supplier_recommend.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisTblSupplierRecommendDAO extends SqlMapClientDaoSupport implements TblSupplierRecommendDAO {
	/**
	 *  Insert one <tt>TblSupplierRecommendDO</tt> object to DB table <tt>tbl_supplier_recommend</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into tbl_supplier_recommend(supplier_recommend_id,supplier_id,user_id,type,raw_add_time) values (?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tblSupplierRecommend
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(TblSupplierRecommendDO tblSupplierRecommend) throws DataAccessException {
    	if (tblSupplierRecommend == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TBL-SUPPLIER-RECOMMEND-INSERT", tblSupplierRecommend);

        return tblSupplierRecommend.getSupplierRecommendId();
    }

	/**
	 *  Update DB table <tt>tbl_supplier_recommend</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_supplier_recommend set supplier_id=?, user_id=? where (supplier_recommend_id = ?)</tt>
	 *
	 *	@param tblSupplierRecommend
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TblSupplierRecommendDO tblSupplierRecommend) throws DataAccessException {
    	if (tblSupplierRecommend == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-TBL-SUPPLIER-RECOMMEND-UPDATE", tblSupplierRecommend);
    }

	/**
	 *  Query DB table <tt>tbl_supplier_recommend</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select supplier_recommend_id, supplier_id, user_id, type, raw_add_time, raw_update_time from tbl_supplier_recommend where (supplier_recommend_id = ?)</tt>
	 *
	 *	@param supplierRecommendId
	 *	@return TblSupplierRecommendDO
	 *	@throws DataAccessException
	 */	 
    public TblSupplierRecommendDO findById(long supplierRecommendId) throws DataAccessException {
        Long param = new Long(supplierRecommendId);

        return (TblSupplierRecommendDO) getSqlMapClientTemplate().queryForObject("MS-TBL-SUPPLIER-RECOMMEND-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>tbl_supplier_recommend</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select supplier_recommend_id, supplier_id, user_id, type, raw_add_time, raw_update_time from tbl_supplier_recommend where ((supplier_id = ?) AND (type = ?))</tt>
	 *
	 *	@param supplierId
	 *	@param type
	 *	@return List<TblSupplierRecommendDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblSupplierRecommendDO> findBySupplierIdType(long supplierId, String type) throws DataAccessException {
        Map param = new HashMap();

        param.put("supplierId", new Long(supplierId));
        param.put("type", type);

        return getSqlMapClientTemplate().queryForList("MS-TBL-SUPPLIER-RECOMMEND-FIND-BY-SUPPLIER-ID-TYPE", param);

    }

	/**
	 *  Delete records from DB table <tt>tbl_supplier_recommend</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_supplier_recommend where (supplier_recommend_id = ?)</tt>
	 *
	 *	@param supplierRecommendId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long supplierRecommendId) throws DataAccessException {
        Long param = new Long(supplierRecommendId);

        return getSqlMapClientTemplate().delete("MS-TBL-SUPPLIER-RECOMMEND-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>tbl_supplier_recommend</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_supplier_recommend where ((supplier_id = ?) AND (type = ?))</tt>
	 *
	 *	@param supplierId
	 *	@param type
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteBySupplierIdType(long supplierId, String type) throws DataAccessException {
        Map param = new HashMap();

        param.put("supplierId", new Long(supplierId));
        param.put("type", type);

        return getSqlMapClientTemplate().delete("MS-TBL-SUPPLIER-RECOMMEND-DELETE-BY-SUPPLIER-ID-TYPE", param);
    }

	/**
	 *  Query DB table <tt>tbl_supplier_recommend</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_supplier_recommend</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TBL-SUPPLIER-RECOMMEND-FIND-ALL-COUNT", null);

    }

	/**
	 *  Query DB table <tt>tbl_supplier_recommend</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select supplier_recommend_id, supplier_id, user_id, type, raw_add_time, raw_update_time from tbl_supplier_recommend where (1 = 1)</tt>
	 *
	 *	@param tblSupplierRecommend
	 *	@param limitStart
	 *	@param pageSize
	 *	@param beginDate
	 *	@param endDate
	 *	@return List<TblSupplierRecommendDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblSupplierRecommendDO> findByCondition(TblSupplierRecommendDO tblSupplierRecommend, long limitStart, long pageSize, Date beginDate, Date endDate) throws DataAccessException {
    	if (tblSupplierRecommend == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblSupplierRecommend", tblSupplierRecommend);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("beginDate", beginDate);
        param.put("endDate", endDate);

        return getSqlMapClientTemplate().queryForList("MS-TBL-SUPPLIER-RECOMMEND-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>tbl_supplier_recommend</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_supplier_recommend where (1 = 1)</tt>
	 *
	 *	@param tblSupplierRecommend
	 *	@param beginDate
	 *	@param endDate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(TblSupplierRecommendDO tblSupplierRecommend, Date beginDate, Date endDate) throws DataAccessException {
    	if (tblSupplierRecommend == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblSupplierRecommend", tblSupplierRecommend);
        param.put("beginDate", beginDate);
        param.put("endDate", endDate);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-TBL-SUPPLIER-RECOMMEND-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}