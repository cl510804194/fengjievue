/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.LotteryActivityInstanceDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.LotteryActivityInstanceDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.LotteryActivityInstanceDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/lottery_activity_instance.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisLotteryActivityInstanceDAO extends SqlMapClientDaoSupport implements LotteryActivityInstanceDAO {
	/**
	 *  Insert one <tt>LotteryActivityInstanceDO</tt> object to DB table <tt>lottery_activity_instance</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into lottery_activity_instance(instance_id,activity_id,name,start_time,end_time,lottery_type,condition_begin_date,condition_end_date,prize_rule_id,prize_rule_name,people_num,lottery_num,surplus_num,tobe_winner_num,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param lotteryActivityInstance
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(LotteryActivityInstanceDO lotteryActivityInstance) throws DataAccessException {
    	if (lotteryActivityInstance == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-LOTTERY-ACTIVITY-INSTANCE-INSERT", lotteryActivityInstance);

        return lotteryActivityInstance.getInstanceId();
    }

	/**
	 *  Update DB table <tt>lottery_activity_instance</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update lottery_activity_instance set activity_id=?, name=?, start_time=?, end_time=?, lottery_type=?, condition_begin_date=?, condition_end_date=?, prize_rule_id=?, prize_rule_name=?, people_num=?, lottery_num=?, surplus_num=?, tobe_winner_num=? where (instance_id = ?)</tt>
	 *
	 *	@param lotteryActivityInstance
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(LotteryActivityInstanceDO lotteryActivityInstance) throws DataAccessException {
    	if (lotteryActivityInstance == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-LOTTERY-ACTIVITY-INSTANCE-UPDATE", lotteryActivityInstance);
    }

	/**
	 *  Query DB table <tt>lottery_activity_instance</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select instance_id, activity_id, name, start_time, end_time, lottery_type, condition_begin_date, condition_end_date, prize_rule_id, prize_rule_name, people_num, lottery_num, surplus_num, tobe_winner_num, raw_add_time, raw_update_time from lottery_activity_instance where (instance_id = ?)</tt>
	 *
	 *	@param instanceId
	 *	@return LotteryActivityInstanceDO
	 *	@throws DataAccessException
	 */	 
    public LotteryActivityInstanceDO findById(long instanceId) throws DataAccessException {
        Long param = new Long(instanceId);

        return (LotteryActivityInstanceDO) getSqlMapClientTemplate().queryForObject("MS-LOTTERY-ACTIVITY-INSTANCE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>lottery_activity_instance</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select instance_id, activity_id, name, start_time, end_time, lottery_type, condition_begin_date, condition_end_date, prize_rule_id, prize_rule_name, people_num, lottery_num, surplus_num, tobe_winner_num, raw_add_time, raw_update_time from lottery_activity_instance where (instance_id = ?) for update</tt>
	 *
	 *	@param instanceId
	 *	@return LotteryActivityInstanceDO
	 *	@throws DataAccessException
	 */	 
    public LotteryActivityInstanceDO findByIdForUpdate(long instanceId) throws DataAccessException {
        Long param = new Long(instanceId);

        return (LotteryActivityInstanceDO) getSqlMapClientTemplate().queryForObject("MS-LOTTERY-ACTIVITY-INSTANCE-FIND-BY-ID-FOR-UPDATE", param);

    }

	/**
	 *  Query DB table <tt>lottery_activity_instance</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select instance_id, activity_id, name, start_time, end_time, lottery_type, condition_begin_date, condition_end_date, prize_rule_id, prize_rule_name, people_num, lottery_num, surplus_num, tobe_winner_num, raw_add_time, raw_update_time from lottery_activity_instance where (activity_id = ?)</tt>
	 *
	 *	@param activityId
	 *	@return LotteryActivityInstanceDO
	 *	@throws DataAccessException
	 */	 
    public LotteryActivityInstanceDO findByActivityId(long activityId) throws DataAccessException {
        Long param = new Long(activityId);

        return (LotteryActivityInstanceDO) getSqlMapClientTemplate().queryForObject("MS-LOTTERY-ACTIVITY-INSTANCE-FIND-BY-ACTIVITY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>lottery_activity_instance</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from lottery_activity_instance where (instance_id = ?)</tt>
	 *
	 *	@param instanceId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long instanceId) throws DataAccessException {
        Long param = new Long(instanceId);

        return getSqlMapClientTemplate().delete("MS-LOTTERY-ACTIVITY-INSTANCE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>lottery_activity_instance</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select instance_id, activity_id, name, start_time, end_time, lottery_type, condition_begin_date, condition_end_date, prize_rule_id, prize_rule_name, people_num, lottery_num, surplus_num, tobe_winner_num, raw_add_time, raw_update_time from lottery_activity_instance</tt>
	 *
	 *	@param lotteryActivityInstance
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<LotteryActivityInstanceDO>
	 *	@throws DataAccessException
	 */	 
    public List<LotteryActivityInstanceDO> findByCondition(LotteryActivityInstanceDO lotteryActivityInstance, long limitStart, long pageSize) throws DataAccessException {
    	if (lotteryActivityInstance == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("lotteryActivityInstance", lotteryActivityInstance);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-LOTTERY-ACTIVITY-INSTANCE-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>lottery_activity_instance</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from lottery_activity_instance</tt>
	 *
	 *	@param lotteryActivityInstance
	 *	@param statusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findCountByCondition(LotteryActivityInstanceDO lotteryActivityInstance, List statusList) throws DataAccessException {
    	if (lotteryActivityInstance == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("lotteryActivityInstance", lotteryActivityInstance);
        param.put("statusList", statusList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-LOTTERY-ACTIVITY-INSTANCE-FIND-COUNT-BY-CONDITION", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Insert one <tt>LotteryActivityInstanceDO</tt> object to DB table <tt>lottery_activity_instance</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into lottery_activity_instance(instance_id,activity_id,name,start_time,end_time,lottery_type,condition_begin_date,condition_end_date,prize_rule_id,prize_rule_name,people_num,lottery_num,surplus_num,tobe_winner_num,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param lotteryActivityInstance
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(LotteryActivityInstanceDO lotteryActivityInstance) throws DataAccessException {
    	if (lotteryActivityInstance == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-LOTTERY-ACTIVITY-INSTANCE-INSERT-AUTOTEST", lotteryActivityInstance);

        return lotteryActivityInstance.getInstanceId();
    }

	/**
	 *  Query DB table <tt>lottery_activity_instance</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select instance_id, activity_id, name, start_time, end_time, lottery_type, condition_begin_date, condition_end_date, prize_rule_id, prize_rule_name, people_num, lottery_num, surplus_num, tobe_winner_num, raw_add_time, raw_update_time from lottery_activity_instance where (activity_id = ?)</tt>
	 *
	 *	@param activityId
	 *	@return LotteryActivityInstanceDO
	 *	@throws DataAccessException
	 */	 
    public LotteryActivityInstanceDO findByActivityIdAutotest(long activityId) throws DataAccessException {
        Long param = new Long(activityId);

        return (LotteryActivityInstanceDO) getSqlMapClientTemplate().queryForObject("MS-LOTTERY-ACTIVITY-INSTANCE-FIND-BY-ACTIVITY-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>lottery_activity_instance</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from lottery_activity_instance where (instance_id = ?)</tt>
	 *
	 *	@param instanceId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByIdAutotest(long instanceId) throws DataAccessException {
        Long param = new Long(instanceId);

        return getSqlMapClientTemplate().delete("MS-LOTTERY-ACTIVITY-INSTANCE-DELETE-BY-ID-AUTOTEST", param);
    }

	/**
	 *  Delete records from DB table <tt>lottery_activity_instance</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from lottery_activity_instance where (activity_id = ?)</tt>
	 *
	 *	@param activityId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByActivityIdAutotest(long activityId) throws DataAccessException {
        Long param = new Long(activityId);

        return getSqlMapClientTemplate().delete("MS-LOTTERY-ACTIVITY-INSTANCE-DELETE-BY-ACTIVITY-ID-AUTOTEST", param);
    }

}