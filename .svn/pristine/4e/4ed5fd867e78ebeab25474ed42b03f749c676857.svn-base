/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.BankBaseInfoDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>bank_base_info</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/bank_base_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface BankBaseInfoDAO {
	/**
	 *  Insert one <tt>BankBaseInfoDO</tt> object to DB table <tt>bank_base_info</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into bank_base_info(bank_code,bank_name,withholding_amount,withdraw_amount,day_withholding_amount,signed_way,is_stop,logo_url,memo,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param bankBaseInfo
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(BankBaseInfoDO bankBaseInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select bank_code, bank_name, withholding_amount, withdraw_amount, day_withholding_amount, signed_way, is_stop, logo_url, memo, raw_add_time, raw_update_time from bank_base_info where (bank_code = ?)</tt>
	 *
	 *	@param bankCode
	 *	@return BankBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public BankBaseInfoDO findById(String bankCode) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>bank_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from bank_base_info where (bank_code = ?)</tt>
	 *
	 *	@param bankCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(String bankCode) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_base_info set bank_name=?, withholding_amount=?, withdraw_amount=?, day_withholding_amount=?, signed_way=?, is_stop=?, logo_url=?, memo=?, raw_add_time=?, raw_update_time=? where (bank_code = ?)</tt>
	 *
	 *	@param bankBaseInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(BankBaseInfoDO bankBaseInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select bank_code, bank_name, withholding_amount, withdraw_amount, day_withholding_amount, signed_way, is_stop, logo_url, memo, raw_add_time, raw_update_time from bank_base_info where (is_stop = 1)</tt>
	 *
	 *	@return List<BankBaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<BankBaseInfoDO> findAllBankConfig() throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select bank_code, bank_name, withholding_amount, withdraw_amount, day_withholding_amount, signed_way, is_stop, logo_url, memo, raw_add_time, raw_update_time from bank_base_info</tt>
	 *
	 *	@return List<BankBaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<BankBaseInfoDO> findAllBankConfigIgnoredStatus() throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from bank_base_info</tt>
	 *
	 *	@param bankBaseInfo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long searchDataCount(BankBaseInfoDO bankBaseInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select bank_code, bank_name, withholding_amount, withdraw_amount, day_withholding_amount, signed_way, is_stop, logo_url, memo, raw_add_time, raw_update_time from bank_base_info</tt>
	 *
	 *	@param bankBaseInfo
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<BankBaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<BankBaseInfoDO> findBankWithCondition(BankBaseInfoDO bankBaseInfo, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from bank_base_info</tt>
	 *
	 *	@param bankBaseInfo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long searchDataCountWithCondition(BankBaseInfoDO bankBaseInfo) throws DataAccessException;

}