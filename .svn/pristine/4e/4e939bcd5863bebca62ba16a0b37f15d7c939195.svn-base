/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.HotelsStockDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>hotels_stock</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/hotels_stock.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface HotelsStockDAO {
	/**
	 *  Insert one <tt>HotelsStockDO</tt> object to DB table <tt>hotels_stock</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into hotels_stock(id,product_id,product_name,supplier_id,price_date,product_price,market_price,exec_price,morning_room_price,special_room_price,in_stock,available_stock,ordain_num,morning_room_total_num,morning_room_num,special_room_total_num,special_room_num,long_room_num,status,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param hotelsStock
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(HotelsStockDO hotelsStock) throws DataAccessException;

	/**
	 *  Query DB table <tt>hotels_stock</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hotels_stock where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return HotelsStockDO
	 *	@throws DataAccessException
	 */	 
    public HotelsStockDO findById(long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>hotels_stock</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hotels_stock</tt>
	 *
	 *	@param hotelsStock
	 *	@param productStatus
	 *	@param beginDate
	 *	@param endDate
	 *	@param leftStock
	 *	@param normalStock
	 *	@param leftSpeStock
	 *	@param leftMorStock
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<HotelsStockDO>
	 *	@throws DataAccessException
	 */	 
    public List<HotelsStockDO> findByCondition(HotelsStockDO hotelsStock, String productStatus, Date beginDate, Date endDate, long leftStock, long normalStock, long leftSpeStock, long leftMorStock, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>hotels_stock</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from hotels_stock</tt>
	 *
	 *	@param hotelsStock
	 *	@param productStatus
	 *	@param beginDate
	 *	@param endDate
	 *	@param leftStock
	 *	@param normalStock
	 *	@param leftSpeStock
	 *	@param leftMorStock
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(HotelsStockDO hotelsStock, String productStatus, Date beginDate, Date endDate, long leftStock, long normalStock, long leftSpeStock, long leftMorStock) throws DataAccessException;

	/**
	 *  Query DB table <tt>hotels_stock</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hotels_stock where (1 = 1)</tt>
	 *
	 *	@param idList
	 *	@param beginDate
	 *	@param endDate
	 *	@param status
	 *	@return List<HotelsStockDO>
	 *	@throws DataAccessException
	 */	 
    public List<HotelsStockDO> findByPidAndDates(List idList, Date beginDate, Date endDate, String status) throws DataAccessException;

	/**
	 *  Query DB table <tt>hotels_stock</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hotels_stock where (id = ?) for update</tt>
	 *
	 *	@param id
	 *	@return HotelsStockDO
	 *	@throws DataAccessException
	 */	 
    public HotelsStockDO findByIdForUpdate(long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>hotels_stock</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hotels_stock where ((product_id = ?) AND (price_date = ?))</tt>
	 *
	 *	@param productId
	 *	@param priceDate
	 *	@return HotelsStockDO
	 *	@throws DataAccessException
	 */	 
    public HotelsStockDO findByPidAndDate(long productId, Date priceDate) throws DataAccessException;

	/**
	 *  Update DB table <tt>hotels_stock</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hotels_stock set product_name=? where (product_id = ?)</tt>
	 *
	 *	@param productName
	 *	@param productId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProductName(String productName, long productId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>hotels_stock</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from hotels_stock where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>hotels_stock</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from hotels_stock where (product_id = ?)</tt>
	 *
	 *	@param productId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProductId(long productId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>hotels_stock</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from hotels_stock where ((product_id = ?) AND (price_date >= ?) AND (price_date < ?) AND (status = 'ON') AND (ordain_num = 0))</tt>
	 *
	 *	@param productId
	 *	@param priceDate
	 *	@param priceDate2
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByInit(long productId, Date priceDate, Date priceDate2) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>hotels_stock</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from hotels_stock where ((product_id = ?) AND (price_date >= ?) AND (price_date < ?))</tt>
	 *
	 *	@param productId
	 *	@param priceDate
	 *	@param priceDate2
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByPIdAndDates(long productId, Date priceDate, Date priceDate2) throws DataAccessException;

	/**
	 *  Query DB table <tt>hotels_stock</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select 0 id, NULL price_date, 0 morning_room_price, 0 special_room_price, 0 morning_room_num, NULL raw_add_time, NULL raw_update_time, product_id, product_name, supplier_id, avg(product_price) product_price, avg(market_price) market_price, avg(exec_price) exec_price, min(in_stock) in_stock, min(available_stock) available_stock, max(ordain_num) ordain_num, min(special_room_total_num) special_room_total_num, max(special_room_num) special_room_num, max(long_room_num) long_room_num from hotels_stock where ((product_id = ?) AND (price_date >= ?) AND (price_date < ?) AND (status = ?)) group by product_id, product_name, supplier_id</tt>
	 *
	 *	@param productId
	 *	@param priceDate
	 *	@param priceDate2
	 *	@param status
	 *	@return HotelsStockDO
	 *	@throws DataAccessException
	 */	 
    public HotelsStockDO findPeriod(long productId, Date priceDate, Date priceDate2, String status) throws DataAccessException;

	/**
	 *  Update DB table <tt>hotels_stock</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hotels_stock set product_id=?, product_name=?, supplier_id=?, price_date=?, product_price=?, market_price=?, exec_price=?, morning_room_price=?, special_room_price=?, in_stock=?, available_stock=?, ordain_num=?, morning_room_total_num=?, morning_room_num=?, special_room_total_num=?, special_room_num=?, long_room_num=?, status=? where (id = ?)</tt>
	 *
	 *	@param hotelsStock
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(HotelsStockDO hotelsStock) throws DataAccessException;

}