/*
 * www.yiji.com Inc.
 * Copyright (c) 2014 All Rights Reserved.
 */

/*
 * 修订记录：
 * Administrator 下午5:15:23 创建
 */
package com.yjf.esupplier.service.trade.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yjf.esupplier.integration.openapi.WithdrawService;
import com.yjf.esupplier.integration.openapi.context.OpenApiContext;
import com.yjf.esupplier.integration.openapi.order.WithdrawOrder;
import com.yjf.esupplier.integration.openapi.result.WithdrawResult;
import com.yjf.esupplier.service.recharge.RechargeFlowService;
import com.yjf.esupplier.service.recharge.WithdrawFlowService;
import com.yjf.esupplier.service.recharge.order.WithdrawFlowOrder;
import com.yjf.esupplier.service.trade.WithdrawYrdService;
import com.yjf.esupplier.service.trade.order.PPMWithdrawOrder;
import com.yjf.esupplier.service.user.query.UserQueryService;
import com.yjf.esupplier.service.user.result.UserQueryResult;
import com.yjf.esupplier.ws.result.EsupplierBaseResult;
import com.yjf.esupplier.ws.service.EsupplierResultEnum;

/**
 * @author Administrator
 */
@Service("withdrawYrdService")
public class WithdrawYrdServiceImpl extends DeductWithdrawBase implements WithdrawYrdService {
	@Autowired
	WithdrawFlowService withdrawFlowService;
	
	@Autowired
	UserQueryService userQueryService;
	
	@Autowired
	WithdrawService withdrawService;
	
	@Autowired
	RechargeFlowService rechargeFlowService;
	
	/**
	 * @param order
	 * @return
	 */
	@Override
	public EsupplierBaseResult applyPPMWithdraw(PPMWithdrawOrder order) {
		EsupplierBaseResult depositResult = new EsupplierBaseResult();
		try {
			
			order.check();
			UserQueryResult queryResult = userQueryService.queryByUserId(order.getUserId());
			
			if (queryResult.getQueryUserInfo() == null) {
				depositResult.setSuccess(false);
				depositResult.setCreditsysResultEnum(EsupplierResultEnum.HAVE_NOT_DATA);
				depositResult.setMessage("用户不存在");
				return depositResult;
			}
			
			OpenApiContext openApiContext = getOpenApiContext();
			WithdrawFlowOrder withdrawFlowOrder = new WithdrawFlowOrder();
			withdrawFlowOrder.setStatus(-1);
			withdrawFlowOrder.setOutBizNo(openApiContext.getOpenApiBizNo());
			withdrawFlowOrder.setOutUserId(order.getUserId());
			WithdrawOrder wOrder = new WithdrawOrder();
			wOrder.setUserId(queryResult.getQueryUserInfo().getAccountId());
			wOrder.setAccountName(queryResult.getQueryUserInfo().getAccountName());
			
			WithdrawResult withdrawResult = withdrawService.gotoWithdrawUrl(wOrder, openApiContext);
			if (withdrawResult.isSuccess()) {
				withdrawFlowService.save(withdrawFlowOrder);
			}
			depositResult.setUrl(withdrawResult.getUrl());
		} catch (IllegalArgumentException e) {
			depositResult.setSuccess(false);
			depositResult.setCreditsysResultEnum(EsupplierResultEnum.INCOMPLETE_REQ_PARAM);
			depositResult.setMessage(e.getMessage());
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return depositResult;
	}
	
	//	@Override
	//	public EsupplierBaseResult applyBornWithdraw(BornWithdrawOrder order) {
	//		EsupplierBaseResult depositResult = new EsupplierBaseResult();
	//		try {
	//			UserInfo userInfo = userQueryService.queryByAccountId(order.getUserId())
	//				.getQueryUserInfo();
	//			if (userInfo == null) {
	//				depositResult.setSuccess(false);
	//				depositResult.setCreditsysResultEnum(EsupplierResultEnum.HAVE_NOT_DATA);
	//				depositResult.setMessage("用户不存在");
	//				return depositResult;
	//			}
	//			OpenApiContext openApiContext = getOpenApiContext();
	//			WithdrawFlowOrder withdrawFlowOrder = new WithdrawFlowOrder();
	//			withdrawFlowOrder.setStatus(-1);
	//			withdrawFlowOrder.setOutBizNo(openApiContext.getOpenApiBizNo());
	//			withdrawFlowOrder.setOutUserId(userInfo.getUserId());
	//			setPayMode(order, userInfo);
	//			WithdrawResult withdrawResult = withdrawService.gotoBornWithdrawUrl(order,
	//				openApiContext);
	//			if (withdrawResult.isSuccess()) {
	//				withdrawFlowService.save(withdrawFlowOrder);
	//			}
	//			depositResult.setUrl(withdrawResult.getUrl());
	//		} catch (IllegalArgumentException e) {
	//			depositResult.setSuccess(false);
	//			depositResult.setCreditsysResultEnum(EsupplierResultEnum.INCOMPLETE_REQ_PARAM);
	//			depositResult.setMessage(e.getMessage());
	//		} catch (Exception e) {
	//			logger.error(e.getMessage(), e);
	//		}
	//		
	//		return depositResult;
	//	}
	//	
	//	protected void setPayMode(BornWithdrawOrder order, UserInfo userInfo) {
	//		String payMode = canFreeWithdraw(userInfo.getAccountId());
	//		if (StringUtil.isNotEmpty(payMode)) {
	//			order.setPayMode(payMode);
	//		}
	//		if (payMode == null || payMode.equals("U")) {
	//			if (StringUtil.isNotBlank(AppConstantsUtil.getWithdrawChargeMode())) {
	//				YjFPayModeEnum modeEnum = getDefaultWithdrawChargeMode(userInfo);
	//				if (modeEnum != null) {
	//					order.setPayMode(modeEnum.code());
	//				}
	//			}
	//		}
	//	}
	//	
	//	/**
	//	 * 系统指定的收费模式
	//	 * @param deductOrder
	//	 * @param userBaseInfo
	//	 */
	//	protected YjFPayModeEnum getDefaultWithdrawChargeMode(UserInfo userBaseInfo) {
	//		String chargeMode = AppConstantsUtil.getWithdrawChargeMode();
	//		return getChargeModeByUserRole(userBaseInfo, chargeMode);
	//		
	//	}
	//	
	//	public String canFreeWithdraw(String accountId) {
	//		if (StringUtil.isBlank(AppConstantsUtil.getMonthFreeWithdrawCount())) {
	//			return null;
	//		}
	//		RechargeFlowOrder rechargeFlowOrder = new RechargeFlowOrder();
	//		rechargeFlowOrder.setPayType(PayTypeEnum.WITHDRAW);
	//		rechargeFlowOrder.setAccountId(accountId);
	//		rechargeFlowOrder.setStartTime(DateUtil.getCurrentMonthStartTime());
	//		rechargeFlowOrder.setEndTime(DateUtil.getCurrentMonthEndTime());
	//		rechargeFlowOrder.setIsEffectiveData(BooleanEnum.YES);
	//		long totalCount = rechargeFlowService.getFlow(rechargeFlowOrder).getTotalCount();
	//		if (totalCount == 0) {
	//			return "P";
	//		}
	//		if (totalCount >= Long.valueOf(AppConstantsUtil.getMonthFreeWithdrawCount())) {
	//			return "U";
	//		} else {
	//			return "P";
	//		}
	//	}
	
	@Override
	protected EsupplierBaseResult createResult() {
		return new EsupplierBaseResult();
	}
}
