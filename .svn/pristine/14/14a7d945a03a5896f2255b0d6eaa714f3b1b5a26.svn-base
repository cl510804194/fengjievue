/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.PopModuleDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.PopModuleDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.PopModuleDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/pop_module.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisPopModuleDAO extends SqlMapClientDaoSupport implements PopModuleDAO {
	/**
	 *  Insert one <tt>PopModuleDO</tt> object to DB table <tt>pop_module</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into pop_module(module_id,module_name,module_code,sort_order,show_top,hits,vm_page,status,type,level,level_code,parent_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param popModule
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(PopModuleDO popModule) throws DataAccessException {
    	if (popModule == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-POP-MODULE-INSERT", popModule);

        return popModule.getModuleId();
    }

	/**
	 *  Update DB table <tt>pop_module</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update pop_module set module_name=?, module_code=?, sort_order=?, show_top=?, hits=?, vm_page=?, status=?, type=?, level=?, level_code=?, parent_id=? where (module_id = ?)</tt>
	 *
	 *	@param popModule
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(PopModuleDO popModule) throws DataAccessException {
    	if (popModule == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-POP-MODULE-UPDATE", popModule);
    }

	/**
	 *  Query DB table <tt>pop_module</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select module_id, module_name, module_code, sort_order, show_top, hits, vm_page, status, type, level, level_code, parent_id from pop_module where (module_id = ?)</tt>
	 *
	 *	@param moduleId
	 *	@return PopModuleDO
	 *	@throws DataAccessException
	 */	 
    public PopModuleDO findById(long moduleId) throws DataAccessException {
        Long param = new Long(moduleId);

        return (PopModuleDO) getSqlMapClientTemplate().queryForObject("MS-POP-MODULE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>pop_module</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select module_id, module_name, module_code, sort_order, show_top, hits, vm_page, status, type, level, level_code, parent_id from pop_module where (module_code = ?)</tt>
	 *
	 *	@param moduleCode
	 *	@return PopModuleDO
	 *	@throws DataAccessException
	 */	 
    public PopModuleDO findByCode(String moduleCode) throws DataAccessException {

        return (PopModuleDO) getSqlMapClientTemplate().queryForObject("MS-POP-MODULE-FIND-BY-CODE", moduleCode);

    }

	/**
	 *  Delete records from DB table <tt>pop_module</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from pop_module where (module_id = ?)</tt>
	 *
	 *	@param moduleId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long moduleId) throws DataAccessException {
        Long param = new Long(moduleId);

        return getSqlMapClientTemplate().delete("MS-POP-MODULE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>pop_module</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from pop_module</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException {

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-POP-MODULE-FIND-ALL-COUNT", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>pop_module</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select module_id, module_name, module_code, sort_order, show_top, hits, vm_page, status, type, level, level_code, parent_id from pop_module where (module_id = ?)</tt>
	 *
	 *	@param popModule
	 *	@param limitStart
	 *	@param pageSize
	 *	@param statusList
	 *	@return List<PopModuleDO>
	 *	@throws DataAccessException
	 */	 
    public List<PopModuleDO> findByCondition(PopModuleDO popModule, long limitStart, long pageSize, List statusList) throws DataAccessException {
    	if (popModule == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("popModule", popModule);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("statusList", statusList);

        return getSqlMapClientTemplate().queryForList("MS-POP-MODULE-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>pop_module</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select module_id, module_name, module_code, sort_order, show_top, hits, vm_page, status, type, level, level_code, parent_id from pop_module where (module_id = ?)</tt>
	 *
	 *	@param popModule
	 *	@param statusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(PopModuleDO popModule, List statusList) throws DataAccessException {
    	if (popModule == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("popModule", popModule);
        param.put("statusList", statusList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-POP-MODULE-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}