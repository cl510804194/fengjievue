/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.LotteryRecordDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.LotteryRecordDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.LotteryRecordDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/lottery_record.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisLotteryRecordDAO extends SqlMapClientDaoSupport implements LotteryRecordDAO {
	/**
	 *  Insert one <tt>LotteryRecordDO</tt> object to DB table <tt>lottery_record</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into lottery_record(record_id,activity_id,instance_id,out_biz_no,user_id,user_name,real_name,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param lotteryRecord
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(LotteryRecordDO lotteryRecord) throws DataAccessException {
    	if (lotteryRecord == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-LOTTERY-RECORD-INSERT", lotteryRecord);

        return lotteryRecord.getRecordId();
    }

	/**
	 *  Update DB table <tt>lottery_record</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update lottery_record set activity_id=?, instance_id=?, out_biz_no=?, user_id=?, user_name=?, real_name=? where (record_id = ?)</tt>
	 *
	 *	@param lotteryRecord
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(LotteryRecordDO lotteryRecord) throws DataAccessException {
    	if (lotteryRecord == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-LOTTERY-RECORD-UPDATE", lotteryRecord);
    }

	/**
	 *  Query DB table <tt>lottery_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select record_id, activity_id, instance_id, out_biz_no, user_id, user_name, real_name, raw_add_time, raw_update_time from lottery_record where (record_id = ?)</tt>
	 *
	 *	@param recordId
	 *	@return LotteryRecordDO
	 *	@throws DataAccessException
	 */	 
    public LotteryRecordDO findById(long recordId) throws DataAccessException {
        Long param = new Long(recordId);

        return (LotteryRecordDO) getSqlMapClientTemplate().queryForObject("MS-LOTTERY-RECORD-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>lottery_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select record_id, activity_id, instance_id, out_biz_no, user_id, user_name, real_name, raw_add_time, raw_update_time from lottery_record where ((user_id = ?) AND (instance_id = ?))</tt>
	 *
	 *	@param userId
	 *	@param instanceId
	 *	@return List<LotteryRecordDO>
	 *	@throws DataAccessException
	 */	 
    public List<LotteryRecordDO> findByUserId(long userId, long instanceId) throws DataAccessException {
        Map param = new HashMap();

        param.put("userId", new Long(userId));
        param.put("instanceId", new Long(instanceId));

        return getSqlMapClientTemplate().queryForList("MS-LOTTERY-RECORD-FIND-BY-USER-ID", param);

    }

	/**
	 *  Query DB table <tt>lottery_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select record_id, activity_id, instance_id, out_biz_no, user_id, user_name, real_name, raw_add_time, raw_update_time from lottery_record where (user_name = ?)</tt>
	 *
	 *	@param userName
	 *	@return List<LotteryRecordDO>
	 *	@throws DataAccessException
	 */	 
    public List<LotteryRecordDO> findByUserName(String userName) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-LOTTERY-RECORD-FIND-BY-USER-NAME", userName);

    }

	/**
	 *  Delete records from DB table <tt>lottery_record</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from lottery_record where (record_id = ?)</tt>
	 *
	 *	@param recordId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long recordId) throws DataAccessException {
        Long param = new Long(recordId);

        return getSqlMapClientTemplate().delete("MS-LOTTERY-RECORD-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>lottery_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select record_id, activity_id, instance_id, out_biz_no, user_id, user_name, real_name, raw_add_time, raw_update_time from lottery_record</tt>
	 *
	 *	@param lotteryRecord
	 *	@param limitStart
	 *	@param pageSize
	 *	@param beginCreateDate
	 *	@param endCreateDate
	 *	@return List<LotteryRecordDO>
	 *	@throws DataAccessException
	 */	 
    public List<LotteryRecordDO> findByCondition(LotteryRecordDO lotteryRecord, long limitStart, long pageSize, Date beginCreateDate, Date endCreateDate) throws DataAccessException {
    	if (lotteryRecord == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("lotteryRecord", lotteryRecord);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("beginCreateDate", beginCreateDate);
        param.put("endCreateDate", endCreateDate);

        return getSqlMapClientTemplate().queryForList("MS-LOTTERY-RECORD-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>lottery_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from lottery_record where (1 = 1)</tt>
	 *
	 *	@param lotteryRecord
	 *	@param beginCreateDate
	 *	@param endCreateDate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(LotteryRecordDO lotteryRecord, Date beginCreateDate, Date endCreateDate) throws DataAccessException {
    	if (lotteryRecord == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("lotteryRecord", lotteryRecord);
        param.put("beginCreateDate", beginCreateDate);
        param.put("endCreateDate", endCreateDate);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-LOTTERY-RECORD-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>lottery_record</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select record_id, activity_id, instance_id, out_biz_no, user_id, user_name, real_name, raw_add_time, raw_update_time from lottery_record where (activity_id = ?)</tt>
	 *
	 *	@param activityId
	 *	@return List<LotteryRecordDO>
	 *	@throws DataAccessException
	 */	 
    public List<LotteryRecordDO> findByActivityIdAutotest(long activityId) throws DataAccessException {
        Long param = new Long(activityId);

        return getSqlMapClientTemplate().queryForList("MS-LOTTERY-RECORD-FIND-BY-ACTIVITY-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>lottery_record</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from lottery_record where (activity_id = ?)</tt>
	 *
	 *	@param activityId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByActivityIdAutotest(long activityId) throws DataAccessException {
        Long param = new Long(activityId);

        return getSqlMapClientTemplate().delete("MS-LOTTERY-RECORD-DELETE-BY-ACTIVITY-ID-AUTOTEST", param);
    }

}