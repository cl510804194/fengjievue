/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.AmountFlowTradeDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.AmountFlowTradeDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.AmountFlowTradeDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/amount_flow_trade.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisAmountFlowTradeDAO extends SqlMapClientDaoSupport implements AmountFlowTradeDAO {
	/**
	 *  Insert one <tt>AmountFlowTradeDO</tt> object to DB table <tt>amount_flow_trade</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into amount_flow_trade(base_id,trade_id,amount_flow_id,trade_detail_id) values (?, ?, ?, ?)</tt>
	 *
	 *	@param amountFlowTrade
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(AmountFlowTradeDO amountFlowTrade) throws DataAccessException {
    	if (amountFlowTrade == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-AMOUNT-FLOW-TRADE-INSERT", amountFlowTrade);

        return amountFlowTrade.getBaseId();
    }

	/**
	 *  Update DB table <tt>amount_flow_trade</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update amount_flow_trade set trade_id=?, amount_flow_id=?, trade_detail_id=? where (base_id = ?)</tt>
	 *
	 *	@param amountFlowTrade
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(AmountFlowTradeDO amountFlowTrade) throws DataAccessException {
    	if (amountFlowTrade == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-AMOUNT-FLOW-TRADE-UPDATE", amountFlowTrade);
    }

	/**
	 *  Query DB table <tt>amount_flow_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select base_id, trade_id, amount_flow_id, trade_detail_id from amount_flow_trade where (base_id = ?)</tt>
	 *
	 *	@param baseId
	 *	@return AmountFlowTradeDO
	 *	@throws DataAccessException
	 */	 
    public AmountFlowTradeDO findById(long baseId) throws DataAccessException {
        Long param = new Long(baseId);

        return (AmountFlowTradeDO) getSqlMapClientTemplate().queryForObject("MS-AMOUNT-FLOW-TRADE-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>amount_flow_trade</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from amount_flow_trade where (base_id = ?)</tt>
	 *
	 *	@param baseId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long baseId) throws DataAccessException {
        Long param = new Long(baseId);

        return getSqlMapClientTemplate().delete("MS-AMOUNT-FLOW-TRADE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>amount_flow_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from amount_flow_trade</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException {

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-AMOUNT-FLOW-TRADE-FIND-ALL-COUNT", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>amount_flow_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select base_id, trade_id, amount_flow_id, trade_detail_id from amount_flow_trade where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return List<AmountFlowTradeDO>
	 *	@throws DataAccessException
	 */	 
    public List<AmountFlowTradeDO> findByTradeIdAutotest(long tradeId) throws DataAccessException {
        Long param = new Long(tradeId);

        return getSqlMapClientTemplate().queryForList("MS-AMOUNT-FLOW-TRADE-FIND-BY-TRADE-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>amount_flow_trade</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from amount_flow_trade where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByTradeIdAutotest(long tradeId) throws DataAccessException {
        Long param = new Long(tradeId);

        return getSqlMapClientTemplate().delete("MS-AMOUNT-FLOW-TRADE-DELETE-BY-TRADE-ID-AUTOTEST", param);
    }

}