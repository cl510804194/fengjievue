/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.TblTradeReviewDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;

/**
 * A dao interface provides methods to access database table <tt>tbl_trade_review</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/tbl_trade_review.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface TblTradeReviewDAO {
	/**
	 *  Insert one <tt>TblTradeReviewDO</tt> object to DB table <tt>tbl_trade_review</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into tbl_trade_review(review_id,type,supplier_id,supplier_name,product_id,buyer_id,product,delivery,communication,remark,buyer_name,buyer_ip,order_id,review_time,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tblTradeReview
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(TblTradeReviewDO tblTradeReview) throws DataAccessException;

	/**
	 *  Update DB table <tt>tbl_trade_review</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_trade_review set type=?, supplier_id=?, product_id=?, buyer_id=?, supplier_name=?, product=?, delivery=?, communication=?, remark=?, buyer_name=?, buyer_ip=?, order_id=?, review_time=? where (review_id = ?)</tt>
	 *
	 *	@param tblTradeReview
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TblTradeReviewDO tblTradeReview) throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_trade_review</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select review_id, type, supplier_id, supplier_name, product_id, buyer_id, product, delivery, communication, remark, buyer_name, buyer_ip, order_id, review_time, raw_add_time, raw_update_time from tbl_trade_review where (review_id = ?)</tt>
	 *
	 *	@param reviewId
	 *	@return TblTradeReviewDO
	 *	@throws DataAccessException
	 */	 
    public TblTradeReviewDO findById(long reviewId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>tbl_trade_review</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_trade_review where (review_id = ?)</tt>
	 *
	 *	@param reviewId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long reviewId) throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_trade_review</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_trade_review</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_trade_review</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select review_id, type, supplier_id, supplier_name, product_id, buyer_id, product, delivery, communication, remark, buyer_name, buyer_ip, order_id, review_time, raw_add_time, raw_update_time from tbl_trade_review where (1 = 1)</tt>
	 *
	 *	@param tblTradeReview
	 *	@param limitStart
	 *	@param pageSize
	 *	@param beginDate
	 *	@param endDate
	 *	@return List<TblTradeReviewDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblTradeReviewDO> findTradeReviewByCondition(TblTradeReviewDO tblTradeReview, long limitStart, long pageSize, Date beginDate, Date endDate) throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_trade_review</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_trade_review where (1 = 1)</tt>
	 *
	 *	@param tblTradeReview
	 *	@param beginDate
	 *	@param endDate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findTradeReviewByConditionCount(TblTradeReviewDO tblTradeReview, Date beginDate, Date endDate) throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_trade_review</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_trade_review where (order_id = ?)</tt>
	 *
	 *	@param orderId
	 *	@return TblTradeReviewDO
	 *	@throws DataAccessException
	 */	 
    public TblTradeReviewDO findByOrderIdAutotest(long orderId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>tbl_trade_review</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_trade_review where (order_id = ?)</tt>
	 *
	 *	@param orderId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByOrderIdAutotest(long orderId) throws DataAccessException;

}