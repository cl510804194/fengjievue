/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.LoanApplyDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.LoanApplyDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.LoanApplyDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/loan_apply.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisLoanApplyDAO extends SqlMapClientDaoSupport implements LoanApplyDAO {
	/**
	 *  Insert one <tt>LoanApplyDO</tt> object to DB table <tt>loan_apply</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into loan_apply(apply_id,loaner_id,loaner_name,loan_name,loan_amount,time_limit,loaner_phone,loaner_address,loaner_identity,apply_time,status,user_name,loan_purpose,guarantee_id,guarantee_name) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param loanApply
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(LoanApplyDO loanApply) throws DataAccessException {
    	if (loanApply == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-LOAN-APPLY-INSERT", loanApply);

        return loanApply.getApplyId();
    }

	/**
	 *  Update DB table <tt>loan_apply</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update loan_apply set apply_id=?, loaner_id=?, loaner_name=?, loan_name=?, loan_amount=?, time_limit=?, loaner_phone=?, loaner_address=?, loaner_identity=?, apply_time=?, status=?, user_name=?, loan_purpose=?, guarantee_id=?, guarantee_name=? where (apply_id = ?)</tt>
	 *
	 *	@param loanApply
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(LoanApplyDO loanApply) throws DataAccessException {
    	if (loanApply == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-LOAN-APPLY-UPDATE", loanApply);
    }

	/**
	 *  Query DB table <tt>loan_apply</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select apply_id, loaner_id, loaner_name, loan_name, loan_amount, time_limit, loaner_phone, loaner_address, loaner_identity, apply_time, status, user_name, loan_purpose, guarantee_id, guarantee_name from loan_apply where (apply_id = ?)</tt>
	 *
	 *	@param applyId
	 *	@return LoanApplyDO
	 *	@throws DataAccessException
	 */	 
    public LoanApplyDO findById(long applyId) throws DataAccessException {
        Long param = new Long(applyId);

        return (LoanApplyDO) getSqlMapClientTemplate().queryForObject("MS-LOAN-APPLY-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>loan_apply</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from loan_apply where (apply_id = ?)</tt>
	 *
	 *	@param applyId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long applyId) throws DataAccessException {
        Long param = new Long(applyId);

        return getSqlMapClientTemplate().delete("MS-LOAN-APPLY-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>loan_apply</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select apply_id, loaner_id, loaner_name, loan_name, loan_amount, time_limit, loaner_phone, loaner_address, loaner_identity, apply_time, status, user_name, loan_purpose, guarantee_id, guarantee_name from loan_apply where (apply_id = ?)</tt>
	 *
	 *	@param loanApply
	 *	@param limitStart
	 *	@param pageSize
	 *	@param statusList
	 *	@return List<LoanApplyDO>
	 *	@throws DataAccessException
	 */	 
    public List<LoanApplyDO> findByCondition(LoanApplyDO loanApply, long limitStart, long pageSize, List statusList) throws DataAccessException {
    	if (loanApply == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("loanApply", loanApply);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("statusList", statusList);

        return getSqlMapClientTemplate().queryForList("MS-LOAN-APPLY-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>loan_apply</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from loan_apply where (apply_id = ?)</tt>
	 *
	 *	@param loanApply
	 *	@param statusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findCountByCondition(LoanApplyDO loanApply, List statusList) throws DataAccessException {
    	if (loanApply == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("loanApply", loanApply);
        param.put("statusList", statusList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-LOAN-APPLY-FIND-COUNT-BY-CONDITION", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}