/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.UserPointsDetailDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.UserPointsDetailDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.UserPointsDetailDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/user_points_detail.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisUserPointsDetailDAO extends SqlMapClientDaoSupport implements UserPointsDetailDAO {
	/**
	 *  Insert one <tt>UserPointsDetailDO</tt> object to DB table <tt>user_points_detail</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into user_points_detail(points_detail_id,user_id,value_type,points_type,state,goods,point_value,point_balance,consumer_point_value,source,points_rule_id,content,def1,def2,def3,out_biz_no,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param userPointsDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(UserPointsDetailDO userPointsDetail) throws DataAccessException {
    	if (userPointsDetail == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-USER-POINTS-DETAIL-INSERT", userPointsDetail);

        return userPointsDetail.getPointsDetailId();
    }

	/**
	 *  Update DB table <tt>user_points_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_points_detail set user_id=?, value_type=?, points_type=?, state=?, goods=?, point_value=?, point_balance=?, consumer_point_value=?, source=?, points_rule_id=?, content=?, def1=?, def2=?, def3=?, out_biz_no=? where (points_detail_id = ?)</tt>
	 *
	 *	@param userPointsDetail
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(UserPointsDetailDO userPointsDetail) throws DataAccessException {
    	if (userPointsDetail == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-USER-POINTS-DETAIL-UPDATE", userPointsDetail);
    }

	/**
	 *  Query DB table <tt>user_points_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_points_detail where (points_detail_id = ?)</tt>
	 *
	 *	@param pointsDetailId
	 *	@return UserPointsDetailDO
	 *	@throws DataAccessException
	 */	 
    public UserPointsDetailDO findById(long pointsDetailId) throws DataAccessException {
        Long param = new Long(pointsDetailId);

        return (UserPointsDetailDO) getSqlMapClientTemplate().queryForObject("MS-USER-POINTS-DETAIL-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>user_points_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_points_detail where (user_id = ?) order by raw_add_time DESC</tt>
	 *
	 *	@param userId
	 *	@return List<UserPointsDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserPointsDetailDO> findByUserId(long userId) throws DataAccessException {
        Long param = new Long(userId);

        return getSqlMapClientTemplate().queryForList("MS-USER-POINTS-DETAIL-FIND-BY-USER-ID", param);

    }

	/**
	 *  Update DB table <tt>user_points_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_points_detail set state=? where ((value_type = 'POINT') AND (user_id = ?) AND (points_rule_id = ?) AND (raw_add_time < ?))</tt>
	 *
	 *	@param state
	 *	@param userId
	 *	@param pointsRuleId
	 *	@param rawAddTime
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int expirePointsByUserId(String state, long userId, long pointsRuleId, Date rawAddTime) throws DataAccessException {
        Map param = new HashMap();

        param.put("state", state);
        param.put("userId", new Long(userId));
        param.put("pointsRuleId", new Long(pointsRuleId));
        param.put("rawAddTime", rawAddTime);

        return getSqlMapClientTemplate().update("MS-USER-POINTS-DETAIL-EXPIRE-POINTS-BY-USER-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>user_points_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_points_detail where (points_detail_id = ?)</tt>
	 *
	 *	@param pointsDetailId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long pointsDetailId) throws DataAccessException {
        Long param = new Long(pointsDetailId);

        return getSqlMapClientTemplate().delete("MS-USER-POINTS-DETAIL-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>user_points_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_points_detail where (1 = 1)</tt>
	 *
	 *	@param userPointsDetail
	 *	@param limitStart
	 *	@param pageSize
	 *	@param startAddTime
	 *	@param endAddTime
	 *	@param addTimeAsc
	 *	@return List<UserPointsDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserPointsDetailDO> queryList(UserPointsDetailDO userPointsDetail, long limitStart, long pageSize, Date startAddTime, Date endAddTime, String addTimeAsc) throws DataAccessException {
    	if (userPointsDetail == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("userPointsDetail", userPointsDetail);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("startAddTime", startAddTime);
        param.put("endAddTime", endAddTime);
        param.put("addTimeAsc", addTimeAsc);

        return getSqlMapClientTemplate().queryForList("MS-USER-POINTS-DETAIL-QUERY-LIST", param);

    }

	/**
	 *  Query DB table <tt>user_points_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) totalCount, sum (point_value - consumer_point_value) effectivePoint, sum(point_value) totalPoint from user_points_detail where (1 = 1)</tt>
	 *
	 *	@param userPointsDetail
	 *	@param startAddTime
	 *	@param endAddTime
	 *	@return HashMap
	 *	@throws DataAccessException
	 */	 
    public HashMap queryCount(UserPointsDetailDO userPointsDetail, Date startAddTime, Date endAddTime) throws DataAccessException {
    	if (userPointsDetail == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("userPointsDetail", userPointsDetail);
        param.put("startAddTime", startAddTime);
        param.put("endAddTime", endAddTime);

        return (HashMap) getSqlMapClientTemplate().queryForObject("MS-USER-POINTS-DETAIL-QUERY-COUNT", param);

    }

	/**
	 *  Query DB table <tt>user_points_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from user_points_detail</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-USER-POINTS-DETAIL-FIND-ALL-COUNT", null);

    }

	/**
	 *  Query DB table <tt>user_points_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select sum (point_value - consumer_point_value) point_value from user_points_detail</tt>
	 *
	 *	@param userPointsDetail
	 *	@param pointTypes
	 *	@param startAddTime
	 *	@param endAddTime
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findStatistic(UserPointsDetailDO userPointsDetail, List pointTypes, Date startAddTime, Date endAddTime) throws DataAccessException {
    	if (userPointsDetail == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("userPointsDetail", userPointsDetail);
        param.put("pointTypes", pointTypes);
        param.put("startAddTime", startAddTime);
        param.put("endAddTime", endAddTime);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-USER-POINTS-DETAIL-FIND-STATISTIC", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Insert one <tt>UserPointsDetailDO</tt> object to DB table <tt>user_points_detail</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into user_points_detail(points_detail_id,user_id,value_type,points_type,state,goods,point_value,point_balance,source,points_rule_id,content,def1,def2,def3,out_biz_no,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param userPointsDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(UserPointsDetailDO userPointsDetail) throws DataAccessException {
    	if (userPointsDetail == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-USER-POINTS-DETAIL-INSERT-AUTOTEST", userPointsDetail);

        return userPointsDetail.getPointsDetailId();
    }

	/**
	 *  Query DB table <tt>user_points_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_points_detail where (user_id = ?) order by raw_add_time DESC</tt>
	 *
	 *	@param userId
	 *	@return List<UserPointsDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserPointsDetailDO> findByUserIdAutotest(long userId) throws DataAccessException {
        Long param = new Long(userId);

        return getSqlMapClientTemplate().queryForList("MS-USER-POINTS-DETAIL-FIND-BY-USER-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>user_points_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_points_detail where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserIdAutotest(long userId) throws DataAccessException {
        Long param = new Long(userId);

        return getSqlMapClientTemplate().delete("MS-USER-POINTS-DETAIL-DELETE-BY-USER-ID-AUTOTEST", param);
    }

}