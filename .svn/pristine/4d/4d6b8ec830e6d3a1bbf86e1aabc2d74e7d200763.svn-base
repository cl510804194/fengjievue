/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.PointsRuleDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.PointsRuleDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.PointsRuleDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/points_rule.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisPointsRuleDAO extends SqlMapClientDaoSupport implements PointsRuleDAO {
	/**
	 *  Insert one <tt>PointsRuleDO</tt> object to DB table <tt>points_rule</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into points_rule(points_rule_id,rule_name,start_time,end_time,rule_type,value_type,state,point_value,points_valid,validity_type,def1,def2,def3,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param pointsRule
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(PointsRuleDO pointsRule) throws DataAccessException {
    	if (pointsRule == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-POINTS-RULE-INSERT", pointsRule);

        return pointsRule.getPointsRuleId();
    }

	/**
	 *  Update DB table <tt>points_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update points_rule set rule_name=?, start_time=?, end_time=?, rule_type=?, value_type=?, state=?, point_value=?, points_valid=?, validity_type=?, def1=?, def2=?, def3=? where (points_rule_id = ?)</tt>
	 *
	 *	@param pointsRule
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(PointsRuleDO pointsRule) throws DataAccessException {
    	if (pointsRule == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-POINTS-RULE-UPDATE", pointsRule);
    }

	/**
	 *  Query DB table <tt>points_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from points_rule where (points_rule_id = ?)</tt>
	 *
	 *	@param pointsRuleId
	 *	@return PointsRuleDO
	 *	@throws DataAccessException
	 */	 
    public PointsRuleDO findById(long pointsRuleId) throws DataAccessException {
        Long param = new Long(pointsRuleId);

        return (PointsRuleDO) getSqlMapClientTemplate().queryForObject("MS-POINTS-RULE-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>points_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from points_rule where (points_rule_id = ?)</tt>
	 *
	 *	@param pointsRuleId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long pointsRuleId) throws DataAccessException {
        Long param = new Long(pointsRuleId);

        return getSqlMapClientTemplate().delete("MS-POINTS-RULE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>points_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from points_rule where (1 = 1)</tt>
	 *
	 *	@param pointsRule
	 *	@param limitStart
	 *	@param pageSize
	 *	@param expireDate
	 *	@return List<PointsRuleDO>
	 *	@throws DataAccessException
	 */	 
    public List<PointsRuleDO> queryList(PointsRuleDO pointsRule, long limitStart, long pageSize, Date expireDate) throws DataAccessException {
    	if (pointsRule == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("pointsRule", pointsRule);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("expireDate", expireDate);

        return getSqlMapClientTemplate().queryForList("MS-POINTS-RULE-QUERY-LIST", param);

    }

	/**
	 *  Query DB table <tt>points_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from points_rule where (1 = 1)</tt>
	 *
	 *	@param pointsRule
	 *	@param expireDate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long queryCount(PointsRuleDO pointsRule, Date expireDate) throws DataAccessException {
    	if (pointsRule == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("pointsRule", pointsRule);
        param.put("expireDate", expireDate);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-POINTS-RULE-QUERY-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>points_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from points_rule</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-POINTS-RULE-FIND-ALL-COUNT", null);

    }

	/**
	 *  Insert one <tt>PointsRuleDO</tt> object to DB table <tt>points_rule</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into points_rule(points_rule_id,rule_name,start_time,end_time,rule_type,value_type,state,point_value,def1,def2,def3,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param pointsRule
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(PointsRuleDO pointsRule) throws DataAccessException {
    	if (pointsRule == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-POINTS-RULE-INSERT-AUTOTEST", pointsRule);

        return pointsRule.getPointsRuleId();
    }

	/**
	 *  Query DB table <tt>points_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from points_rule where ((rule_type = ?) AND (state = "wait"))</tt>
	 *
	 *	@param ruleType
	 *	@return PointsRuleDO
	 *	@throws DataAccessException
	 */	 
    public PointsRuleDO findByRuleTypeWaitAutotest(String ruleType) throws DataAccessException {

        return (PointsRuleDO) getSqlMapClientTemplate().queryForObject("MS-POINTS-RULE-FIND-BY-RULE-TYPE-WAIT-AUTOTEST", ruleType);

    }

	/**
	 *  Query DB table <tt>points_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from points_rule where (points_rule_id = ?)</tt>
	 *
	 *	@param pointsRuleId
	 *	@return PointsRuleDO
	 *	@throws DataAccessException
	 */	 
    public PointsRuleDO findByIdAutotest(long pointsRuleId) throws DataAccessException {
        Long param = new Long(pointsRuleId);

        return (PointsRuleDO) getSqlMapClientTemplate().queryForObject("MS-POINTS-RULE-FIND-BY-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>points_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from points_rule where (rule_type = ?)</tt>
	 *
	 *	@param ruleType
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByRuleTypeAutotest(String ruleType) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-POINTS-RULE-DELETE-BY-RULE-TYPE-AUTOTEST", ruleType);
    }

}