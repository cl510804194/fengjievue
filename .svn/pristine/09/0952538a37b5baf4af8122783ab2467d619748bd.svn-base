/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.TblDrawerAddressDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.TblDrawerAddressDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.TblDrawerAddressDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/tbl_drawer_address.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisTblDrawerAddressDAO extends SqlMapClientDaoSupport implements TblDrawerAddressDAO {
	/**
	 *  Insert one <tt>TblDrawerAddressDO</tt> object to DB table <tt>tbl_drawer_address</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into tbl_drawer_address(id,user_id,city,province,area_code,detail_address,drawer_name,drawer_number,zip_code,mobile_number,is_default,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tblDrawerAddress
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(TblDrawerAddressDO tblDrawerAddress) throws DataAccessException {
    	if (tblDrawerAddress == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TBL-DRAWER-ADDRESS-INSERT", tblDrawerAddress);

        return tblDrawerAddress.getId();
    }

	/**
	 *  Update DB table <tt>tbl_drawer_address</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_drawer_address set user_id=?, city=?, province=?, area_code=?, detail_address=?, drawer_name=?, drawer_number=?, zip_code=?, mobile_number=?, is_default=? where (id = ?)</tt>
	 *
	 *	@param tblDrawerAddress
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TblDrawerAddressDO tblDrawerAddress) throws DataAccessException {
    	if (tblDrawerAddress == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-TBL-DRAWER-ADDRESS-UPDATE", tblDrawerAddress);
    }

	/**
	 *  Query DB table <tt>tbl_drawer_address</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, city, province, area_code, detail_address, drawer_name, drawer_number, zip_code, mobile_number, is_default, raw_add_time, raw_update_time from tbl_drawer_address where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return TblDrawerAddressDO
	 *	@throws DataAccessException
	 */	 
    public TblDrawerAddressDO findById(String id) throws DataAccessException {

        return (TblDrawerAddressDO) getSqlMapClientTemplate().queryForObject("MS-TBL-DRAWER-ADDRESS-FIND-BY-ID", id);

    }

	/**
	 *  Query DB table <tt>tbl_drawer_address</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, city, province, area_code, detail_address, drawer_name, drawer_number, zip_code, mobile_number, is_default, raw_add_time, raw_update_time from tbl_drawer_address where ((id = ?) AND (user_id = ?))</tt>
	 *
	 *	@param id
	 *	@param userId
	 *	@return TblDrawerAddressDO
	 *	@throws DataAccessException
	 */	 
    public TblDrawerAddressDO findByUserIdAndId(String id, long userId) throws DataAccessException {
        Map param = new HashMap();

        param.put("id", id);
        param.put("userId", new Long(userId));

        return (TblDrawerAddressDO) getSqlMapClientTemplate().queryForObject("MS-TBL-DRAWER-ADDRESS-FIND-BY-USER-ID-AND-ID", param);

    }

	/**
	 *  Query DB table <tt>tbl_drawer_address</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, city, province, area_code, detail_address, drawer_name, drawer_number, zip_code, mobile_number, is_default, raw_add_time, raw_update_time from tbl_drawer_address where (user_id = ?) order by raw_update_time DESC, raw_add_time ASC</tt>
	 *
	 *	@param userId
	 *	@return List<TblDrawerAddressDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblDrawerAddressDO> findByUserId(long userId) throws DataAccessException {
        Long param = new Long(userId);

        return getSqlMapClientTemplate().queryForList("MS-TBL-DRAWER-ADDRESS-FIND-BY-USER-ID", param);

    }

	/**
	 *  Query DB table <tt>tbl_drawer_address</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, city, province, area_code, detail_address, drawer_name, drawer_number, zip_code, mobile_number, is_default, raw_add_time, raw_update_time from tbl_drawer_address where ((user_id = ?) AND (is_default = ?)) order by raw_update_time DESC, raw_add_time ASC</tt>
	 *
	 *	@param userId
	 *	@param isDefault
	 *	@return List<TblDrawerAddressDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblDrawerAddressDO> findByUserIdAndDefault(long userId, String isDefault) throws DataAccessException {
        Map param = new HashMap();

        param.put("userId", new Long(userId));
        param.put("isDefault", isDefault);

        return getSqlMapClientTemplate().queryForList("MS-TBL-DRAWER-ADDRESS-FIND-BY-USER-ID-AND-DEFAULT", param);

    }

	/**
	 *  Delete records from DB table <tt>tbl_drawer_address</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_drawer_address where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(String id) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-TBL-DRAWER-ADDRESS-DELETE-BY-ID", id);
    }

	/**
	 *  Delete records from DB table <tt>tbl_drawer_address</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_drawer_address where ((id = ?) AND (user_id = ?))</tt>
	 *
	 *	@param id
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByIdAndUserId(String id, long userId) throws DataAccessException {
        Map param = new HashMap();

        param.put("id", id);
        param.put("userId", new Long(userId));

        return getSqlMapClientTemplate().delete("MS-TBL-DRAWER-ADDRESS-DELETE-BY-ID-AND-USER-ID", param);
    }

	/**
	 *  Query DB table <tt>tbl_drawer_address</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_drawer_address</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TBL-DRAWER-ADDRESS-FIND-ALL-COUNT", null);

    }

}