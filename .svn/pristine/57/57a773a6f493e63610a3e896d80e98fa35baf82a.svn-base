package yrd.app;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.alibaba.fastjson.JSONObject;
import com.autotest.annotation.AutoTestCase;
import com.autotest.runner.AutoTestJUnit4ClassRunner;
import com.yjf.common.lang.util.money.Money;
import com.yjf.common.lang.util.money.MoneyUtil;
import com.yjf.esupplier.common.util.MD5Util;
import com.yjf.esupplier.dal.dataobject.TblProductDO;
import com.yjf.esupplier.dal.dataobject.UserBaseInfoDO;
import com.yjf.esupplier.dal.dataobject.UserLoginLogDO;
import com.yjf.esupplier.web.util.AESUtil;
import com.yjf.esupplier.ws.product.enums.ProductStatusEnum;
import com.yjf.esupplier.ws.product.enums.ShopingCartTypeEnum;

import testbase.ServiceAutoTestBase;
@RunWith(AutoTestJUnit4ClassRunner.class)
public class AppConfirmOrderTest extends ServiceAutoTestBase {

	/*
	 * 测试方向：
	 * 1001 未登录
	 * 1002 商品id为空
	 * 1003 商品信息不存在
	 * 1004 添加购物车失败，库存不足
	 * 1005 选购商品已经下架
	 * 1006 成功
	 */
	@Test
	@AutoTestCase(file = "yrd/app/appConfirmOrderTestSuccess.csv", 
			description = "订单待确认(购物车）,成功用例")
	public void appConfirmOrderTestSuccess(int testId,
										 String userName,
										 String mobile,
										 String logPassword,
										 String productIds,
										 String counts,
										 long productId,
										 long supplierId,
										 String productName,
										 String productNumber,
										 String productStatus,
										 String productUnit,
										 long reservedCount,
										 long saleCount,
										 long viewCount,
										 String postType,
										 String userBaseId1,
										 String userName1,
										 String realName,
										 String logPassword1,
										 String payPassword,
										 String type,
										 String state,
										 String realNameAuthentication,
										 int pwdErrorCount,
										 String accountId,
										 String linkCode,
										 String mobile1,
										 String nickname,
										 long belongTo,
										 long stockAmount,
										 String unit,
										 long payedCount,
										 long saleingCount,
										 long saleingAllCount,
										 long saleCompletionCount,
										 long alarmAmountu,
										 long alarmAmountd,
										 String status,
										 long modifyMan,
										 String id,
										 String city,
										 String province,
										 String areaCode,
										 String detailAddress,
										 String drawerName,
										 String drawerNumber,
										 String zipCode,
										 String mobileNumber,
										 long deliverId,
										 Money post,
										 Money express,
										 Money ems,
										 String postArea,
										 long resortsBusinessId){
		long userId=0;
		String userBaseId="";
		productId=Long.valueOf(productIds);
		TblProductDO tblProductDOex=null;
		//清除数据
		clearnPointsRuleByRuleType("REGISTER");
		clearnPointsRuleByRuleType("LOGIN");
		UserBaseInfoDO userBaseInfoDO=findUserBaseInfoByUserName(userName);
		if (userBaseInfoDO!=null) {
			userId=userBaseInfoDO.getUserId();
			userBaseId=userBaseInfoDO.getUserBaseId();
		}
		clearnUserRoleByUserId(userId);
		clearnUserByUserName(userName);
		clearnPersonaInfoByUserBaseId(userBaseId);
		clearnUserBaseInfoByUserName(userName);
		clearnUserAccountDataByUserId(userId);
		clearnUserExtendByUserId(userId);
		clearnUserLogin(userName);
		
		clearnTblProductByProductId(productId);
		clearnUserBaseInfoByUserName(userName1);
		clearnTblStorageByProductId(productId);
		clearnTblDrawerAddressById(id);
		clearnTblDeliverById(deliverId);
		// 准备数据
		logger.info("更新系统参数");
		updateSysParamInfoDOByParamName("SYS_PARAM_HUA_HONG_IS_USE","Y");
		sysParameterService.clearCache();
		
		if (testId==1004||testId==1005||testId==1006) {
			if (testId==1004) {
				counts=String.valueOf((stockAmount-payedCount)+1);//库存不足
			}else if (testId==1005) {
				productStatus=ProductStatusEnum.OFF.code();
			}
			insertTblProductIncomplete(productId,supplierId,productName,productNumber,productStatus,productUnit,
					reservedCount,saleCount,viewCount,postType);
			tblProductDOex=findTblProductByProductId(productId);
			tblProductDOex.setPrice1(new Money(10));
			tblProductDOex.setResortsBusinessId(resortsBusinessId);
			tblProductDAO.update(tblProductDOex);
			insertUserBaseInfo(userBaseId1,supplierId,userName1,realName,logPassword1,payPassword,type,state,realNameAuthentication,
					pwdErrorCount,accountId,linkCode,mobile1,nickname,belongTo);
			insertTblStorageAll(productId, stockAmount, unit, payedCount, saleingCount, saleingAllCount, saleCompletionCount,
					alarmAmountu, alarmAmountd, status, new Date(), modifyMan, new Date());
		}
		
		// 测试过程
		HttpClient httpclient = new DefaultHttpClient();
		HttpResponse response =null;
		String conResult =null;
		JSONObject jobj =null;
		try {
			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
			nameValuePairs.add(new BasicNameValuePair("msg", getStringFromJson(new JSONObject())));
			HttpEntity httpEntity=new UrlEncodedFormEntity(nameValuePairs, "UTF-8");

			if (testId!=1001) {
				//获取图片验证码
				String getImgCodeUrl="http://127.0.0.1:8085/app/getImgCode.htm";
				HttpPost getImgCodeHP = new HttpPost(getImgCodeUrl);
				getImgCodeHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				getImgCodeHP.setEntity(httpEntity);
				response = httpclient.execute(getImgCodeHP);
				getImgCodeHP.releaseConnection();
				
				
				//发送短信验证码(register注册)
				String sendSmsCodeUrl="http://127.0.0.1:8085/app/sendSmsCode.htm?mobile="+mobile+"&business=register";
				HttpPost sendSmsCodeHP = new HttpPost(sendSmsCodeUrl);
				sendSmsCodeHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				sendSmsCodeHP.setEntity(httpEntity);
				response = httpclient.execute(sendSmsCodeHP);
				/*读返回数据*/
				conResult = EntityUtils.toString(response.getEntity());
				jobj = JSONObject.parseObject(conResult);
				sendSmsCodeHP.releaseConnection();
				System.out.println(jobj.get("code"));
				System.out.println(jobj.get("message"));
				assertEquals(1, jobj.get("code"));
				assertEquals("发送手机验证码成功", jobj.get("message"));	
				
				
				//提交注册信息
				String registerSubmitUrl="http://127.0.0.1:8085/app/registerSubmit.htm?userName="+userName+
						"&mobile="+mobile+"&logPassword="+AESUtil.encode(logPassword)+"&code=888888&imgCode=8888";
				HttpPost registerSubmitHP = new HttpPost(registerSubmitUrl);
				registerSubmitHP.addHeader("Content-type", "application/x-www-form-urlencoded");
				registerSubmitHP.setEntity(httpEntity);
				response = httpclient.execute(registerSubmitHP);
				/*读返回数据*/
				conResult = EntityUtils.toString(response.getEntity());
				jobj = JSONObject.parseObject(conResult);
				registerSubmitHP.releaseConnection();
				System.out.println(jobj.get("code"));
				System.out.println(jobj.get("message"));
				//验证结果
				assertEquals(1, jobj.get("code"));
				assertEquals("注册成功", jobj.get("message"));
				assertEquals(0, jobj.get("giftMoney"));
				assertEquals("无优惠券信息", jobj.get("giftMoneyMessage"));
				//数据校验
				userBaseInfoDO=findUserBaseInfoByUserName(userName);
				userId=userBaseInfoDO.getUserId();
				userBaseId=userBaseInfoDO.getUserBaseId();
				assertEquals(mobile, userBaseInfoDO.getMobile());
				assertEquals(userName, userBaseInfoDO.getUserName());
				assertEquals(MD5Util.getMD5_32(logPassword), userBaseInfoDO.getLogPassword());
			}
			
			
			//订单待确认(购物车）
			String confirmOrderUrl="http://127.0.0.1:8085/app/confirmOrder.htm?productIds="+productIds+"&counts="+counts;
			if (testId==1002) {
				confirmOrderUrl="http://127.0.0.1:8085/app/confirmOrder.htm?counts="+counts;
			}else if (testId==1006) {
				insertTblDrawerAddressAll(id, userId, city, province, areaCode, detailAddress, drawerName, drawerNumber, zipCode,
						mobileNumber, "Y", new Date());
				postArea=province;
				insertTblDeliverAll(deliverId, productId, post, express, ems, postArea, new Date());
			}
			HttpPost confirmOrderHP = new HttpPost(confirmOrderUrl);
			confirmOrderHP.addHeader("Content-type", "application/x-www-form-urlencoded");
			confirmOrderHP.setEntity(httpEntity);
			response = httpclient.execute(confirmOrderHP);
			/*读返回数据*/
			conResult = EntityUtils.toString(response.getEntity());
			jobj = JSONObject.parseObject(conResult);
			confirmOrderHP.releaseConnection();
			System.out.println(jobj.get("code"));
			System.out.println(jobj.get("message"));
			//验证结果
			if (testId==1001) {
				assertEquals(-1, jobj.get("code"));
				assertEquals("未登录或登录失效", jobj.get("message"));
			}else if (testId==1002) {
				assertEquals(0, jobj.get("code"));
				assertEquals("选择的商品productIds不能为空", jobj.get("message"));
			}else if (testId==1003) {
				assertEquals(0, jobj.get("code"));
				assertEquals("商品号："+productIds+"不存在", jobj.get("message"));
			}else if (testId==1004) {
				assertEquals(0, jobj.get("code"));
				assertEquals("库存不足，不能增加购买数量", jobj.get("message"));
			}else if (testId==1005) {
				assertEquals(0, jobj.get("code"));
				assertEquals("亲，你选购的商品("+productName+")已经下架，请重新选购！", jobj.get("message"));
			}else if (testId==1006) {
				assertEquals(1, jobj.get("code"));
				assertEquals("待确认订单信息查询成功", jobj.get("message"));
				List<Map<String, String>> selectList=(List<Map<String, String>>) jobj.get("selectList");
				Map<String, String> map=selectList.get(0);
				assertEquals(String.valueOf(resortsBusinessId), map.get("resortsBusinessId"));
				assertEquals("0", map.get("wareCount"));
				assertEquals(tblProductDOex.getProductStatus(), map.get("productStatus"));
				
				Map<String, String> supplierMap=(Map<String, String>) jobj.get("postFeeMap");
				assertNotNull(supplierMap);
				
				assertEquals(express.toStandardString(), jobj.get("totalPostFee"));
				assertEquals(tblProductDOex.getPrice1().multiply(Long.parseLong(counts)).add(express).toStandardString(),
						jobj.get("selectTotalAmount"));
				
				List<Map<String, String>> addresslist=(List<Map<String, String>>) jobj.get("listAddresses");
				map=addresslist.get(0);
				assertEquals(String.valueOf(userId), map.get("userId"));
				assertEquals(detailAddress, map.get("detailAddress"));
				
				assertNotNull(jobj.get("token"));
			}
			//清除数据
			clearnUserRoleByUserId(userId);
			clearnUserByUserName(userName);
			clearnPersonaInfoByUserBaseId(userBaseId);
			clearnUserBaseInfoByUserName(userName);
			clearnUserAccountDataByUserId(userId);
			clearnUserExtendByUserId(userId);
			clearnUserLogin(userName);
			
			//清除登录日志
			List<UserLoginLogDO> userLoginLogDOlist=findUserLoginLogByUserId(userId);
			if (!userLoginLogDOlist.isEmpty()) {
				for (int i = 0; i < userLoginLogDOlist.size(); i++) {
					UserLoginLogDO userLoginLogDO=userLoginLogDOlist.get(i);
					if (userLoginLogDO!=null) {
						clearnUserLoginLogById(userLoginLogDO.getTblBaseId());
					}
				}
			}
			
			clearnTblProductByProductId(productId);
			clearnUserBaseInfoByUserName(userName1);
			clearnTblStorageByProductId(productId);
			clearnTblShopCartByUserIdAndSaleType(userId,ShopingCartTypeEnum.O2O.code(), productId);
			clearnTblDrawerAddressById(id);
			clearnTblDeliverById(deliverId);
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private static String getStringFromJson(JSONObject adata) {
		StringBuffer sb = new StringBuffer();
		sb.append("{");
		for (Object key : adata.keySet()) {
			sb.append("\"" + key + "\":\"" + adata.get(key) + "\",");
		}
		String rtn = sb.toString().substring(0, sb.toString().length() - 1)
				+ "}";
		return rtn;
	}
}
