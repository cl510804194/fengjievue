/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.RecommendRuleDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.RecommendRuleDO;
import org.springframework.dao.DataAccessException;

/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.RecommendRuleDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/recommend_rule.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 

public class IbatisRecommendRuleDAO extends SqlMapClientDaoSupport implements RecommendRuleDAO {
	/**
	 *  Insert one <tt>RecommendRuleDO</tt> object to DB table <tt>recommend_rule</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into recommend_rule(rule_id,rule_name,reward_obj,reward_type,amount,give_amount,give_type,raw_add_time,version,status) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param recommendRule
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(RecommendRuleDO recommendRule) throws DataAccessException {
    	if (recommendRule == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-RECOMMEND-RULE-INSERT", recommendRule);

        return recommendRule.getRuleId();
    }

	/**
	 *  Query DB table <tt>recommend_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select rule_id, rule_name, reward_obj, reward_type, amount, give_amount, give_type, raw_add_time, raw_update_time, version, status from recommend_rule where (rule_id = ?)</tt>
	 *
	 *	@param ruleId
	 *	@return RecommendRuleDO
	 *	@throws DataAccessException
	 */	 
    public RecommendRuleDO findById(long ruleId) throws DataAccessException {
        Long param = new Long(ruleId);

        return (RecommendRuleDO) getSqlMapClientTemplate().queryForObject("MS-RECOMMEND-RULE-FIND-BY-ID", param);

    }

	/**
	 *  Update DB table <tt>recommend_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update recommend_rule set version='HIS' where (version = ?)</tt>
	 *
	 *	@param version
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateByVersion(String version) throws DataAccessException {

        return getSqlMapClientTemplate().update("MS-RECOMMEND-RULE-UPDATE-BY-VERSION", version);
    }

	/**
	 *  Query DB table <tt>recommend_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select rule_id, rule_name, reward_obj, reward_type, amount, give_amount, give_type, raw_add_time, raw_update_time, version, status from recommend_rule where ((status = 'NORMAL') AND (version = 'NOW'))</tt>
	 *
	 *	@return RecommendRuleDO
	 *	@throws DataAccessException
	 */	 
    public RecommendRuleDO findCanUse() throws DataAccessException {

        return (RecommendRuleDO) getSqlMapClientTemplate().queryForObject("MS-RECOMMEND-RULE-FIND-CAN-USE", null);

    }


    public RecommendRuleDO findNow() throws DataAccessException {

        return (RecommendRuleDO) getSqlMapClientTemplate().queryForObject("MS-RECOMMEND-RULE-FIND-NOW", null);

    }

}