/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.ProfitAsignInfoBrokerDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>profit_asign_info_broker</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/profit_asign_info_broker.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface ProfitAsignInfoBrokerDAO {
	/**
	 *  Insert one <tt>ProfitAsignInfoBrokerDO</tt> object to DB table <tt>profit_asign_info_broker</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into profit_asign_info_broker(tbl_base_id,receive_id,distribution_id,distribution_quota,note,raw_add_time,rem1) values (?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param profitAsignInfoBroker
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ProfitAsignInfoBrokerDO profitAsignInfoBroker) throws DataAccessException;

	/**
	 *  Update DB table <tt>profit_asign_info_broker</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update profit_asign_info_broker set receive_id=?, distribution_id=?, distribution_quota=?, note=?, rem1=? where (tbl_base_id = ?)</tt>
	 *
	 *	@param profitAsignInfoBroker
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ProfitAsignInfoBrokerDO profitAsignInfoBroker) throws DataAccessException;

	/**
	 *  Query DB table <tt>profit_asign_info_broker</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select tbl_base_id, receive_id, distribution_id, distribution_quota, note, raw_add_time, raw_update_time, rem1 from profit_asign_info_broker where (tbl_base_id = ?)</tt>
	 *
	 *	@param tblBaseId
	 *	@return ProfitAsignInfoBrokerDO
	 *	@throws DataAccessException
	 */	 
    public ProfitAsignInfoBrokerDO findById(long tblBaseId) throws DataAccessException;

	/**
	 *  Query DB table <tt>profit_asign_info_broker</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select tbl_base_id, receive_id, distribution_id, distribution_quota, note, raw_add_time, raw_update_time, rem1 from profit_asign_info_broker where (receive_id = ?)</tt>
	 *
	 *	@param receiveId
	 *	@return ProfitAsignInfoBrokerDO
	 *	@throws DataAccessException
	 */	 
    public ProfitAsignInfoBrokerDO findByReceiveId(long receiveId) throws DataAccessException;

	/**
	 *  Query DB table <tt>profit_asign_info_broker</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select tbl_base_id, receive_id, distribution_id, distribution_quota, note, raw_add_time, raw_update_time, rem1 from profit_asign_info_broker where (1 = 1)</tt>
	 *
	 *	@param profitAsignInfoBroker
	 *	@param receiveIds
	 *	@return List<ProfitAsignInfoBrokerDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProfitAsignInfoBrokerDO> findByReceiveIds(ProfitAsignInfoBrokerDO profitAsignInfoBroker, List receiveIds) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>profit_asign_info_broker</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from profit_asign_info_broker where (tbl_base_id = ?)</tt>
	 *
	 *	@param tblBaseId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long tblBaseId) throws DataAccessException;

	/**
	 *  Query DB table <tt>profit_asign_info_broker</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from profit_asign_info_broker</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException;

	/**
	 *  Query DB table <tt>profit_asign_info_broker</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select tbl_base_id, receive_id, distribution_id, distribution_quota, note, raw_add_time, raw_update_time, rem1 from profit_asign_info_broker where (receive_id = ?)</tt>
	 *
	 *	@param receiveId
	 *	@return ProfitAsignInfoBrokerDO
	 *	@throws DataAccessException
	 */	 
    public ProfitAsignInfoBrokerDO findByReceiveIdAutotest(long receiveId) throws DataAccessException;

	/**
	 *  Insert one <tt>ProfitAsignInfoBrokerDO</tt> object to DB table <tt>profit_asign_info_broker</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into profit_asign_info_broker(tbl_base_id,receive_id,distribution_id,distribution_quota,note,raw_add_time,rem1) values (?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param profitAsignInfoBroker
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(ProfitAsignInfoBrokerDO profitAsignInfoBroker) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>profit_asign_info_broker</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from profit_asign_info_broker where (receive_id = ?)</tt>
	 *
	 *	@param receiveId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByReceiveIdAutotest(long receiveId) throws DataAccessException;

}