package com.yjf.esupplier.service.review.impl;

import java.util.List;

import com.yjf.esupplier.ws.enums.ReviewTypeEnum;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import rop.thirdparty.com.google.common.collect.Lists;

import com.yjf.common.domain.api.Domain;
import com.yjf.common.lang.beans.cglib.BeanCopier;
import com.yjf.common.service.base.BeforeProcessInvokeService;
import com.yjf.esupplier.dal.daointerface.TblTradeReviewDAO;
import com.yjf.esupplier.dal.dataobject.TblTradeReviewDO;
import com.yjf.esupplier.domain.context.EsupplierDomainHolder;
import com.yjf.esupplier.service.base.EsupplierTransServiceBase;
import com.yjf.esupplier.ws.base.PageComponent;
import com.yjf.esupplier.ws.result.EsupplierBaseResult;
import com.yjf.esupplier.ws.review.info.TradeReviewInfo;
import com.yjf.esupplier.ws.review.order.TradeReviewCreateOrder;
import com.yjf.esupplier.ws.review.order.TradeReviewQueryOrder;
import com.yjf.esupplier.ws.review.order.TradeReviewUpdateOrder;
import com.yjf.esupplier.ws.review.services.TradeReviewService;
import com.yjf.esupplier.ws.service.query.result.QueryBaseBatchResult;

@Service("tradeReviewService")
public class TradeReviewServiceImpl extends EsupplierTransServiceBase implements TradeReviewService {
	
	@Autowired
	TblTradeReviewDAO tblTradeReviewDAO;
	
	/**
	 * 得到一个买家对一个订单的评价
	 * @param queryOrder
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@Override
	public QueryBaseBatchResult<TradeReviewInfo> queryTradeReview(TradeReviewQueryOrder queryOrder) {
		QueryBaseBatchResult<TradeReviewInfo> baseBatchResult = new QueryBaseBatchResult<TradeReviewInfo>();
		List<TradeReviewInfo> trlist = Lists.newArrayList();
		try {
			baseBatchResult.setPageList(trlist);
			TblTradeReviewDO reviewDO = new TblTradeReviewDO();
			BeanCopier.staticCopy(queryOrder, reviewDO);
			long count = tblTradeReviewDAO.findTradeReviewByConditionCount(reviewDO,
				queryOrder.getBeginDate(), queryOrder.getEndDate());
			PageComponent component = new PageComponent(queryOrder, count);
			List<TblTradeReviewDO> reviewDOs = tblTradeReviewDAO.findTradeReviewByCondition(
				reviewDO, component.getFirstRecord(), component.getLastRecord(),
				queryOrder.getBeginDate(), queryOrder.getEndDate());
			
			for (TblTradeReviewDO reviewDO1 : reviewDOs) {
				TradeReviewInfo reviewInfo = new TradeReviewInfo();
				BeanCopier.staticCopy(reviewDO1, reviewInfo);
				reviewInfo.setType(ReviewTypeEnum.getByCode(reviewDO1.getType()));
				trlist.add(reviewInfo);
			}
			baseBatchResult.initPageParam(component);
			return baseBatchResult;
		} catch (Exception e) {
			// TODO: handle exception
			logger.error(e.getMessage(), e);
		}
		return baseBatchResult;
	}
	
	/**
	 * 得到一个供应商的所有评价
	 * @param supplierId
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List<TradeReviewInfo> getTradeReview(long supplierId) throws Exception {
		TradeReviewQueryOrder queryOrder = new TradeReviewQueryOrder();
		queryOrder.setSupplierId(supplierId);
		queryOrder.setPageSize(1000);
		return queryTradeReview(queryOrder).getPageList();
	}
	
	/**
	 * 添加一个评价
	 * @param tr 评价
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@Override
	public EsupplierBaseResult addTradeReview(final TradeReviewCreateOrder tr) {
		return commonProcess(tr, "添加评论", new BeforeProcessInvokeService() {
			
			@Override
			public Domain before() {
				TblTradeReviewDO tblTradeReviewDO = new TblTradeReviewDO();
				BeanCopier.staticCopy(tr, tblTradeReviewDO);
				tblTradeReviewDO.setRawAddTime(EsupplierDomainHolder.get().getSysDate());
				tblTradeReviewDO.setReviewTime(EsupplierDomainHolder.get().getSysDate());
				tblTradeReviewDO.setRawUpdateTime(EsupplierDomainHolder.get().getSysDate());
				tblTradeReviewDAO.insert(tblTradeReviewDO);
				return null;
			}
		}, null, null);
		
	}
	
	/**
	 * 删除一个评价
	 * @param trId 评价ID
	 * @throws Exception
	 */
	@Override
	public EsupplierBaseResult delTradeReview(long trId) {
		EsupplierBaseResult baseResult = createResult();
		tblTradeReviewDAO.deleteById(trId);
		baseResult.setSuccess(true);
		return baseResult;
	}
	
	/**
	 * 修改一个评价
	 * @param tradeReviewUpdateOrder 评价
	 * @throws Exception
	 */
	@Override
	public EsupplierBaseResult updateTradeReview(final TradeReviewUpdateOrder tradeReviewUpdateOrder)
																										throws Exception {
		return commonProcess(tradeReviewUpdateOrder, "更新评论", new BeforeProcessInvokeService() {
			
			@Override
			public Domain before() {
				TblTradeReviewDO tblTradeReviewDO = tblTradeReviewDAO
					.findById(tradeReviewUpdateOrder.getReviewId());
				
				BeanCopier.staticCopy(tradeReviewUpdateOrder, tblTradeReviewDO);
				tblTradeReviewDAO.update(tblTradeReviewDO);
				return null;
			}
		}, null, null);
	}
	
	@Override
	protected EsupplierBaseResult createResult() {
		return new EsupplierBaseResult();
	}
	
}
