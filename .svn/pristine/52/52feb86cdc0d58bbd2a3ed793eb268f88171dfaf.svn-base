package com.yjf.esupplier.service.bill.impl;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;

import com.google.common.collect.Lists;
import com.yjf.common.lang.beans.cglib.BeanCopier;
import com.yjf.common.lang.util.ListUtil;
import com.yjf.common.lang.util.StringUtil;
import com.yjf.common.lang.util.money.Money;
import com.yjf.esupplier.common.util.DateUtil;
import com.yjf.esupplier.common.util.NumberUtil;
import com.yjf.esupplier.dal.custom.dataobject.vo.OrderDetailVO;
import com.yjf.esupplier.dal.dataobject.TblOrderInfoDO;
import com.yjf.esupplier.dal.dataobject.TblOrderItemDO;
import com.yjf.esupplier.dal.dataobject.TblProductScoreDO;
import com.yjf.esupplier.dal.dataobject.UserBaseInfoDO;
import com.yjf.esupplier.service.bill.OrderService;
import com.yjf.esupplier.service.bill.info.RefundOrderInfo;
import com.yjf.esupplier.service.exception.ExceptionFactory;
import com.yjf.esupplier.service.security.util.ShiroSessionUtils;
import com.yjf.esupplier.ws.base.PageComponent;
import com.yjf.esupplier.ws.bill.enums.OrderRefundStatusEnum;
import com.yjf.esupplier.ws.bill.enums.OrderStatusEnum;
import com.yjf.esupplier.ws.bill.enums.PaymentMethodEnum;
import com.yjf.esupplier.ws.bill.enums.PrintReceiptStatusEnum;
import com.yjf.esupplier.ws.bill.info.DeliveryShipInfo;
import com.yjf.esupplier.ws.bill.info.DiningOrderInfo;
import com.yjf.esupplier.ws.bill.info.OrderInfo;
import com.yjf.esupplier.ws.bill.info.OrderItemInfo;
import com.yjf.esupplier.ws.bill.info.ProductScoreInfo;
import com.yjf.esupplier.ws.bill.order.ProductScoreStatisticsRsult;
import com.yjf.esupplier.ws.bill.order.QueryOrderInfoSearchOrder;
import com.yjf.esupplier.ws.bill.order.SearchProductScoreOrder;
import com.yjf.esupplier.ws.enums.UserBizTypeEnum;
import com.yjf.esupplier.ws.result.EsupplierBaseResult;
import com.yjf.esupplier.ws.service.EsupplierResultEnum;
import com.yjf.esupplier.ws.service.query.result.QueryBaseBatchResult;
import com.yjf.esupplier.ws.supplier.info.SupplierInfo;

public abstract class OrderSearchProcessImpl extends OrderBaseInfoProcessImpl implements
																				OrderService {
	
	/**
	 * 查询会员已经买了的商品的订单列表 2010-4-7
	 * @author yuwenqiang
	 * @return @
	 */
	@Override
	public QueryBaseBatchResult<OrderInfo> findFrontOrderList(Long userId, String orderStatus,
																int pageStart, int pageEnd,
																Long orderId, String fullName,
																String productName,
																String beginDate, String endDate,
																String takeWays,
																String displayAndNone) {
		
		QueryOrderInfoSearchOrder searchOrder = new QueryOrderInfoSearchOrder();
		searchOrder.setPageNumber(pageStart / pageEnd + 1);
		searchOrder.setPageSize(pageEnd);
		searchOrder.setUserId(userId);
		List<OrderStatusEnum> statusList = Lists.newArrayList();
		statusList.add(OrderStatusEnum.getByCode(orderStatus));
		searchOrder.setStatusList(statusList);
		searchOrder.setId(orderId);
		searchOrder.setSupplierName(fullName);
		searchOrder.setItemProductName(productName);
		if (StringUtil.isNotBlank(beginDate)) {
			searchOrder.setBeginDate(DateUtil.getStartTimeOfTheDate(DateUtil
				.strToDtSimpleFormat(beginDate)));
			
		}
		if (StringUtil.isNotBlank(endDate)) {
			searchOrder.setEndDate(DateUtil.getEndTimeOfTheDate(DateUtil
				.strToDtSimpleFormat(endDate)));
		}
		searchOrder.setTakeWays(takeWays);
		
		return findOrderList(searchOrder);
	}
	
	@Override
	public OrderInfo findOrderById(Long id) {
		TblOrderInfoDO tblOrderInfoDO = tblOrderInfoDAO.findById(id);
		if (tblOrderInfoDO == null)
			return null;
		OrderInfo orderInfo = new OrderInfo();
		convertOrderDOByOrderInfo(tblOrderInfoDO, orderInfo);
		DeliveryShipInfo deliveryShipInfo = deliveryShipService.getDeliveryByOrderId(id);
		if (deliveryShipInfo != null) {
			orderInfo.setDeliveryShipInfo(deliveryShipInfo);
		}
		SupplierInfo supplierInfo = supplierService.getSupplier(orderInfo.getSupplierId());
		if (supplierInfo != null) {
			orderInfo.setSupplierName(supplierInfo.getStoreName());
		}
		return orderInfo;
	}
	
	@Override
	public OrderInfo findOrderByQrCode(String code, String status, Long supplierId) {
		TblOrderInfoDO tblOrderInfo = new TblOrderInfoDO();
		TblOrderInfoDO tblOrderInfoDO = tblOrderInfoDAO.findByQrCode(tblOrderInfo, code, status,
			supplierId);
		if (tblOrderInfoDO == null)
			return null;
		OrderInfo orderInfo = new OrderInfo();
		convertOrderDOByOrderInfo(tblOrderInfoDO, orderInfo);
		SupplierInfo supplierInfo = supplierService.getSupplier(orderInfo.getSupplierId());
		if (supplierInfo != null) {
			orderInfo.setSupplierName(supplierInfo.getStoreName());
		}
		return orderInfo;
	}
	
	/**
	 * 查询会员已经买了的商品的订单列表 2010-4-7
	 * @author yuwenqiang
	 * @return @
	 */
	@Override
	public QueryBaseBatchResult<OrderInfo> findFrontOrderList(Long userId, String orderStatus,
																int pageStart, int pageEnd) {
		QueryOrderInfoSearchOrder searchOrder = new QueryOrderInfoSearchOrder();
		searchOrder.setPageNumber(pageStart / pageEnd + 1);
		searchOrder.setPageSize(pageEnd);
		searchOrder.setUserId(userId);
		List<OrderStatusEnum> statusList = Lists.newArrayList();
		statusList.add(OrderStatusEnum.getByCode(orderStatus));
		searchOrder.setStatusList(statusList);
		return findOrderList(searchOrder);
	}
	
	@Override
	public QueryBaseBatchResult<OrderInfo> findOrderList(QueryOrderInfoSearchOrder searchOrder) {
		
		QueryBaseBatchResult<OrderInfo> baseBatchResult = new QueryBaseBatchResult<OrderInfo>();
		logger.info("findOrderList starts ......searchOrder={}", searchOrder);
		try {
			searchOrder.check();
			TblOrderInfoDO searchTblOrderInfoDO = new TblOrderInfoDO();
			BeanCopier.staticCopy(searchOrder, searchTblOrderInfoDO);
			searchTblOrderInfoDO.setPaymentMethod(searchOrder.getPaymentMethod());
			/*所属景区*/
			searchTblOrderInfoDO.setResortsBusinessId(searchOrder.getBelongTo());
			List<String> statusList = Lists.newArrayList();
			if (ListUtil.isNotEmpty(searchOrder.getStatusList())) {
				for (OrderStatusEnum statusEnum : searchOrder.getStatusList()) {
					statusList.add(statusEnum.code());
				}
			}
			List<String> refundList = Lists.newArrayList();
			if (ListUtil.isNotEmpty(searchOrder.getRefundStatusList())) {
				for (OrderRefundStatusEnum refundStatusEnum : searchOrder.getRefundStatusList()) {
					refundList.add(refundStatusEnum.code());
				}
			}
			String itemProductName = null;
			
			if (StringUtil.isNotEmpty(searchOrder.getItemProductName())) {
				itemProductName = "%" + searchOrder.getItemProductName().trim() + "%";
			}
			String orderId = searchOrder.getOrderId();
			if (StringUtil.isNotEmpty(searchOrder.getOrderId())) {
				orderId = "%" + searchOrder.getOrderId().trim() + "%";
				searchTblOrderInfoDO.setId(-1);
			}
			
			if (StringUtil.isNotEmpty(searchOrder.getSupplierName())) {
				searchTblOrderInfoDO.setSupplierName("%" + searchOrder.getSupplierName() + "%");
			}
			if (StringUtil.isNotEmpty(searchOrder.getBuyerNickname())) {
				searchTblOrderInfoDO.setBuyerNickname("%" + searchOrder.getBuyerNickname() + "%");
			}
			if (searchOrder.getOrderStatus() != null) {
				searchTblOrderInfoDO.setOrderStatus(searchOrder.getOrderStatus().code());
			}
			if (searchOrder.getRefundStatus() != null) {
				searchTblOrderInfoDO.setRefundStatus(searchOrder.getRefundStatus().code());
			}
			if (searchOrder.getWorkflowStatus() != null) {
				searchTblOrderInfoDO.setWorkflowStatus(searchOrder.getWorkflowStatus().code());
			}
			if (PaymentMethodEnum.ONLINE.code().equals(searchOrder.getPaymentMethod())) {
				searchTblOrderInfoDO.setSaleTypeB2c(searchOrder.getSaleTypeB2c().code());
				searchTblOrderInfoDO.setSaleTypeO2o(searchOrder.getSaleTypeO2o().code());
			} else {
				searchTblOrderInfoDO.setPaymentMethod(searchOrder.getPaymentMethod());
			}
			if (searchOrder.getSaleTypeO2o() != null) {
				searchTblOrderInfoDO.setSaleTypeO2o(searchOrder.getSaleTypeO2o().code());
			}
			
			if (searchOrder.getSaleTypeHotels() != null) {
				searchTblOrderInfoDO.setSaleTypeHotels(searchOrder.getSaleTypeHotels().code());
			}
			if (searchOrder.getSaleTypeOrderMeal() != null) {
				searchTblOrderInfoDO
					.setSaleTypeOrderMeal(searchOrder.getSaleTypeOrderMeal().code());
			}
			if (searchOrder.getTuneMeal() != null) {
				searchTblOrderInfoDO.setTuneMeal(searchOrder.getTuneMeal().code());
			}
			if (searchOrder.getProductVary() != null) {
				searchTblOrderInfoDO.setProductVary(searchOrder.getProductVary().code());
			}
			if (StringUtil.isNotBlank(searchOrder.getBatchNo())) {
				searchTblOrderInfoDO.setBatchNo(NumberUtil.parseLong(searchOrder.getBatchNo()));
			}
			if (searchOrder.getReceiptStatusEnum() != null) {
				searchTblOrderInfoDO.setPrintReceipt(searchOrder.getReceiptStatusEnum().code());
			}
			if(searchOrder.getResortsBusinessId()>0){
				searchTblOrderInfoDO.setResortsBusinessId(searchOrder.getResortsBusinessId());
			}
			Map<String, Object> totalMap = tblOrderInfoSearchDAO.findSupplierOrderByConditionCount(
				searchTblOrderInfoDO, itemProductName, statusList, orderId,
				searchOrder.getItemProductId(), searchOrder.getBeginDate(),
				searchOrder.getEndDate(), searchOrder.getSupplierIds(), refundList,
				searchOrder.getSelectO2oAndB2c(),searchOrder.getBatchIdList());
			Money itemPostFreeMoney = Money.zero();
			Money totalAmountMoney = Money.zero();
			Long totalCount = (Long) totalMap.get("totalCount");
			BigDecimal itemPostFree = (BigDecimal) totalMap.get("itemPostFree");
			if (itemPostFree != null) {
				itemPostFreeMoney = Money.cent(itemPostFree.longValue());
			}
			BigDecimal totalAmount = (BigDecimal) totalMap.get("totalAmount");
			if (totalAmount != null) {
				totalAmountMoney = Money.cent(totalAmount.longValue());
			}
			Money totalMoney = new Money();
			totalMoney.addTo(totalAmountMoney).addTo(itemPostFreeMoney);
			
			if (searchOrder.getPageSize() > 0) {
				PageComponent component = new PageComponent(searchOrder, totalCount);
				baseBatchResult.initPageParam(component);
				String orderBy = "";
				if (searchOrder.getOrderByEnum() != null) {
					orderBy = searchOrder.getOrderByEnum().getOrderSql();
				}
				List<OrderDetailVO> orders = tblOrderInfoSearchDAO.findSupplierOrderByCondition(
					searchTblOrderInfoDO, itemProductName, statusList, orderId,
					searchOrder.getItemProductId(), searchOrder.getBeginDate(),
					searchOrder.getEndDate(), component.getFirstRecord(), component.getPageSize(),
					orderBy, searchOrder.getSupplierIds(), refundList,
					searchOrder.getSelectO2oAndB2c(),searchOrder.getBatchIdList());
				baseBatchResult.setPageList(converProductInfos(orders));
			} else {
				baseBatchResult.setTotalCount(totalCount);
			}
			baseBatchResult.setTotalMoney(totalMoney);
			baseBatchResult.setSuccess(true);
			return baseBatchResult;
		} catch (IllegalArgumentException e) {
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.INCOMPLETE_REQ_PARAM);
		} catch (DataAccessException e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.DATABASE_EXCEPTION);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.UN_KNOWN_EXCEPTION);
		}
		return baseBatchResult;
	}

	public Long findOrderListCount(QueryOrderInfoSearchOrder searchOrder){
		QueryBaseBatchResult<OrderInfo> baseBatchResult = new QueryBaseBatchResult<OrderInfo>();
		logger.info("findOrderList starts ......searchOrder={}", searchOrder);
		Long totalCount = null;
		try {
			searchOrder.check();
			TblOrderInfoDO searchTblOrderInfoDO = new TblOrderInfoDO();
			BeanCopier.staticCopy(searchOrder, searchTblOrderInfoDO);
			searchTblOrderInfoDO.setPaymentMethod(searchOrder.getPaymentMethod());
			/*所属景区*/
			searchTblOrderInfoDO.setResortsBusinessId(searchOrder.getBelongTo());
			List<String> statusList = Lists.newArrayList();
			if (ListUtil.isNotEmpty(searchOrder.getStatusList())) {
				for (OrderStatusEnum statusEnum : searchOrder.getStatusList()) {
					statusList.add(statusEnum.code());
				}
			}
			List<String> refundList = Lists.newArrayList();
			if (ListUtil.isNotEmpty(searchOrder.getRefundStatusList())) {
				for (OrderRefundStatusEnum refundStatusEnum : searchOrder.getRefundStatusList()) {
					refundList.add(refundStatusEnum.code());
				}
			}
			String itemProductName = null;

			if (StringUtil.isNotEmpty(searchOrder.getItemProductName())) {
				itemProductName = "%" + searchOrder.getItemProductName().trim() + "%";
			}
			String orderId = searchOrder.getOrderId();
			if (StringUtil.isNotEmpty(searchOrder.getOrderId())) {
				orderId = "%" + searchOrder.getOrderId().trim() + "%";
				searchTblOrderInfoDO.setId(-1);
			}

			if (StringUtil.isNotEmpty(searchOrder.getSupplierName())) {
				searchTblOrderInfoDO.setSupplierName("%" + searchOrder.getSupplierName() + "%");
			}
			if (StringUtil.isNotEmpty(searchOrder.getBuyerNickname())) {
				searchTblOrderInfoDO.setBuyerNickname("%" + searchOrder.getBuyerNickname() + "%");
			}
			if (searchOrder.getOrderStatus() != null) {
				searchTblOrderInfoDO.setOrderStatus(searchOrder.getOrderStatus().code());
			}
			if (searchOrder.getRefundStatus() != null) {
				searchTblOrderInfoDO.setRefundStatus(searchOrder.getRefundStatus().code());
			}
			if (searchOrder.getWorkflowStatus() != null) {
				searchTblOrderInfoDO.setWorkflowStatus(searchOrder.getWorkflowStatus().code());
			}
			if (PaymentMethodEnum.ONLINE.code().equals(searchOrder.getPaymentMethod())) {
				searchTblOrderInfoDO.setSaleTypeB2c(searchOrder.getSaleTypeB2c().code());
				searchTblOrderInfoDO.setSaleTypeO2o(searchOrder.getSaleTypeO2o().code());
			} else {
				searchTblOrderInfoDO.setPaymentMethod(searchOrder.getPaymentMethod());
			}
			if (searchOrder.getSaleTypeHotels() != null) {
				searchTblOrderInfoDO.setSaleTypeHotels(searchOrder.getSaleTypeHotels().code());
			}
			if (searchOrder.getSaleTypeOrderMeal() != null) {
				searchTblOrderInfoDO
						.setSaleTypeOrderMeal(searchOrder.getSaleTypeOrderMeal().code());
			}
			if (searchOrder.getTuneMeal() != null) {
				searchTblOrderInfoDO.setTuneMeal(searchOrder.getTuneMeal().code());
			}
			if (StringUtil.isNotBlank(searchOrder.getBatchNo())) {
				searchTblOrderInfoDO.setBatchNo(NumberUtil.parseLong(searchOrder.getBatchNo()));
			}
			if (searchOrder.getReceiptStatusEnum() != null) {
				searchTblOrderInfoDO.setPrintReceipt(searchOrder.getReceiptStatusEnum().code());
			}
			if (searchOrder.getResortsBusinessId() > 0) {
				searchTblOrderInfoDO.setResortsBusinessId(searchOrder.getResortsBusinessId());
			}
			Map<String, Object> totalMap = tblOrderInfoSearchDAO.findSupplierOrderByConditionCount(
					searchTblOrderInfoDO, itemProductName, statusList, orderId,
					searchOrder.getItemProductId(), searchOrder.getBeginDate(),
					searchOrder.getEndDate(), searchOrder.getSupplierIds(), refundList,
					searchOrder.getSelectO2oAndB2c(), searchOrder.getBatchIdList());
			totalCount = (Long) totalMap.get("totalCount");
		} catch (IllegalArgumentException e) {
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.INCOMPLETE_REQ_PARAM);
		} catch (DataAccessException e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.DATABASE_EXCEPTION);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.UN_KNOWN_EXCEPTION);
		}
		return totalCount;
	}

	@Override
	public QueryBaseBatchResult<ProductScoreInfo> queryProductScoreList(SearchProductScoreOrder searchOrder) {
		
		QueryBaseBatchResult<ProductScoreInfo> baseBatchResult = new QueryBaseBatchResult<ProductScoreInfo>();
		logger.info("findOrderList starts ......searchOrder={}", searchOrder);
		try {
			searchOrder.check();
			TblProductScoreDO searchScoreDO = new TblProductScoreDO();
			BeanCopier.staticCopy(searchOrder, searchScoreDO);
			
			long totalCount = tblProductScoreDAO.findByConditionCount(searchScoreDO,
				searchOrder.getBeginDate(), searchOrder.getEndDate(), searchOrder.getBeginScore(),
				searchOrder.getEndScore());
			PageComponent component = new PageComponent(searchOrder, totalCount);
			baseBatchResult.initPageParam(component);
			List<TblProductScoreDO> scoreDOs = tblProductScoreDAO.findByCondition(searchScoreDO,
				component.getFirstRecord(), component.getPageSize(), searchOrder.getBeginDate(),
				searchOrder.getEndDate(), searchOrder.getBeginScore(), searchOrder.getEndScore());
			baseBatchResult.setPageList(converProductScoreInfos(scoreDOs));
			baseBatchResult.setSuccess(true);
			return baseBatchResult;
		} catch (IllegalArgumentException e) {
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.INCOMPLETE_REQ_PARAM);
		} catch (DataAccessException e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.DATABASE_EXCEPTION);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.UN_KNOWN_EXCEPTION);
		}
		return baseBatchResult;
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public ProductScoreStatisticsRsult statisticsProductScoreList(	SearchProductScoreOrder searchOrder) {
		
		ProductScoreStatisticsRsult baseBatchResult = new ProductScoreStatisticsRsult();
		logger.info("findOrderList starts ......searchOrder={}", searchOrder);
		try {
			searchOrder.check();
			TblProductScoreDO searchScoreDO = new TblProductScoreDO();
			BeanCopier.staticCopy(searchOrder, searchScoreDO);
			
			List scoreTotalList = tblProductScoreDAO.findByScoreTotalCount(searchScoreDO,
				searchOrder.getBeginDate(), searchOrder.getEndDate());
			if (ListUtil.isNotEmpty(scoreTotalList)) {
				List<HashMap> hashMaps = scoreTotalList;
				for (HashMap item : hashMaps) {
					if (((Number) item.get("score")).longValue() == 1) {
						baseBatchResult.setScore1Count(((Number) item.get("totalCount"))
							.longValue());
					} else if (((Number) item.get("score")).longValue() == 2) {
						baseBatchResult.setScore2Count(((Number) item.get("totalCount"))
							.longValue());
					} else if (((Number) item.get("score")).longValue() == 3) {
						baseBatchResult.setScore3Count(((Number) item.get("totalCount"))
							.longValue());
					} else if (((Number) item.get("score")).longValue() == 4) {
						baseBatchResult.setScore4Count(((Number) item.get("totalCount"))
							.longValue());
					} else if (((Number) item.get("score")).longValue() == 5) {
						baseBatchResult.setScore5Count(((Number) item.get("totalCount"))
							.longValue());
					}
				}
			}
			return baseBatchResult;
		} catch (IllegalArgumentException e) {
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.INCOMPLETE_REQ_PARAM);
		} catch (DataAccessException e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.DATABASE_EXCEPTION);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.UN_KNOWN_EXCEPTION);
		}
		return baseBatchResult;
	}
	
	/**
	 * 会员查询自己将要卖的商品信息 2010-4-9
	 * @author yuwenqiang
	 * @param pageStart
	 * @param pageEnd
	 * @return @
	 */
	@Override
	public QueryBaseBatchResult<OrderInfo> findSoldOrderList(Long supplierId, String orderStatus,
																int pageStart, int pageEnd) {
		QueryOrderInfoSearchOrder searchOrder = new QueryOrderInfoSearchOrder();
		searchOrder.setPageNumber(pageStart / pageEnd + 1);
		searchOrder.setPageSize(pageEnd);
		List<OrderStatusEnum> statusList = Lists.newArrayList();
		statusList.add(OrderStatusEnum.getByCode(orderStatus));
		searchOrder.setStatusList(statusList);
		searchOrder.setSupplierId(supplierId);
		return findOrderList(searchOrder);
	}
	
	@Override
	public QueryBaseBatchResult<OrderInfo> findSoldOrderList(Long supplierId, String orderStatus,
																int pageStart, int pageEnd,
																Long orderId, String fullName,
																String productName,
																String beginDate, String endDate,
																String takeWays,
																String displayAndNone) {
		QueryOrderInfoSearchOrder searchOrder = new QueryOrderInfoSearchOrder();
		searchOrder.setPageNumber(pageStart / pageEnd + 1);
		searchOrder.setPageSize(pageEnd);
		searchOrder.setSupplierId(supplierId);
		List<OrderStatusEnum> statusList = Lists.newArrayList();
		statusList.add(OrderStatusEnum.getByCode(orderStatus));
		searchOrder.setStatusList(statusList);
		searchOrder.setId(orderId);
		searchOrder.setSupplierName(fullName);
		searchOrder.setItemProductName(productName);
		if (StringUtil.isNotBlank(beginDate)) {
			searchOrder.setBeginDate(DateUtil.getStartTimeOfTheDate(DateUtil
				.strToDtSimpleFormat(beginDate)));
			
		}
		if (StringUtil.isNotBlank(endDate)) {
			searchOrder.setEndDate(DateUtil.getEndTimeOfTheDate(DateUtil
				.strToDtSimpleFormat(endDate)));
		}
		searchOrder.setTakeWays(takeWays);
		return findOrderList(searchOrder);
	}
	
	/**
	 * 根据订单的ID查询该订单细项的信息 2010-4-14
	 * @author yuwenqiang
	 * @return
	 */
	@Override
	public List<OrderItemInfo> findOrderItemByOrderId(long orderId) {
		List<TblOrderItemDO> orderItemDOs = tblOrderItemDAO.findByOrderId(orderId);
		return converOrderItemInfos(orderItemDOs);
	}
	
	@Override
	public OrderItemInfo findOrderItemById(long orderItemId) {
		TblOrderItemDO orderItemDO = tblOrderItemDAO.findById(orderItemId);
		OrderItemInfo info = new OrderItemInfo();
		BeanCopier.staticCopy(orderItemDO, info);
		return info;
	}
	
	@Override
	public QueryBaseBatchResult<OrderInfo> findMyBuyOrderList(QueryOrderInfoSearchOrder searchOrder) {
		// TODO Auto-generated method stub
		
		QueryBaseBatchResult<OrderInfo> baseBatchResult = new QueryBaseBatchResult<OrderInfo>();
		logger.info("findMyBuyOrderList starts ......searchOrder={}", searchOrder);
		try {
			searchOrder.check();
			TblOrderInfoDO searchTblOrderInfoDO = new TblOrderInfoDO();
			BeanCopier.staticCopy(searchOrder, searchTblOrderInfoDO);
			searchTblOrderInfoDO.setPaymentMethod(searchOrder.getPaymentMethod());
			List<String> statusList = Lists.newArrayList();
			if (ListUtil.isNotEmpty(searchOrder.getStatusList())) {
				for (OrderStatusEnum statusEnum : searchOrder.getStatusList()) {
					statusList.add(statusEnum.code());
				}
			}
			String itemProductName = null;
			
			if (StringUtil.isNotEmpty(searchOrder.getItemProductName())) {
				itemProductName = "%" + searchOrder.getItemProductName() + "%";
			}
			String orderId = searchOrder.getOrderId();
			if (StringUtil.isNotEmpty(searchOrder.getOrderId())) {
				orderId = searchOrder.getOrderId() + "%";
				searchTblOrderInfoDO.setId(-1);
			}
			
			if (StringUtil.isNotEmpty(searchOrder.getSupplierName())) {
				searchTblOrderInfoDO.setSupplierName("%" + searchOrder.getSupplierName() + "%");
			}
			if (StringUtil.isNotEmpty(searchOrder.getBuyerNickname())) {
				searchTblOrderInfoDO.setBuyerNickname("%" + searchOrder.getBuyerNickname() + "%");
			}
			if (searchOrder.getOrderStatus() != null) {
				searchTblOrderInfoDO.setOrderStatus(searchOrder.getOrderStatus().code());
			}
			if (searchOrder.getRefundStatus() != null) {
				searchTblOrderInfoDO.setRefundStatus(searchOrder.getRefundStatus().code());
			}
			if (searchOrder.getWorkflowStatus() != null) {
				searchTblOrderInfoDO.setWorkflowStatus(searchOrder.getWorkflowStatus().code());
			}
			
			Map<String, Object> totalMap = tblOrderInfoSearchDAO.findByConditionCount(
				searchTblOrderInfoDO, itemProductName, statusList, orderId,
				searchOrder.getItemProductId(), searchOrder.getBeginDate(),
				searchOrder.getEndDate());
			Money itemPostFreeMoney = Money.zero();
			Money totalAmountMoney = Money.zero();
			Long totalCount = (Long) totalMap.get("totalCount");
			BigDecimal itemPostFree = (BigDecimal) totalMap.get("itemPostFree");
			if (itemPostFree != null) {
				itemPostFreeMoney = Money.cent(itemPostFree.longValue());
			}
			BigDecimal totalAmount = (BigDecimal) totalMap.get("totalAmount");
			if (totalAmount != null) {
				totalAmountMoney = Money.cent(totalAmount.longValue());
			}
			Money totalMoney = new Money();
			totalMoney.addTo(totalAmountMoney).addTo(itemPostFreeMoney);
			PageComponent component = new PageComponent(searchOrder, totalCount);
			baseBatchResult.initPageParam(component);
			String orderBy = null;
			if (searchOrder.getOrderByEnum() != null) {
				orderBy = searchOrder.getOrderByEnum().getOrderSql();
			}
			List<OrderDetailVO> orders = tblOrderInfoSearchDAO.findByCondition(
				searchTblOrderInfoDO, itemProductName, statusList, orderId,
				searchOrder.getItemProductId(), searchOrder.getBeginDate(),
				searchOrder.getEndDate(), component.getFirstRecord(), component.getPageSize(),
				orderBy);
			baseBatchResult.setPageList(converProductInfos(orders));
			baseBatchResult.setTotalMoney(totalMoney);
			baseBatchResult.setSuccess(true);
			return baseBatchResult;
		} catch (IllegalArgumentException e) {
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.INCOMPLETE_REQ_PARAM);
		} catch (DataAccessException e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.DATABASE_EXCEPTION);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.UN_KNOWN_EXCEPTION);
		}
		return baseBatchResult;
	}
	
	@Override
	public EsupplierBaseResult loadRefundDetail(long refundId) {
		// TODO Auto-generated method stub
		RefundOrderInfo refundOrderInfo = orderRefundService.findById(refundId);
		refundOrderInfo.setArriveDate(DateUtil.strToDtSimpleFormat(DateUtil.getDiffDate(
			refundOrderInfo.getApplyDate(), 10)));
		long currentUserId = ShiroSessionUtils.getSessionLocal().getUserId();
		if (refundOrderInfo.getBuyerUserId() != currentUserId
			&& refundOrderInfo.getSupplierId() != currentUserId
			&& ShiroSessionUtils.getSessionLocal().getUserBizType() != UserBizTypeEnum.ADMIN) {
			throw ExceptionFactory.newYrdException(EsupplierResultEnum.NO_ACCESS, "该用户对该数据无访问权限");
		}
		return null;
	}
	
	@Override
	public QueryBaseBatchResult<DiningOrderInfo> findDiningOrderList(	QueryOrderInfoSearchOrder searchOrder) {
		
		QueryBaseBatchResult<DiningOrderInfo> baseBatchResult = new QueryBaseBatchResult<DiningOrderInfo>();
		if (PrintReceiptStatusEnum.TO_BE_PRINTED != searchOrder.getReceiptStatusEnum()) {
			logger.info("findDiningOrderList starts ......searchOrder={}", searchOrder);
		}
		try {
			searchOrder.check();
			TblOrderInfoDO searchTblOrderInfoDO = new TblOrderInfoDO();
			BeanCopier.staticCopy(searchOrder, searchTblOrderInfoDO);
			searchTblOrderInfoDO.setPaymentMethod(searchOrder.getPaymentMethod());
			/*所属景区*/
			searchTblOrderInfoDO.setResortsBusinessId(searchOrder.getBelongTo());
			List<String> statusList = null;
			if (ListUtil.isNotEmpty(searchOrder.getStatusList())) {
				statusList = Lists.newArrayList();
				for (OrderStatusEnum statusEnum : searchOrder.getStatusList()) {
					statusList.add(statusEnum.code());
				}
			}
			List<String> refundList = Lists.newArrayList();
			if (ListUtil.isNotEmpty(searchOrder.getRefundStatusList())) {
				for (OrderRefundStatusEnum refundStatusEnum : searchOrder.getRefundStatusList()) {
					refundList.add(refundStatusEnum.code());
				}
			}
			String itemProductName = null;
			
			if (StringUtil.isNotEmpty(searchOrder.getItemProductName())) {
				itemProductName = "%" + searchOrder.getItemProductName().trim() + "%";
			}
			String orderId = searchOrder.getOrderId();
			if (StringUtil.isNotEmpty(searchOrder.getOrderId())) {
				orderId = "%" + searchOrder.getOrderId().trim() + "%";
				searchTblOrderInfoDO.setId(-1);
			}
			
			if (StringUtil.isNotEmpty(searchOrder.getSupplierName())) {
				searchTblOrderInfoDO.setSupplierName("%" + searchOrder.getSupplierName() + "%");
			}
			if (StringUtil.isNotEmpty(searchOrder.getBuyerNickname())) {
				searchTblOrderInfoDO.setBuyerNickname("%" + searchOrder.getBuyerNickname() + "%");
			}
			if (searchOrder.getOrderStatus() != null) {
				searchTblOrderInfoDO.setOrderStatus(searchOrder.getOrderStatus().code());
			}
			if (searchOrder.getRefundStatus() != null) {
				searchTblOrderInfoDO.setRefundStatus(searchOrder.getRefundStatus().code());
			}
			if (searchOrder.getWorkflowStatus() != null) {
				searchTblOrderInfoDO.setWorkflowStatus(searchOrder.getWorkflowStatus().code());
			}
			if (PaymentMethodEnum.ONLINE.code().equals(searchOrder.getPaymentMethod())) {
				if (searchOrder.getSaleTypeO2o() != null) {
					searchTblOrderInfoDO.setSaleTypeO2o(searchOrder.getSaleTypeO2o().code());
				}
				if (searchOrder.getSaleTypeB2c() != null) {
					searchTblOrderInfoDO.setSaleTypeB2c(searchOrder.getSaleTypeB2c().code());
				}
			} else {
				searchTblOrderInfoDO.setPaymentMethod(searchOrder.getPaymentMethod());
			}
			
			if (searchOrder.getSaleTypeHotels() != null) {
				searchTblOrderInfoDO.setSaleTypeHotels(searchOrder.getSaleTypeHotels().code());
			}
			
			if (searchOrder.getSaleTypeOrderMeal() != null) {
				searchTblOrderInfoDO
					.setSaleTypeOrderMeal(searchOrder.getSaleTypeOrderMeal().code());
			}
			if (searchOrder.getTuneMeal() != null) {
				searchTblOrderInfoDO.setTuneMeal(searchOrder.getTuneMeal().code());
			}
			if (searchOrder.getReceiptStatusEnum() != null) {
				searchTblOrderInfoDO.setPrintReceipt(searchOrder.getReceiptStatusEnum().code());
			}
			Long totalCount = tblOrderInfoDAO.findByBatchNoCount(searchTblOrderInfoDO,
				searchOrder.getBeginDate(), searchOrder.getEndDate(), statusList);
			PageComponent component = new PageComponent(searchOrder, totalCount);
			baseBatchResult.initPageParam(component);
			String orderBy = "";
			if (searchOrder.getOrderByEnum() != null) {
				orderBy = searchOrder.getOrderByEnum().getOrderSql();
			}
			List<TblOrderInfoDO> batchNos = tblOrderInfoDAO.findByBatchNoCondition(
				searchTblOrderInfoDO,
				component.getFirstRecord(), component.getPageSize(), orderBy,
				searchOrder.getBeginDate(), searchOrder.getEndDate(), statusList);
			List<DiningOrderInfo> diningOrderInfos = Lists.newArrayList();
			for (TblOrderInfoDO orderDO : batchNos) {
				List<OrderDetailVO> orders = tblOrderInfoSearchDAO.findSupplierOrderByBatchNo(
					orderDO.getBatchNo(), orderDO.getSupplierId(), searchOrder.getUserId());
				if (ListUtil.isNotEmpty(orders)) {
					DiningOrderInfo diningOrderInfo = new DiningOrderInfo();
					//					SupplierInfo supplierInfo = supplierService.getSupplier(orders.get(0)
					//						.getSupplierId());
					//					if (supplierInfo != null) {
					diningOrderInfo.setSupplierName(orders.get(0).getSupplierName());
					diningOrderInfo.setSupplierId(orders.get(0).getSupplierId());
					diningOrderInfo.setOrderStatus(OrderStatusEnum.getByCode(orders.get(0)
						.getOrderStatus()));
					if (orders.get(0).getOrdersTime() == null) {
						diningOrderInfo.setConsumeTime(orders.get(0).getRawAddTime());
					} else {
						diningOrderInfo.setConsumeTime(orders.get(0).getOrdersTime());
					}
					diningOrderInfo.setDiningAddress(orders.get(0).getDetailAddress());
					diningOrderInfo.setReceiptTime(orders.get(0).getConfirmReceiptTime());
					diningOrderInfo.setDeliverTime(orders.get(0).getDeliverTime());
					diningOrderInfo.setDiningTime(orders.get(0).getDiningTime());
					//					}
					for (OrderDetailVO odv : orders) {
						diningOrderInfo.setTotalAmount(diningOrderInfo.getTotalAmount().add(
							odv.getTotalAmount()));
						diningOrderInfo.setTotalGainMoney(diningOrderInfo.getTotalGainMoney().add(
							odv.getGainMoney()));
						diningOrderInfo.setTotalUserPointMoney(diningOrderInfo
							.getTotalUserPointMoney().add(odv.getUserPointAmount()));
						diningOrderInfo.setTotalGiftMoney(diningOrderInfo.getTotalGiftMoney().add(
							odv.getGiftMoney()));
						diningOrderInfo.setTotalPostFee(diningOrderInfo.getTotalPostFee().add(
							odv.getPostFee()));
						diningOrderInfo.setTotalDiliveryFee(diningOrderInfo.getTotalDiliveryFee()
							.add(odv.getDiliveryFee()));
					}
					diningOrderInfo.setOrderInfos(converProductInfos(orders));
					diningOrderInfos.add(diningOrderInfo);
					diningOrderInfo.setBatchNo(String.valueOf(orderDO.getBatchNo()));
				}
			}
			
			baseBatchResult.setPageList(diningOrderInfos);
			baseBatchResult.setSuccess(true);
			return baseBatchResult;
		} catch (IllegalArgumentException e) {
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.INCOMPLETE_REQ_PARAM);
		} catch (DataAccessException e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.DATABASE_EXCEPTION);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			baseBatchResult.setCreditsysResultEnum(EsupplierResultEnum.UN_KNOWN_EXCEPTION);
		}
		return baseBatchResult;
	}
	
	@Override
	public DiningOrderInfo findDiningOrderInfoByBatchNo(QueryOrderInfoSearchOrder searchOrder) {
		try {
			List<String> statusList = Lists.newArrayList();
			if (ListUtil.isNotEmpty(searchOrder.getStatusList())) {
				for (OrderStatusEnum statusEnum : searchOrder.getStatusList()) {
					statusList.add(statusEnum.code());
				}
			}
			List<OrderDetailVO> orders = tblOrderInfoSearchDAO.findSupplierOrderByBatchNo(
				NumberUtil.parseLong(searchOrder.getBatchNo()), searchOrder.getSupplierId(),
				searchOrder.getUserId());
			if (ListUtil.isNotEmpty(orders)) {
				DiningOrderInfo diningOrderInfo = new DiningOrderInfo();
				//				SupplierInfo supplierInfo = supplierService.getSupplier(orders.get(0)
				//					.getSupplierId());
				//				if (supplierInfo != null) {
				diningOrderInfo.setSupplierName(orders.get(0).getSupplierName());
				diningOrderInfo.setSupplierId(orders.get(0).getSupplierId());
				//				}
				for (OrderDetailVO odv : orders) {
					diningOrderInfo.setTotalAmount(diningOrderInfo.getTotalAmount().add(
						odv.getTotalAmount()));
					diningOrderInfo.setTotalGainMoney(diningOrderInfo.getTotalGainMoney().add(
						odv.getGainMoney()));
					diningOrderInfo.setTotalUserPointMoney(diningOrderInfo.getTotalUserPointMoney()
						.add(odv.getUserPointAmount()));
					diningOrderInfo.setTotalGiftMoney(diningOrderInfo.getTotalGiftMoney().add(
						odv.getGiftMoney()));
					diningOrderInfo.setTotalPostFee(diningOrderInfo.getTotalPostFee().add(
						odv.getPostFee()));
					diningOrderInfo.setTotalDiliveryFee(diningOrderInfo.getTotalDiliveryFee().add(
						odv.getDiliveryFee()));
				}
				diningOrderInfo.setOrderStatus(OrderStatusEnum.getByCode(orders.get(0)
					.getOrderStatus()));
				if (orders.get(0).getOrdersTime() == null) {
					diningOrderInfo.setConsumeTime(orders.get(0).getRawAddTime());
				} else {
					diningOrderInfo.setConsumeTime(orders.get(0).getOrdersTime());
				}
				diningOrderInfo.setDiningAddress(orders.get(0).getDetailAddress());
				diningOrderInfo.setReceiptTime(orders.get(0).getConfirmReceiptTime());
				diningOrderInfo.setDeliverTime(orders.get(0).getDeliverTime());
				diningOrderInfo.setDiningTime(orders.get(0).getDiningTime());
				diningOrderInfo.setOrderInfos(converProductInfos(orders));
				diningOrderInfo.setBatchNo(searchOrder.getBatchNo());
				if (orders.get(0).getDiliverymanId() > 0) {
					UserBaseInfoDO user = userBaseInfoDAO.findByUserId(orders.get(0)
						.getDiliverymanId());
					diningOrderInfo.setDiliverymanPhone(user.getMobile());
				}
				return diningOrderInfo;
			}
			
		} catch (DataAccessException e) {
			logger.error(e.getMessage(), e);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return null;
	}
	
}
