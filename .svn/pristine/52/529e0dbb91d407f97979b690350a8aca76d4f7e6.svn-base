/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.TblOrderInfoDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.TblOrderInfoDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.TblOrderInfoDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/tbl_order_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisTblOrderInfoDAO extends SqlMapClientDaoSupport implements TblOrderInfoDAO {
	/**
	 *  Insert one <tt>TblOrderInfoDO</tt> object to DB table <tt>tbl_order_info</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into tbl_order_info(id,province,city,county,detail_address,drawer_name,drawer_number,drawer_tel,zip_code,sale_type_o2o,sale_type_b2c,sale_type_order_meal,sale_type_hotels,product_vary,facade,special_explain,payment_method,order_status,create_time,user_id,buyer_nickname,operator_id,operator_time,area_code,supplier_name,supplier_id,supplier_nickname,resorts_business_id,resorts_business_name,resorts_business_real_name,post_fee,post_type,total_amount,is_payed,payed_time,confirm_receipt_time,take_ways,takegoods_id,workflow_status,refund_status,seller_memo,seller_delete,buyer_delete,raw_add_time,group_purchase_end_time,group_purchase_begin_time,del_status,qr_code,send_status,validation_status,send_time,validation_time,payment_flow_id,gain_money,gift_money,user_point,user_point_amount,batch_no,table_number_seq,table_number,tune_meal,print_receipt,diliveryman_id,diliveryman_name,dilivery_id,dilivery_name,dining_time,orders_time,deliver_time,dilivery_fee) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tblOrderInfo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(TblOrderInfoDO tblOrderInfo) throws DataAccessException {
    	if (tblOrderInfo == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TBL-ORDER-INFO-INSERT", tblOrderInfo);

        return tblOrderInfo.getId();
    }

	/**
	 *  Update DB table <tt>tbl_order_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_order_info set province=?, city=?, county=?, detail_address=?, drawer_name=?, drawer_number=?, drawer_tel=?, zip_code=?, sale_type_o2o=?, sale_type_b2c=?, sale_type_order_meal=?, sale_type_hotels=?, product_vary=?, facade=?, special_explain=?, payment_method=?, order_status=?, create_time=?, user_id=?, buyer_nickname=?, operator_id=?, operator_time=?, area_code=?, supplier_name=?, supplier_id=?, supplier_nickname=?, resorts_business_id=?, resorts_business_name=?, resorts_business_real_name=?, post_fee=?, post_type=?, total_amount=?, is_payed=?, payed_time=?, confirm_receipt_time=?, take_ways=?, takegoods_id=?, workflow_status=?, refund_status=?, seller_memo=?, seller_delete=?, buyer_delete=?, group_purchase_end_time=?, group_purchase_begin_time=?, del_status=?, qr_code=?, send_status=?, validation_status=?, send_time=?, validation_time=?, payment_flow_id=?, gain_money=?, gift_money=?, user_point=?, user_point_amount=?, batch_no=?, table_number_seq=?, table_number=?, tune_meal=?, print_receipt=?, diliveryman_id=?, diliveryman_name=?, dilivery_id=?, dilivery_name=?, dining_time=?, orders_time=?, deliver_time=?, dilivery_fee=? where (id = ?)</tt>
	 *
	 *	@param tblOrderInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TblOrderInfoDO tblOrderInfo) throws DataAccessException {
    	if (tblOrderInfo == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-TBL-ORDER-INFO-UPDATE", tblOrderInfo);
    }

	/**
	 *  Update DB table <tt>tbl_order_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_order_info set payment_flow_id=? where (id = ?)</tt>
	 *
	 *	@param paymentFlowId
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateFlowId(String paymentFlowId, long id) throws DataAccessException {
        Map param = new HashMap();

        param.put("paymentFlowId", paymentFlowId);
        param.put("id", new Long(id));

        return getSqlMapClientTemplate().update("MS-TBL-ORDER-INFO-UPDATE-FLOW-ID", param);
    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return TblOrderInfoDO
	 *	@throws DataAccessException
	 */	 
    public TblOrderInfoDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (TblOrderInfoDO) getSqlMapClientTemplate().queryForObject("MS-TBL-ORDER-INFO-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info where (payment_flow_id = ?)</tt>
	 *
	 *	@param paymentFlowId
	 *	@return List<TblOrderInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblOrderInfoDO> findByPaymentFlowId(String paymentFlowId) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TBL-ORDER-INFO-FIND-BY-PAYMENT-FLOW-ID", paymentFlowId);

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info where (1 = 1)</tt>
	 *
	 *	@param tblOrderInfo
	 *	@param qrCode
	 *	@param status
	 *	@param supplierId
	 *	@return TblOrderInfoDO
	 *	@throws DataAccessException
	 */	 
    public TblOrderInfoDO findByQrCode(TblOrderInfoDO tblOrderInfo, String qrCode, String status, long supplierId) throws DataAccessException {
    	if (tblOrderInfo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblOrderInfo", tblOrderInfo);
        param.put("qrCode", qrCode);
        param.put("status", status);
        param.put("supplierId", new Long(supplierId));

        return (TblOrderInfoDO) getSqlMapClientTemplate().queryForObject("MS-TBL-ORDER-INFO-FIND-BY-QR-CODE", param);

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info where (id = ?) for update</tt>
	 *
	 *	@param id
	 *	@return TblOrderInfoDO
	 *	@throws DataAccessException
	 */	 
    public TblOrderInfoDO findByIdForUpdate(long id) throws DataAccessException {
        Long param = new Long(id);

        return (TblOrderInfoDO) getSqlMapClientTemplate().queryForObject("MS-TBL-ORDER-INFO-FIND-BY-ID-FOR-UPDATE", param);

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info where (batch_no = ?)</tt>
	 *
	 *	@param batchNo
	 *	@return List<TblOrderInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblOrderInfoDO> findByBatchNo(long batchNo) throws DataAccessException {
        Long param = new Long(batchNo);

        return getSqlMapClientTemplate().queryForList("MS-TBL-ORDER-INFO-FIND-BY-BATCH-NO", param);

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info where (1 = 1)</tt>
	 *
	 *	@param tblOrderInfo
	 *	@param limitStart
	 *	@param pageSize
	 *	@param beginDate
	 *	@param endDate
	 *	@param statusList
	 *	@param batchNoList
	 *	@return List<TblOrderInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblOrderInfoDO> findByCondition(TblOrderInfoDO tblOrderInfo, long limitStart, long pageSize, Date beginDate, Date endDate, List statusList, List batchNoList) throws DataAccessException {
    	if (tblOrderInfo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblOrderInfo", tblOrderInfo);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("beginDate", beginDate);
        param.put("endDate", endDate);
        param.put("statusList", statusList);
        param.put("batchNoList", batchNoList);

        return getSqlMapClientTemplate().queryForList("MS-TBL-ORDER-INFO-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) totalCount from tbl_order_info where (1 = 1)</tt>
	 *
	 *	@param tblOrderInfo
	 *	@param beginDate
	 *	@param endDate
	 *	@param statusList
	 *	@param batchNoList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(TblOrderInfoDO tblOrderInfo, Date beginDate, Date endDate, List statusList, List batchNoList) throws DataAccessException {
    	if (tblOrderInfo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblOrderInfo", tblOrderInfo);
        param.put("beginDate", beginDate);
        param.put("endDate", endDate);
        param.put("statusList", statusList);
        param.put("batchNoList", batchNoList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-TBL-ORDER-INFO-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Delete records from DB table <tt>tbl_order_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_order_info where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-TBL-ORDER-INFO-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_order_info</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TBL-ORDER-INFO-FIND-ALL-COUNT", null);

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) totalCount from tbl_order_info where (1 = 1)</tt>
	 *
	 *	@param tblOrderInfo
	 *	@param beginDate
	 *	@param endDate
	 *	@param statusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByBatchNoCount(TblOrderInfoDO tblOrderInfo, Date beginDate, Date endDate, List statusList) throws DataAccessException {
    	if (tblOrderInfo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblOrderInfo", tblOrderInfo);
        param.put("beginDate", beginDate);
        param.put("endDate", endDate);
        param.put("statusList", statusList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-TBL-ORDER-INFO-FIND-BY-BATCH-NO-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info where (1 = 1)</tt>
	 *
	 *	@param tblOrderInfo
	 *	@param limitStart
	 *	@param pageSize
	 *	@param orderBy
	 *	@param beginDate
	 *	@param endDate
	 *	@param statusList
	 *	@return List<TblOrderInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblOrderInfoDO> findByBatchNoCondition(TblOrderInfoDO tblOrderInfo, long limitStart, long pageSize, String orderBy, Date beginDate, Date endDate, List statusList) throws DataAccessException {
    	if (tblOrderInfo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblOrderInfo", tblOrderInfo);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("orderBy", orderBy);
        param.put("beginDate", beginDate);
        param.put("endDate", endDate);
        param.put("statusList", statusList);

        return getSqlMapClientTemplate().queryForList("MS-TBL-ORDER-INFO-FIND-BY-BATCH-NO-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) totalCount from tbl_order_info where (1 = 1)</tt>
	 *
	 *	@param tblOrderInfo
	 *	@param statusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findDayDeliverCount(TblOrderInfoDO tblOrderInfo, List statusList) throws DataAccessException {
    	if (tblOrderInfo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblOrderInfo", tblOrderInfo);
        param.put("statusList", statusList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-TBL-ORDER-INFO-FIND-DAY-DELIVER-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return TblOrderInfoDO
	 *	@throws DataAccessException
	 */	 
    public TblOrderInfoDO findByUserIdAutoTest(long userId) throws DataAccessException {
        Long param = new Long(userId);

        return (TblOrderInfoDO) getSqlMapClientTemplate().queryForObject("MS-TBL-ORDER-INFO-FIND-BY-USER-ID-AUTO-TEST", param);

    }

	/**
	 *  Delete records from DB table <tt>tbl_order_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_order_info where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserIdAutoTest(long userId) throws DataAccessException {
        Long param = new Long(userId);

        return getSqlMapClientTemplate().delete("MS-TBL-ORDER-INFO-DELETE-BY-USER-ID-AUTO-TEST", param);
    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info where (supplier_id = ?)</tt>
	 *
	 *	@param supplierId
	 *	@return TblOrderInfoDO
	 *	@throws DataAccessException
	 */	 
    public TblOrderInfoDO findBySupplierIdAutoTest(long supplierId) throws DataAccessException {
        Long param = new Long(supplierId);

        return (TblOrderInfoDO) getSqlMapClientTemplate().queryForObject("MS-TBL-ORDER-INFO-FIND-BY-SUPPLIER-ID-AUTO-TEST", param);

    }

	/**
	 *  Delete records from DB table <tt>tbl_order_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_order_info where (supplier_id = ?)</tt>
	 *
	 *	@param supplierId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteBySupplierIdAutoTest(long supplierId) throws DataAccessException {
        Long param = new Long(supplierId);

        return getSqlMapClientTemplate().delete("MS-TBL-ORDER-INFO-DELETE-BY-SUPPLIER-ID-AUTO-TEST", param);
    }

	/**
	 *  Query DB table <tt>tbl_order_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_order_info o</tt>
	 *
	 *	@return List<TblOrderInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblOrderInfoDO> queryOutDateRefundOrder() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TBL-ORDER-INFO-QUERY-OUT-DATE-REFUND-ORDER", null);

    }

}