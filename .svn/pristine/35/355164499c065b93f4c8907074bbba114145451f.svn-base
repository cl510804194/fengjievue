package com.yjf.esupplier.common.util;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;

import com.yjf.common.lang.util.money.Money;

/**
 * 
 * 
 * @Filename MoneyUtil.java
 * 
 * @Description
 * 
 * @Version 1.0
 * 
 * @Author yhl
 * 
 * @Email yhailong@yiji.com
 * 
 * @History <li>Author: yhl</li> <li>Date: 2013-7-1</li> <li>Version: 1.0</li>
 * <li>Content: create</li>
 * 
 */
public class MoneyUtil {
	//金额显示格式
	private static final String FORMATTEXT = "###,##0";
	//显示精度
	private static int PRECISION = 2;
	//显示零
	private static String ZERO = "0.00";
	
	public static String getMoney(long m) {
		return new Money((m / 100), (int) (m % 100)).toString();
	}
	
	public static Money getMoneyByLong(long m) {
		Money money = new Money();
		money.setCent(m);
		return money;
	}
	
	/**
	 * 还需N万， 求N
	 * @param amount
	 * @param loanedamount
	 * @return
	 */
	
	public static double getMoneyByw(Money amount, Money loanedamount) {
		if (amount == null || loanedamount == null)
			return 0;
		return amount.subtract(loanedamount).getAmount().longValue() / 10000.00;
	}
	
	/**
	 * 还需N， 求N
	 * @param amount
	 * @param loanedamount
	 * @return
	 */
	
	public static Money getNeedMoney(Money amount, Money loanedamount) {
		return amount.subtract(loanedamount);
	}
	
	/**
	 * wan
	 * @param amount
	 * @return
	 */
	public static double getMoneyByw(Money amount) {
		if (amount == null)
			return 0;
		return (amount.getCent() / 1000000.00);
	}
	
	/**
	 * 不要小数
	 * @param amount
	 * @return
	 */
	public static long getMoneyInt(Money amount) {
		if (amount == null)
			return 0;
		return (amount.getCent() / 100);
	}
	
	/**
	 * 字符串转为long
	 * @param s
	 * @return
	 */
	public static long parseLong(String s) {
		return Long.parseLong(s);
	}
	
	/**
	 * 计算百分百
	 * @param molecular 分子
	 * @param denominator 分母
	 * @return
	 */
	public static String getPercentage(Money molecular, Money denominator, Money leastAmount) {
		//		if((denominator - molecular) < leastAmount){
		//			return "100%";
		//		}
		if (molecular == null || denominator == null || leastAmount == null)
			return "";
		if (denominator.getCent() == 0) {
			return "0.00%";
		}
		BigDecimal percent = molecular.getAmount()
			.divide(denominator.getAmount(), 4, BigDecimal.ROUND_HALF_EVEN)
			.multiply(new BigDecimal(100));
		
		float f = percent.setScale(PRECISION, BigDecimal.ROUND_HALF_UP).floatValue();
		return f + "%";
		
	}
	
	/**
	 * 格式化金额 input long
	 */
	
	public static String getFormatAmount(long formatAmount) {
		double fromAmount = formatAmount;
		double fenAmount = new BigDecimal(fromAmount / 100).setScale(PRECISION,
			BigDecimal.ROUND_HALF_UP).doubleValue();
		String amount = String.valueOf(fenAmount);
		if (amount == null || amount.length() < 1) {
			return ZERO;
		}
		NumberFormat formater = null;
		double number = Double.parseDouble(amount);
		if (PRECISION > 0) {
			StringBuffer buff = new StringBuffer();
			buff.append(FORMATTEXT).append(".");
			for (int i = 0; i < PRECISION; i++) {
				buff.append("0");
			}
			formater = new DecimalFormat(buff.toString());
		} else {
			formater = new DecimalFormat(FORMATTEXT);
		}
		return formater.format(number);
	}
	
	/**
	 * 数字金额大写转换，思想先写个完整的然后将如零拾替换成零 要用到正则表达式
	 */
	public static String digitUppercase(long formatAmount) {
		double fromAmount = formatAmount;
		double n = new BigDecimal(fromAmount / 100).setScale(PRECISION, BigDecimal.ROUND_HALF_UP)
			.doubleValue();
		String fraction[] = { "角", "分" };
		String digit[] = { "零", "壹", "贰", "叁", "肆", "伍", "陆", "柒", "捌", "玖" };
		String unit[][] = { { "元", "万", "亿" }, { "", "拾", "佰", "仟" } };
		String head = n < 0 ? "负" : "";
		n = Math.abs(n);
		String s = "";
		for (int i = 0; i < fraction.length; i++) {
			s += (digit[(int) (Math.floor(n * 10 * Math.pow(10, i)) % 10)] + fraction[i])
				.replaceAll("(零.)+", "");
		}
		if (s.length() < 1) {
			s = "整";
		}
		int integerPart = (int) Math.floor(n);
		for (int i = 0; i < unit[0].length && integerPart > 0; i++) {
			String p = "";
			for (int j = 0; j < unit[1].length && n > 0; j++) {
				p = digit[integerPart % 10] + unit[1][j] + p;
				integerPart = integerPart / 10;
			}
			s = p.replaceAll("(零.)*零$", "").replaceAll("^$", "零") + unit[0][i] + s;
		}
		return head
				+ s.replaceAll("(零.)*零元", "元").replaceFirst("(零.)+", "").replaceAll("(零.)+", "零")
					.replaceAll("^整$", "零元整");
	}
	
	/**
	 * 获取年华利率
	 * @param value
	 * @return
	 */
	public static double getPercentage(double value) {
		BigDecimal bg = new BigDecimal(value * 100);
		double d = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
		return d;
	}
	
	/**
	 * 将格式化后的金额转成double类型
	 * @param value
	 * @return
	 */
	public static double money2Double(String value) {
		if (StringUtil.isEmpty(value))
			return 0;
		String str = value.replaceAll(",", "");
		return Double.parseDouble(str);
	}
	
	/**
	 * 比较money
	 * @param value
	 * @return
	 */
	public static Boolean compareString(String value1,String value2) {
		Money money1,money2;
		if (StringUtil.isEmpty(value1))
			money1 = new Money(0);
		else
			money1 = new Money(value1);
		
		if(StringUtil.isEmpty(value2))
			money2 = new Money(0);
		else
			money2 = new Money(value2);
		
		if(money1.greaterThan(money2))
			return true;
		else
			return false;
	}
	
	public static void main(String[] args) {
		//System.out.println(getPercentage(99, 100, 2));
	}
}
