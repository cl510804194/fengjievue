/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.DivisionTemplateTradeDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.DivisionTemplateTradeDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.DivisionTemplateTradeDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/division_template_trade.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisDivisionTemplateTradeDAO extends SqlMapClientDaoSupport implements DivisionTemplateTradeDAO {
	/**
	 *  Insert one <tt>DivisionTemplateTradeDO</tt> object to DB table <tt>division_template_trade</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into division_template_trade(base_id,invest_template_id,repay_template_id) values (?, ?, ?)</tt>
	 *
	 *	@param divisionTemplateTrade
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(DivisionTemplateTradeDO divisionTemplateTrade) throws DataAccessException {
    	if (divisionTemplateTrade == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-DIVISION-TEMPLATE-TRADE-INSERT", divisionTemplateTrade);

        return divisionTemplateTrade.getBaseId();
    }

	/**
	 *  Update DB table <tt>division_template_trade</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update division_template_trade set invest_template_id=?, repay_template_id=? where (base_id = ?)</tt>
	 *
	 *	@param divisionTemplateTrade
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(DivisionTemplateTradeDO divisionTemplateTrade) throws DataAccessException {
    	if (divisionTemplateTrade == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-DIVISION-TEMPLATE-TRADE-UPDATE", divisionTemplateTrade);
    }

	/**
	 *  Query DB table <tt>division_template_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select base_id, invest_template_id, repay_template_id from division_template_trade where (base_id = ?)</tt>
	 *
	 *	@param baseId
	 *	@return DivisionTemplateTradeDO
	 *	@throws DataAccessException
	 */	 
    public DivisionTemplateTradeDO findById(long baseId) throws DataAccessException {
        Long param = new Long(baseId);

        return (DivisionTemplateTradeDO) getSqlMapClientTemplate().queryForObject("MS-DIVISION-TEMPLATE-TRADE-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>division_template_trade</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from division_template_trade where (base_id = ?)</tt>
	 *
	 *	@param baseId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long baseId) throws DataAccessException {
        Long param = new Long(baseId);

        return getSqlMapClientTemplate().delete("MS-DIVISION-TEMPLATE-TRADE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>division_template_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from division_template_trade</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-DIVISION-TEMPLATE-TRADE-FIND-ALL-COUNT", null);

    }

	/**
	 *  Query DB table <tt>division_template_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(base_id) from division_template_trade where ((invest_template_id = ?) OR (repay_template_id = ?))</tt>
	 *
	 *	@param investTemplateId
	 *	@param repayTemplateId
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long isUseByDivisionTemplateId(long investTemplateId, long repayTemplateId) throws DataAccessException {
        Map param = new HashMap();

        param.put("investTemplateId", new Long(investTemplateId));
        param.put("repayTemplateId", new Long(repayTemplateId));

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-DIVISION-TEMPLATE-TRADE-IS-USE-BY-DIVISION-TEMPLATE-ID", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>division_template_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select base_id, invest_template_id, repay_template_id from division_template_trade where (base_id = ?)</tt>
	 *
	 *	@param baseId
	 *	@return DivisionTemplateTradeDO
	 *	@throws DataAccessException
	 */	 
    public DivisionTemplateTradeDO findByBaseIdAutotest(long baseId) throws DataAccessException {
        Long param = new Long(baseId);

        return (DivisionTemplateTradeDO) getSqlMapClientTemplate().queryForObject("MS-DIVISION-TEMPLATE-TRADE-FIND-BY-BASE-ID-AUTOTEST", param);

    }

	/**
	 *  Query DB table <tt>division_template_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select base_id, invest_template_id, repay_template_id from division_template_trade where ((invest_template_id = ?) AND (repay_template_id = ?))</tt>
	 *
	 *	@param investTemplateId
	 *	@param repayTemplateId
	 *	@return DivisionTemplateTradeDO
	 *	@throws DataAccessException
	 */	 
    public DivisionTemplateTradeDO findByIdAutotest(long investTemplateId, long repayTemplateId) throws DataAccessException {
        Map param = new HashMap();

        param.put("investTemplateId", new Long(investTemplateId));
        param.put("repayTemplateId", new Long(repayTemplateId));

        return (DivisionTemplateTradeDO) getSqlMapClientTemplate().queryForObject("MS-DIVISION-TEMPLATE-TRADE-FIND-BY-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>division_template_trade</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from division_template_trade where ((invest_template_id = ?) AND (repay_template_id = ?))</tt>
	 *
	 *	@param investTemplateId
	 *	@param repayTemplateId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByIdAutotest(long investTemplateId, long repayTemplateId) throws DataAccessException {
        Map param = new HashMap();

        param.put("investTemplateId", new Long(investTemplateId));
        param.put("repayTemplateId", new Long(repayTemplateId));

        return getSqlMapClientTemplate().delete("MS-DIVISION-TEMPLATE-TRADE-DELETE-BY-ID-AUTOTEST", param);
    }

	/**
	 *  Delete records from DB table <tt>division_template_trade</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from division_template_trade where (base_id = ?)</tt>
	 *
	 *	@param baseId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByBaseIdAutotest(long baseId) throws DataAccessException {
        Long param = new Long(baseId);

        return getSqlMapClientTemplate().delete("MS-DIVISION-TEMPLATE-TRADE-DELETE-BY-BASE-ID-AUTOTEST", param);
    }

	/**
	 *  Insert one <tt>DivisionTemplateTradeDO</tt> object to DB table <tt>division_template_trade</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into division_template_trade(base_id,invest_template_id,repay_template_id) values (?, ?, ?)</tt>
	 *
	 *	@param divisionTemplateTrade
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(DivisionTemplateTradeDO divisionTemplateTrade) throws DataAccessException {
    	if (divisionTemplateTrade == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-DIVISION-TEMPLATE-TRADE-INSERT-AUTOTEST", divisionTemplateTrade);

        return divisionTemplateTrade.getBaseId();
    }

}