/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.TradeDetailItemDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.TradeDetailItemDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import com.yjf.common.lang.util.money.Money;
import java.util.HashMap;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.TradeDetailItemDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/trade_detail_item.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisTradeDetailItemDAO extends SqlMapClientDaoSupport implements TradeDetailItemDAO {
	/**
	 *  Insert one <tt>TradeDetailItemDO</tt> object to DB table <tt>trade_detail_item</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into trade_detail_item(trade_detail_id,user_id,user_name,real_name,role_id,trade_id,amount,original_amount,original_real_name,original_user_name,transfer_phase,create_date,note,profit_type,profit_rate,trade_flow_code,status,transfer_status,trade_source,repay_period_no,repay_period_count,repay_date,repay_principal_amount,actual_repay_date,ext_order) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tradeDetailItem
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(TradeDetailItemDO tradeDetailItem) throws DataAccessException {
    	if (tradeDetailItem == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TRADE-DETAIL-ITEM-INSERT", tradeDetailItem);

        return tradeDetailItem.getTradeDetailId();
    }

	/**
	 *  Update DB table <tt>trade_detail_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update trade_detail_item set user_id=?, user_name=?, real_name=?, role_id=?, trade_id=?, amount=?, original_amount=?, original_real_name=?, original_user_name=?, transfer_phase=?, create_date=?, note=?, profit_type=?, profit_rate=?, trade_flow_code=?, status=?, transfer_status=?, trade_source=?, repay_period_no=?, repay_period_count=?, repay_date=?, repay_principal_amount=?, actual_repay_date=?, ext_order=? where (trade_detail_id = ?)</tt>
	 *
	 *	@param tradeDetailItem
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TradeDetailItemDO tradeDetailItem) throws DataAccessException {
    	if (tradeDetailItem == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-TRADE-DETAIL-ITEM-UPDATE", tradeDetailItem);
    }

	/**
	 *  Query DB table <tt>trade_detail_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_detail_id, user_id, user_name, real_name, role_id, trade_id, amount, original_amount, original_real_name, original_user_name, transfer_phase, create_date, note, profit_type, profit_rate, trade_flow_code, status, transfer_status, trade_source, repay_period_no, repay_period_count, repay_date, repay_principal_amount, actual_repay_date, ext_order from trade_detail_item where (trade_detail_id = ?)</tt>
	 *
	 *	@param tradeDetailId
	 *	@return TradeDetailItemDO
	 *	@throws DataAccessException
	 */	 
    public TradeDetailItemDO findById(long tradeDetailId) throws DataAccessException {
        Long param = new Long(tradeDetailId);

        return (TradeDetailItemDO) getSqlMapClientTemplate().queryForObject("MS-TRADE-DETAIL-ITEM-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>trade_detail_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from trade_detail_item where (trade_detail_id = ?)</tt>
	 *
	 *	@param tradeDetailId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long tradeDetailId) throws DataAccessException {
        Long param = new Long(tradeDetailId);

        return getSqlMapClientTemplate().delete("MS-TRADE-DETAIL-ITEM-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>trade_detail_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from trade_detail_item where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByTradeId(long tradeId) throws DataAccessException {
        Long param = new Long(tradeId);

        return getSqlMapClientTemplate().delete("MS-TRADE-DETAIL-ITEM-DELETE-BY-TRADE-ID", param);
    }

	/**
	 *  Query DB table <tt>trade_detail_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from trade_detail_item</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TRADE-DETAIL-ITEM-FIND-ALL-COUNT", null);

    }

	/**
	 *  Query DB table <tt>trade_detail_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_detail_id, user_id, user_name, real_name, role_id, trade_id, amount, original_amount, original_real_name, original_user_name, transfer_phase, create_date, note, profit_type, profit_rate, trade_flow_code, status, transfer_status, trade_source, repay_period_no, repay_period_count, repay_date, repay_principal_amount, actual_repay_date, ext_order from trade_detail_item where ((trade_id = ?) AND (transfer_phase = ?) AND (role_id = ?) AND (transfer_status = 'NOT_TRANSFER')) order by create_date ASC</tt>
	 *
	 *	@param tradeId
	 *	@param transferPhase
	 *	@param roleId
	 *	@return List<TradeDetailItemDO>
	 *	@throws DataAccessException
	 */	 
    public List<TradeDetailItemDO> findByAllInvestor(long tradeId, String transferPhase, int roleId) throws DataAccessException {
        Map param = new HashMap();

        param.put("tradeId", new Long(tradeId));
        param.put("transferPhase", transferPhase);
        param.put("roleId", new Integer(roleId));

        return getSqlMapClientTemplate().queryForList("MS-TRADE-DETAIL-ITEM-FIND-BY-ALL-INVESTOR", param);

    }

	/**
	 *  Query DB table <tt>trade_detail_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_detail_id, user_id, user_name, real_name, role_id, trade_id, amount, original_amount, original_real_name, original_user_name, transfer_phase, create_date, note, profit_type, profit_rate, trade_flow_code, status, transfer_status, trade_source, repay_period_no, repay_period_count, repay_date, repay_principal_amount, actual_repay_date, ext_order from trade_detail_item order by create_date ASC</tt>
	 *
	 *	@param tradeId
	 *	@param userId
	 *	@param roleId
	 *	@param repayPeriodNo
	 *	@param detailStatus
	 *	@param transferPhase
	 *	@param tradeDetailId
	 *	@param limitStart
	 *	@param pageSize
	 *	@param startDate
	 *	@param endDate
	 *	@param startRepayDate
	 *	@param endRepayDate
	 *	@param startActualRepayDate
	 *	@param endActualRepayDate
	 *	@param startAmount
	 *	@param endAmount
	 *	@param userName
	 *	@param realName
	 *	@param profitType
	 *	@return List<TradeDetailItemDO>
	 *	@throws DataAccessException
	 */	 
    public List<TradeDetailItemDO> findByUserDetail(long tradeId, long userId, long roleId, int repayPeriodNo, String detailStatus, String transferPhase, String tradeDetailId, long limitStart, long pageSize, Date startDate, Date endDate, Date startRepayDate, Date endRepayDate, Date startActualRepayDate, Date endActualRepayDate, Money startAmount, Money endAmount, String userName, String realName, String profitType,String hasTradeFail) throws DataAccessException {
        Map param = new HashMap();

        param.put("tradeId", new Long(tradeId));
        param.put("userId", new Long(userId));
        param.put("roleId", new Long(roleId));
        param.put("repayPeriodNo", new Integer(repayPeriodNo));
        param.put("detailStatus", detailStatus);
        param.put("transferPhase", transferPhase);
        param.put("tradeDetailId", tradeDetailId);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("startDate", startDate);
        param.put("endDate", endDate);
        param.put("startRepayDate", startRepayDate);
        param.put("endRepayDate", endRepayDate);
        param.put("startActualRepayDate", startActualRepayDate);
        param.put("endActualRepayDate", endActualRepayDate);
        param.put("startAmount", startAmount);
        param.put("endAmount", endAmount);
        param.put("userName", userName);
        param.put("realName", realName);
        param.put("profitType", profitType);
        param.put("hasTradeFail", hasTradeFail);

        return getSqlMapClientTemplate().queryForList("MS-TRADE-DETAIL-ITEM-FIND-BY-USER-DETAIL", param);

    }

	/**
	 *  Query DB table <tt>trade_detail_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) totalCount, sum(amount) totalAmount from trade_detail_item</tt>
	 *
	 *	@param tradeId
	 *	@param userId
	 *	@param roleId
	 *	@param repayPeriodNo
	 *	@param detailStatus
	 *	@param transferPhase
	 *	@param tradeDetailId
	 *	@param startDate
	 *	@param endDate
	 *	@param startRepayDate
	 *	@param endRepayDate
	 *	@param startActualRepayDate
	 *	@param endActualRepayDate
	 *	@param startAmount
	 *	@param endAmount
	 *	@param userName
	 *	@param realName
	 *	@param profitType
	 *	@return HashMap
	 *	@throws DataAccessException
	 */	 
    public HashMap findByCountUserDetail(long tradeId, long userId, long roleId, int repayPeriodNo, String detailStatus, String transferPhase, String tradeDetailId, Date startDate, Date endDate, Date startRepayDate, Date endRepayDate, Date startActualRepayDate, Date endActualRepayDate, Money startAmount, Money endAmount, String userName, String realName, String profitType,String hasTradeFail) throws DataAccessException {
        Map param = new HashMap();

        param.put("tradeId", new Long(tradeId));
        param.put("userId", new Long(userId));
        param.put("roleId", new Long(roleId));
        param.put("repayPeriodNo", new Integer(repayPeriodNo));
        param.put("detailStatus", detailStatus);
        param.put("transferPhase", transferPhase);
        param.put("tradeDetailId", tradeDetailId);
        param.put("startDate", startDate);
        param.put("endDate", endDate);
        param.put("startRepayDate", startRepayDate);
        param.put("endRepayDate", endRepayDate);
        param.put("startActualRepayDate", startActualRepayDate);
        param.put("endActualRepayDate", endActualRepayDate);
        param.put("startAmount", startAmount);
        param.put("endAmount", endAmount);
        param.put("userName", userName);
        param.put("realName", realName);
        param.put("profitType", profitType);
        param.put("hasTradeFail",hasTradeFail);

        return (HashMap) getSqlMapClientTemplate().queryForObject("MS-TRADE-DETAIL-ITEM-FIND-BY-COUNT-USER-DETAIL", param);

    }

	/**
	 *  Query DB table <tt>trade_detail_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select sum(amount) amount, role_id, profit_type, transfer_phase from trade_detail_item where ((trade_id = ?) AND (transfer_status = 'NOT_TRANSFER')) group by role_id, profit_type, transfer_phase</tt>
	 *
	 *	@param tradeId
	 *	@return List<TradeDetailItemDO>
	 *	@throws DataAccessException
	 */	 
    public List<TradeDetailItemDO> sumAmountBytradeId(long tradeId) throws DataAccessException {
        Long param = new Long(tradeId);

        return getSqlMapClientTemplate().queryForList("MS-TRADE-DETAIL-ITEM-SUM-AMOUNT-BYTRADE-ID", param);

    }

	/**
	 *  Query DB table <tt>trade_detail_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_detail_id, user_id, user_name, real_name, role_id, trade_id, amount, original_amount, original_real_name, original_user_name, transfer_phase, create_date, note, profit_type, profit_rate, trade_flow_code, status, transfer_status, trade_source, repay_period_no, repay_period_count, repay_date, repay_principal_amount, actual_repay_date, ext_order from trade_detail_item where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return TradeDetailItemDO
	 *	@throws DataAccessException
	 */	 
    public TradeDetailItemDO findByTradeIdAutotest(long tradeId) throws DataAccessException {
        Long param = new Long(tradeId);

        return (TradeDetailItemDO) getSqlMapClientTemplate().queryForObject("MS-TRADE-DETAIL-ITEM-FIND-BY-TRADE-ID-AUTOTEST", param);

    }

	/**
	 *  Query DB table <tt>trade_detail_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_detail_id, user_id, user_name, real_name, role_id, trade_id, amount, original_amount, original_real_name, original_user_name, transfer_phase, create_date, note, profit_type, profit_rate, trade_flow_code, status, transfer_status, trade_source, ext_order, repay_date, actual_repay_date, repay_period_no, repay_principal_amount, repay_period_count from trade_detail_item where (trade_detail_id = ?)</tt>
	 *
	 *	@param tradeDetailId
	 *	@return TradeDetailItemDO
	 *	@throws DataAccessException
	 */	 
    public TradeDetailItemDO findByIdAutotest(long tradeDetailId) throws DataAccessException {
        Long param = new Long(tradeDetailId);

        return (TradeDetailItemDO) getSqlMapClientTemplate().queryForObject("MS-TRADE-DETAIL-ITEM-FIND-BY-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>trade_detail_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from trade_detail_item where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByTradeIdAutotest(long tradeId) throws DataAccessException {
        Long param = new Long(tradeId);

        return getSqlMapClientTemplate().delete("MS-TRADE-DETAIL-ITEM-DELETE-BY-TRADE-ID-AUTOTEST", param);
    }

	/**
	 *  Delete records from DB table <tt>trade_detail_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from trade_detail_item where (trade_detail_id = ?)</tt>
	 *
	 *	@param tradeDetailId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByTradeDetailIdAutotest(long tradeDetailId) throws DataAccessException {
        Long param = new Long(tradeDetailId);

        return getSqlMapClientTemplate().delete("MS-TRADE-DETAIL-ITEM-DELETE-BY-TRADE-DETAIL-ID-AUTOTEST", param);
    }

	/**
	 *  Query DB table <tt>trade_detail_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_detail_id, user_id, user_name, real_name, role_id, trade_id, amount, original_amount, original_real_name, original_user_name, transfer_phase, create_date, note, profit_type, profit_rate, trade_flow_code, status, transfer_status, trade_source, repay_period_no, repay_period_count, repay_date, repay_principal_amount, actual_repay_date, ext_order from trade_detail_item where (trade_id = ?) order by trade_detail_id ASC</tt>
	 *
	 *	@param tradeId
	 *	@return List<TradeDetailItemDO>
	 *	@throws DataAccessException
	 */	 
    public List<TradeDetailItemDO> findByTradeIdAllAutotest(long tradeId) throws DataAccessException {
        Long param = new Long(tradeId);

        return getSqlMapClientTemplate().queryForList("MS-TRADE-DETAIL-ITEM-FIND-BY-TRADE-ID-ALL-AUTOTEST", param);

    }

	/**
	 *  Insert one <tt>TradeDetailItemDO</tt> object to DB table <tt>trade_detail_item</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into trade_detail_item(trade_detail_id,user_id,user_name,real_name,role_id,trade_id,amount,original_amount,original_real_name,original_user_name,transfer_phase,create_date,note,profit_type,profit_rate,trade_flow_code,status,transfer_status,trade_source,repay_period_no,repay_period_count,repay_date,repay_principal_amount,actual_repay_date,ext_order) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tradeDetailItem
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(TradeDetailItemDO tradeDetailItem) throws DataAccessException {
    	if (tradeDetailItem == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TRADE-DETAIL-ITEM-INSERT-AUTOTEST", tradeDetailItem);

        return tradeDetailItem.getTradeDetailId();
    }

}