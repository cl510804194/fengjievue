/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.ContractDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.ContractDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.ContractDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/contract.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisContractDAO extends SqlMapClientDaoSupport implements ContractDAO {
	/**
	 *  Insert one <tt>ContractDO</tt> object to DB table <tt>contract</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into contract(contract_id,store_id,user_id,user_name,customer_name,mobile_number,yjf_account_id,yjf_account_name,penalty_amount,loan_type,loan_purpose,commodity_type,commodity_amount,percentage_amount,stages_num,loan_amount,down_payment,monthly_amount,monthly_loan_time,frist_loan_time,loan_bank_number,bank,post_address,refund_status,status,take_status,take_user_id,audit_time,audit_user_id,audit_user_name,match_status,match_time,match_user_id,match_user_name,settlement_status,audit_remark,match_remark,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param contract
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(ContractDO contract) throws DataAccessException {
    	if (contract == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-CONTRACT-INSERT", contract);

        return contract.getContractId();
    }

	/**
	 *  Update DB table <tt>contract</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update contract set store_id=?, user_id=?, user_name=?, customer_name=?, mobile_number=?, yjf_account_id=?, yjf_account_name=?, penalty_amount=?, loan_type=?, loan_purpose=?, commodity_type=?, commodity_amount=?, percentage_amount=?, stages_num=?, loan_amount=?, down_payment=?, monthly_amount=?, monthly_loan_time=?, frist_loan_time=?, loan_bank_number=?, bank=?, post_address=?, refund_status=?, status=?, take_status=?, take_user_id=?, audit_time=?, audit_user_id=?, audit_user_name=?, match_status=?, match_time=?, match_user_id=?, match_user_name=?, settlement_status=?, audit_remark=?, match_remark=? where (contract_id = ?)</tt>
	 *
	 *	@param contract
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ContractDO contract) throws DataAccessException {
    	if (contract == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-CONTRACT-UPDATE", contract);
    }

	/**
	 *  Query DB table <tt>contract</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select contract_id, store_id, user_id, user_name, customer_name, mobile_number, yjf_account_id, yjf_account_name, penalty_amount, loan_type, loan_purpose, commodity_type, commodity_amount, percentage_amount, stages_num, loan_amount, down_payment, monthly_amount, monthly_loan_time, frist_loan_time, loan_bank_number, bank, post_address, refund_status, status, take_status, take_user_id, audit_time, audit_user_id, audit_user_name, match_status, match_time, match_user_id, match_user_name, settlement_status, audit_remark, match_remark, raw_add_time, raw_update_time from contract where (contract_id = ?)</tt>
	 *
	 *	@param contractId
	 *	@return ContractDO
	 *	@throws DataAccessException
	 */	 
    public ContractDO findById(String contractId) throws DataAccessException {

        return (ContractDO) getSqlMapClientTemplate().queryForObject("MS-CONTRACT-FIND-BY-ID", contractId);

    }

	/**
	 *  Query DB table <tt>contract</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select contract_id, store_id, user_id, user_name, customer_name, mobile_number, yjf_account_id, yjf_account_name, penalty_amount, loan_type, loan_purpose, commodity_type, commodity_amount, percentage_amount, stages_num, loan_amount, down_payment, monthly_amount, monthly_loan_time, frist_loan_time, loan_bank_number, bank, post_address, refund_status, status, take_status, take_user_id, audit_time, audit_user_id, audit_user_name, match_status, match_time, match_user_id, match_user_name, settlement_status, audit_remark, match_remark, raw_add_time, raw_update_time from contract where (contract_id = ?) for update</tt>
	 *
	 *	@param contractId
	 *	@return ContractDO
	 *	@throws DataAccessException
	 */	 
    public ContractDO findByIdForUpdate(String contractId) throws DataAccessException {

        return (ContractDO) getSqlMapClientTemplate().queryForObject("MS-CONTRACT-FIND-BY-ID-FOR-UPDATE", contractId);

    }

	/**
	 *  Delete records from DB table <tt>contract</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from contract where (contract_id = ?)</tt>
	 *
	 *	@param contractId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(String contractId) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-CONTRACT-DELETE-BY-ID", contractId);
    }

	/**
	 *  Query DB table <tt>contract</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from contract</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-CONTRACT-FIND-ALL-COUNT", null);

    }

	/**
	 *  Query DB table <tt>contract</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select contract_id, store_id, user_id, user_name, customer_name, mobile_number, yjf_account_id, yjf_account_name, penalty_amount, loan_type, loan_purpose, commodity_type, commodity_amount, percentage_amount, stages_num, loan_amount, down_payment, monthly_amount, monthly_loan_time, frist_loan_time, loan_bank_number, bank, post_address, refund_status, status, take_status, take_user_id, audit_time, audit_user_id, audit_user_name, match_status, match_time, match_user_id, match_user_name, settlement_status, audit_remark, match_remark, raw_add_time, raw_update_time from contract where (1 = 1)</tt>
	 *
	 *	@param contract
	 *	@param limitStart
	 *	@param pageSize
	 *	@param startRawAddTime
	 *	@param endRawAddTime
	 *	@return List<ContractDO>
	 *	@throws DataAccessException
	 */	 
    public List<ContractDO> findContractByCondition(ContractDO contract, long limitStart, long pageSize, Date startRawAddTime, Date endRawAddTime) throws DataAccessException {
    	if (contract == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("contract", contract);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("startRawAddTime", startRawAddTime);
        param.put("endRawAddTime", endRawAddTime);

        return getSqlMapClientTemplate().queryForList("MS-CONTRACT-FIND-CONTRACT-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>contract</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from contract</tt>
	 *
	 *	@param contract
	 *	@param startRawAddTime
	 *	@param endRawAddTime
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findCountByCondition(ContractDO contract, Date startRawAddTime, Date endRawAddTime) throws DataAccessException {
    	if (contract == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("contract", contract);
        param.put("startRawAddTime", startRawAddTime);
        param.put("endRawAddTime", endRawAddTime);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-CONTRACT-FIND-COUNT-BY-CONDITION", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}