/*
 * www.yiji.com Inc.
 * Copyright (c) 2014 All Rights Reserved.
 */

/*
 * 修订记录：
 * zeyong 2014-11-4 上午11:30:34 创建
 */
package com.yjf.esupplier.service.recharge.impl;

import java.util.Date;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;

import com.yjf.common.lang.beans.cglib.BeanCopier;
import com.yjf.esupplier.service.recharge.FundsFlowServiceBase;
import com.yjf.esupplier.service.recharge.RechargeFlowService;
import com.yjf.esupplier.service.recharge.WithdrawFlowService;
import com.yjf.esupplier.service.recharge.order.WithdrawFlowOrder;
import com.yjf.esupplier.ws.enums.ExtPayTypeEnum;
import com.yjf.esupplier.ws.info.RechargeFlowInfo;

/**
 * 
 * 
 * @author zeyong
 * 
 */
@Service("withdrawFlowService")
public class WithdrawFlowServiceImpl extends FundsFlowServiceBase implements WithdrawFlowService {
	
	@Resource
	private RechargeFlowService rechargeFlowService;
	
	@Autowired
	protected TransactionTemplate transactionTemplate;
	
	/**
	 * @param order
	 * @return
	 * @throws Exception
	 * @see com.yjf.yrd.service.recharge.WithdrawFlowService#save(com.yjf.yrd.service.recharge.order.WithdrawFlowOrder)
	 */
	@Transactional
	@Override
	public long save(final WithdrawFlowOrder order) throws Exception {
		final RechargeFlowInfo rechargeFlow = new RechargeFlowInfo();
		
		BeanCopier.staticCopy(order, rechargeFlow);
		rechargeFlow.setInOutType("out");
		rechargeFlow.setPayTime(new Date());
		rechargeFlow.setPayType(ExtPayTypeEnum.WITHDRAW);
		rechargeFlow.setUserId(order.getOutUserId());
		long id = transactionTemplate.execute(new TransactionCallback<Integer>() {
			
			@Override
			public Integer doInTransaction(TransactionStatus status) {
				try {
					if (order.getStatus() == 1) {
						if (order.getAmountCharge().getCent() > 0) {
							RechargeFlowInfo feeFlow = new RechargeFlowInfo();
							BeanCopier.staticCopy(rechargeFlow, feeFlow);
							feeFlow.setInOutType("out");
							feeFlow.setPayType(ExtPayTypeEnum.CHARGEFEE);
							feeFlow.setAmount(order.getAmountCharge());
							feeFlow.setStatus(order.getStatus());
							feeFlow.setOutUserId(order.getOutUserId());
							feeFlow.setPayTime(new Date());
							feeFlow.setOutBizNo(feeFlow.getOutBizNo() + "_fee");
							rechargeFlowService.addRechargeFlow(feeFlow);
						}
					}
					return (int) rechargeFlowService.addRechargeFlow(rechargeFlow);
				} catch (Exception e) {
					logger.error(e.getMessage(), e);
					return 0;
				}
			}
		});
		return id;
	}
	
	/**
	 * @param order
	 * @return
	 * @see com.yjf.yrd.service.recharge.WithdrawFlowService#update(com.yjf.yrd.service.recharge.order.WithdrawFlowOrder)
	 */
	@Override
	public int update(final WithdrawFlowOrder order) {
		final RechargeFlowInfo rechargeFlowInfo = queryByOutBizNo(order.getOutBizNo());
		
		if (rechargeFlowInfo == null || rechargeFlowInfo.getStatus() == 1)
			return 0;
		if (rechargeFlowInfo.getStatus() == rechargeFlowInfo.getStatus())
			return 0;
		final RechargeFlowInfo rechargeFlow = new RechargeFlowInfo();
		BeanCopier.staticCopy(order, rechargeFlow);
		rechargeFlow.setInOutType("out");
		rechargeFlow.setPayTime(new Date());
		
		int id = transactionTemplate.execute(new TransactionCallback<Integer>() {
			
			@Override
			public Integer doInTransaction(TransactionStatus status) {
				try {
					if (order.getStatus() == 1) {
						if (order.getAmountCharge().getCent() > 0) {
							RechargeFlowInfo feeFlow = new RechargeFlowInfo();
							BeanCopier.staticCopy(rechargeFlowInfo, feeFlow);
							feeFlow.setFlowId(0l);
							feeFlow.setInOutType("out");
							feeFlow.setPayType(ExtPayTypeEnum.CHARGEFEE);
							feeFlow.setAmount(order.getAmountCharge());
							feeFlow.setStatus(order.getStatus());
							feeFlow.setPayTime(new Date());
							feeFlow.setOutBizNo(feeFlow.getOutBizNo() + "_fee");
							rechargeFlowService.addRechargeFlow(feeFlow);
						}
					}
					
					return (int) rechargeFlowService.update(rechargeFlow);
					
				} catch (Exception e) {
					logger.error(e.getMessage(), e);
					return -1;
				}
			}
		});
		return id;
	}
	
}
