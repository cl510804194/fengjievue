/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.DivisionRuleDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>division_rule</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/division_rule.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface DivisionRuleDAO {
	/**
	 *  Insert one <tt>DivisionRuleDO</tt> object to DB table <tt>division_rule</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into division_rule(rule_id,role_id,rule_template_id,division_rule) values (?, ?, ?, ?)</tt>
	 *
	 *	@param divisionRule
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(DivisionRuleDO divisionRule) throws DataAccessException;

	/**
	 *  Update DB table <tt>division_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update division_rule set role_id=?, rule_template_id=?, division_rule=? where (rule_id = ?)</tt>
	 *
	 *	@param divisionRule
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(DivisionRuleDO divisionRule) throws DataAccessException;

	/**
	 *  Query DB table <tt>division_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select rule_id, role_id, rule_template_id, division_rule from division_rule where (rule_id = ?)</tt>
	 *
	 *	@param ruleId
	 *	@return DivisionRuleDO
	 *	@throws DataAccessException
	 */	 
    public DivisionRuleDO findById(long ruleId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>division_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from division_rule where (rule_id = ?)</tt>
	 *
	 *	@param ruleId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long ruleId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>division_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from division_rule where (rule_template_id = ?)</tt>
	 *
	 *	@param ruleTemplateId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByTemplateId(long ruleTemplateId) throws DataAccessException;

	/**
	 *  Query DB table <tt>division_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select rule_id, role_id, rule_template_id, division_rule from division_rule where (rule_template_id = ?)</tt>
	 *
	 *	@param ruleTemplateId
	 *	@return List<DivisionRuleDO>
	 *	@throws DataAccessException
	 */	 
    public List<DivisionRuleDO> findRuleByTemplateId(long ruleTemplateId) throws DataAccessException;

	/**
	 *  Query DB table <tt>division_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from division_rule</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>division_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from division_rule where (rule_template_id = ?)</tt>
	 *
	 *	@param ruleTemplateId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByRuleTemplateIdAutotest(long ruleTemplateId) throws DataAccessException;

	/**
	 *  Query DB table <tt>division_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select rule_id, role_id, rule_template_id, division_rule from division_rule where ((role_id = ?) AND (rule_template_id = ?))</tt>
	 *
	 *	@param roleId
	 *	@param ruleTemplateId
	 *	@return DivisionRuleDO
	 *	@throws DataAccessException
	 */	 
    public DivisionRuleDO findRuleByRoleIdAndTemplateIdAutotest(int roleId, long ruleTemplateId) throws DataAccessException;

	/**
	 *  Query DB table <tt>division_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select rule_id, role_id, rule_template_id, division_rule from division_rule where (rule_template_id = ?)</tt>
	 *
	 *	@param ruleTemplateId
	 *	@return DivisionRuleDO
	 *	@throws DataAccessException
	 */	 
    public DivisionRuleDO findByRuleTemplateIdAutotest(long ruleTemplateId) throws DataAccessException;

}