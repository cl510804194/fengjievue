<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table user_base_info -->
    <resultMap id="RM-USER-BASE-INFO" class="com.yjf.esupplier.dal.dataobject.UserBaseInfoDO">
        <result property="userBaseId" column="user_base_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userId" column="user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="userName" column="user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="nickname" column="nickname" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="realName" column="real_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="logPassword" column="log_password" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="payPassword" column="pay_password" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="accountId" column="account_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="accountName" column="account_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="mobile" column="mobile" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="mobileBinding" column="mobile_binding" javaType="java.lang.String" jdbcType="ENUM"/>
        <result property="mail" column="mail" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="mailBinding" column="mail_binding" javaType="java.lang.String" jdbcType="ENUM"/>
        <result property="type" column="type" javaType="java.lang.String" jdbcType="ENUM"/>
        <result property="state" column="state" javaType="java.lang.String" jdbcType="ENUM"/>
        <result property="rowAddTime" column="row_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rowUpdateTime" column="row_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="identityName" column="identity_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="identityStartNo" column="identity_start_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="identityEndNo" column="identity_end_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="exIdentityNo" column="ex_identity_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="realNameAuthentication" column="real_name_authentication" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="pwdErrorCount" column="pwd_error_count" javaType="int" jdbcType="INT" nullValue="0"/>
        <result property="changeLockTime" column="change_lock_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="userLevel" column="user_level" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userRealStatus" column="user_real_status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="certifyLevel" column="certify_level" javaType="int" jdbcType="INT" nullValue="0"/>
        <result property="userProvince" column="user_province" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userCounty" column="user_county" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userCity" column="user_city" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="fixedPhone" column="fixed_phone" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="zip" column="zip" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="birthday" column="birthday" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="qq" column="qq" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="belongTo" column="belong_to" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="userCustomType" column="user_custom_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userCustomType1" column="user_custom_type1" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userCustomType2" column="user_custom_type2" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="enterpriseType" column="enterprise_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userRegisterFrom" column="user_register_from" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="appRegisterFrom" column="app_register_from" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="linkCode" column="link_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="operatePassword" column="operate_password" javaType="java.lang.String" jdbcType="VARCHAR"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisUserBaseInfoDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisUserBaseInfoDAO.insert -->
    <insert id="MS-USER-BASE-INFO-INSERT">
    <![CDATA[
        insert /*MS-ESUPPLIER-USER-BASE-INFO-INSERT*/ into user_base_info(user_base_id,user_id,user_name,nickname,real_name,log_password,pay_password,account_id,account_name,mobile,mobile_binding,mail,mail_binding,type,state,row_add_time,row_update_time,identity_name,identity_start_no,identity_end_no,ex_identity_no,real_name_authentication,pwd_error_count,change_lock_time,user_level,user_real_status,certify_level,user_province,user_county,user_city,fixed_phone,zip,birthday,qq,belong_to,user_custom_type,user_custom_type1,user_custom_type2,enterprise_type,user_register_from,app_register_from,link_code,operate_password) values (#userBaseId#, #userId#, #userName#, #nickname#, #realName#, #logPassword#, #payPassword#, #accountId#, #accountName#, #mobile#, #mobileBinding#, #mail#, #mailBinding#, #type#, #state#, #rowAddTime#, #rowUpdateTime#, #identityName#, #identityStartNo#, #identityEndNo#, #exIdentityNo#, #realNameAuthentication#, #pwdErrorCount#, #changeLockTime#, #userLevel#, #userRealStatus#, #certifyLevel#, #userProvince#, #userCounty#, #userCity#, #fixedPhone#, #zip#, #birthday#, #qq#, #belongTo#, #userCustomType#, #userCustomType1#, #userCustomType2#, #enterpriseType#, #userRegisterFrom#, #appRegisterFrom#, #linkCode#, #operatePassword#)
    ]]>
    </insert>

    <!-- mapped statement for IbatisUserBaseInfoDAO.update -->
    <update id="MS-USER-BASE-INFO-UPDATE">
    <![CDATA[
        update /*MS-ESUPPLIER-USER-BASE-INFO-UPDATE*/ user_base_info set user_id=#userId#, user_name=#userName#, nickname=#nickname#, real_name=#realName#, log_password=#logPassword#, pay_password=#payPassword#, account_id=#accountId#, account_name=#accountName#, mobile=#mobile#, mobile_binding=#mobileBinding#, mail=#mail#, mail_binding=#mailBinding#, type=#type#, state=#state#, row_add_time=#rowAddTime#, row_update_time=#rowUpdateTime#, identity_name=#identityName#, identity_start_no=#identityStartNo#, identity_end_no=#identityEndNo#, ex_identity_no=#exIdentityNo#, real_name_authentication=#realNameAuthentication#, pwd_error_count=#pwdErrorCount#, change_lock_time=#changeLockTime#, user_level=#userLevel#, user_real_status=#userRealStatus#, certify_level=#certifyLevel#, user_province=#userProvince#, user_county=#userCounty#, user_city=#userCity#, fixed_phone=#fixedPhone#, zip=#zip#, birthday=#birthday#, qq=#qq#, belong_to=#belongTo#, user_custom_type=#userCustomType#, user_custom_type1=#userCustomType1#, user_custom_type2=#userCustomType2#, enterprise_type=#enterpriseType#, user_register_from=#userRegisterFrom#, app_register_from=#appRegisterFrom#, link_code=#linkCode#, operate_password=#operatePassword# where (user_base_id = #userBaseId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByUserBaseId -->
    <select id="MS-USER-BASE-INFO-FIND-BY-USER-BASE-ID" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-USER-BASE-ID*/ * from user_base_info where (user_base_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByAccountName -->
    <select id="MS-USER-BASE-INFO-FIND-BY-ACCOUNT-NAME" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-ACCOUNT-NAME*/ * from user_base_info where (account_name = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByUserId -->
    <select id="MS-USER-BASE-INFO-FIND-BY-USER-ID" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-USER-ID*/ * from user_base_info where (user_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByUserIdForUpdate -->
    <select id="MS-USER-BASE-INFO-FIND-BY-USER-ID-FOR-UPDATE" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-USER-ID-FOR-UPDATE*/ * from user_base_info where (user_id = #value#) for update
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByUserName -->
    <select id="MS-USER-BASE-INFO-FIND-BY-USER-NAME" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-USER-NAME*/ distinct u.* from user_base_info u, user_login l where ((u.user_id = l.user_id) AND (user_name = #value#))
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByMobile -->
    <select id="MS-USER-BASE-INFO-FIND-BY-MOBILE" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-MOBILE*/ distinct u.* from user_base_info u, user_login l where ((u.user_id = l.user_id) AND (mobile = #value#))
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByLinkCode -->
    <select id="MS-USER-BASE-INFO-FIND-BY-LINK-CODE" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-LINK-CODE*/ * from user_base_info where (link_code = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByCondAndRole -->
    <select id="MS-USER-BASE-INFO-FIND-BY-COND-AND-ROLE" resultMap="RM-USER-BASE-INFO">
        SELECT /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-COND-AND-ROLE*/    *   
			FROM user_base_info u 
			WHERE 1=1 
			<dynamic>
				<isNotEmpty property="userBaseInfo.userBaseId"  prepend=" and ">
					<![CDATA[ user_base_id = #userBaseInfo.userBaseId#   ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.realName"  prepend=" and ">
					<![CDATA[ real_name like  concat('%',#userBaseInfo.realName#,'%') ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.userName"  prepend=" and ">
					<![CDATA[ user_name like  concat('%',#userBaseInfo.userName#,'%')  ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.accountName"  prepend=" and ">
					<![CDATA[ account_name like concat('%',#userBaseInfo.accountName#,'%')  ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.type"  prepend=" and ">
					<![CDATA[ type = #userBaseInfo.type# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.state" prepend=" and ">
				<![CDATA[ u.state = #userBaseInfo.state# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.userCustomType" prepend=" and ">
				<![CDATA[ u.user_custom_type = #userBaseInfo.userCustomType# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.mobile" prepend=" and ">
				<![CDATA[ u.mobile = #userBaseInfo.mobile# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.mail" prepend=" and ">
				<![CDATA[ u.mail = #userBaseInfo.mail# ]]>
				</isNotEmpty>
				<isGreaterThan property="userBaseInfo.belongTo" compareValue="0" prepend=" and ">
				<![CDATA[  u.belong_to = #userBaseInfo.belongTo#  ]]>
				</isGreaterThan>	
			</dynamic>
			ORDER BY u.row_add_time DESC
			<isGreaterThan property="limitStart" compareValue="-1" >
					LIMIT #limitStart#,#pageSize#;
			</isGreaterThan>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByCondAndRoleCount -->
    <select id="MS-USER-BASE-INFO-FIND-BY-COND-AND-ROLE-COUNT" resultClass="long">
        SELECT /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-COND-AND-ROLE-COUNT*/ COUNT( u.user_base_id)  FROM  
			user_base_info u 
			WHERE 1=1 
			<dynamic>
				<isNotEmpty property="userBaseInfo.userBaseId"  prepend=" and ">
					<![CDATA[ user_base_id = #userBaseInfo.userBaseId#   ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.realName"  prepend=" and ">
					<![CDATA[ real_name like  #userBaseInfo.realName# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.userName"  prepend=" and ">
					<![CDATA[ user_name like #userBaseInfo.userName# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.accountName"  prepend=" and ">
					<![CDATA[ account_name like #userBaseInfo.accountName# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.type"  prepend=" and ">
					<![CDATA[ type = #userBaseInfo.type# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.state" prepend=" and ">
				<![CDATA[ u.state = #userBaseInfo.state# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.userCustomType" prepend=" and ">
				<![CDATA[ u.user_custom_type = #userBaseInfo.userCustomType# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.mobile" prepend=" and ">
				<![CDATA[ u.mobile = #userBaseInfo.mobile# ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.mail" prepend=" and ">
				<![CDATA[ u.mail = #userBaseInfo.mail# ]]>
				</isNotEmpty>
				<isGreaterThan property="userBaseInfo.belongTo" compareValue="0" prepend=" and ">
				<![CDATA[  u.belong_to = #userBaseInfo.belongTo#  ]]>
				</isGreaterThan>	
			</dynamic>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByCondition -->
    <select id="MS-USER-BASE-INFO-FIND-BY-CONDITION" resultMap="RM-USER-BASE-INFO">
        SELECT /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-CONDITION*/ * FROM user_base_info u
			WHERE 1=1
			<dynamic>
			<isNotEmpty property="userBaseInfo.userBaseId" prepend=" and ">				
			<![CDATA[ u.user_base_id = #userBaseInfo.userBaseId# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.realName" prepend=" and ">
				<![CDATA[ u.real_name = #userBaseInfo.realName# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.userName" prepend=" and ">
				<![CDATA[ u.user_name like concat('%',#userBaseInfo.userName#,'%') ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.accountName" prepend=" and ">
				<![CDATA[ u.account_name like concat('%',#userBaseInfo.accountName#,'%') ]]>
			</isNotEmpty>
			<isNotEmpty property="accountIsNull" prepend=" and ">
				<![CDATA[ u.account_name is null ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.accountId" prepend=" and ">
				<![CDATA[ u.account_id = #userBaseInfo.accountId# ]]>
			</isNotEmpty>

			<isNotEmpty property="userBaseInfo.userLevel" prepend=" and ">
				<![CDATA[ u.user_level in ( #userBaseInfo.userLevel# )]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.identityName" prepend=" and ">
				<![CDATA[ u.identity_name = #userBaseInfo.identityName# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.state" prepend=" and ">
				<![CDATA[ u.state = #userBaseInfo.state# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.identityName" prepend=" AND ">
					<![CDATA[ u.identity_name = #userBaseInfo.identityName# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.linkCode" prepend=" AND ">
					<![CDATA[ u.link_code = #userBaseInfo.linkCode# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.realNameAuthentication" prepend=" AND ">
					<![CDATA[ u.real_name_authentication = #userBaseInfo.realNameAuthentication# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.type" prepend=" AND ">
					<![CDATA[ u.type = #userBaseInfo.type# ]]>
			</isNotEmpty>
				<isNotEmpty property="userBaseInfo.userCustomType" prepend=" and ">
				<![CDATA[ u.user_custom_type = #userBaseInfo.userCustomType# ]]>
				</isNotEmpty>
		</dynamic>
			LIMIT #limitStart#,#pageSize#;
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByConditionCount -->
    <select id="MS-USER-BASE-INFO-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-CONDITION-COUNT*/  count(*)  FROM user_base_info u WHERE 1=1
			<dynamic>
			<isNotEmpty property="userBaseInfo.userBaseId" prepend=" and ">
				<![CDATA[ u .user_base_id = #userBaseInfo.userBaseId# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.realName" prepend=" and ">
				<![CDATA[ u.real_name = #userBaseInfo.realName# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.userName" prepend=" and ">
				<![CDATA[ u.user_name like concat('%',#userBaseInfo.userName#,'%') ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.accountName" prepend=" and ">
				<![CDATA[ u.account_name like concat('%',#userBaseInfo.accountName#,'%') ]]>
			</isNotEmpty>
			<isNotEmpty property="accountIsNull" prepend=" and ">
				<![CDATA[ u.account_name is null ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.accountId" prepend=" and ">
				<![CDATA[ u.account_id = #userBaseInfo.accountId# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.userLevel" prepend=" and ">
				<![CDATA[ u.user_level in ( #userBaseInfo.userLevel# )]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.identityName" prepend=" and ">
				<![CDATA[ u.identity_name = #userBaseInfo.identityName# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.realNameAuthentication" prepend=" AND ">
					<![CDATA[ u.real_name_authentication = #userBaseInfo.realNameAuthentication# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.state" prepend=" and ">
				<![CDATA[ u.state = #userBaseInfo.state# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.identityName" prepend=" AND ">
					<![CDATA[ u.identity_name = #userBaseInfo.identityName# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.linkCode" prepend=" AND ">
					<![CDATA[ u.link_code = #userBaseInfo.linkCode# ]]>
			</isNotEmpty>
			<isNotEmpty property="userBaseInfo.type" prepend=" AND ">
					<![CDATA[ u.type = #userBaseInfo.type# ]]>
			</isNotEmpty>
				<isNotEmpty property="userBaseInfo.userCustomType" prepend=" and ">
				<![CDATA[ u.user_custom_type = #userBaseInfo.userCustomType# ]]>
				</isNotEmpty>
		</dynamic>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.deleteById -->
    <delete id="MS-USER-BASE-INFO-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-ESUPPLIER-USER-BASE-INFO-DELETE-BY-ID*/ from user_base_info where (user_base_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisUserBaseInfoDAO.validationLogPassword -->
    <select id="MS-USER-BASE-INFO-VALIDATION-LOG-PASSWORD" resultClass="long">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-VALIDATION-LOG-PASSWORD*/ COUNT(*) from user_base_info where ((log_password = #logPassword#) AND (user_base_id = #userBaseId#))
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.validationCheckPassword -->
    <select id="MS-USER-BASE-INFO-VALIDATION-CHECK-PASSWORD" resultClass="long">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-VALIDATION-CHECK-PASSWORD*/ COUNT(*) from user_base_info where ((pay_password = #payPassword#) AND (user_base_id = #userBaseId#))
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.validationOperatePassword -->
    <select id="MS-USER-BASE-INFO-VALIDATION-OPERATE-PASSWORD" resultClass="long">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-VALIDATION-OPERATE-PASSWORD*/ COUNT(*) from user_base_info where ((operate_password = #operatePassword#) AND (user_base_id = #userBaseId#))
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.updateLogPassword -->
    <update id="MS-USER-BASE-INFO-UPDATE-LOG-PASSWORD">
    <![CDATA[
        update /*MS-ESUPPLIER-USER-BASE-INFO-UPDATE-LOG-PASSWORD*/ user_base_info set log_password=#logPassword# where (user_base_id = #userBaseId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisUserBaseInfoDAO.updateCheckPassword -->
    <update id="MS-USER-BASE-INFO-UPDATE-CHECK-PASSWORD">
    <![CDATA[
        update /*MS-ESUPPLIER-USER-BASE-INFO-UPDATE-CHECK-PASSWORD*/ user_base_info set pay_password=#payPassword# where (user_base_id = #userBaseId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisUserBaseInfoDAO.updateOperatePassword -->
    <update id="MS-USER-BASE-INFO-UPDATE-OPERATE-PASSWORD">
    <![CDATA[
        update /*MS-ESUPPLIER-USER-BASE-INFO-UPDATE-OPERATE-PASSWORD*/ user_base_info set operate_password=#operatePassword# where (user_base_id = #userBaseId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisUserBaseInfoDAO.validationUserName -->
    <select id="MS-USER-BASE-INFO-VALIDATION-USER-NAME" resultClass="long">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-VALIDATION-USER-NAME*/ count(1) from user_base_info u where (u.user_name = #u.userName#)
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findAllCount -->
    <select id="MS-USER-BASE-INFO-FIND-ALL-COUNT" resultClass="long">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-ALL-COUNT*/ COUNT(*) from user_base_info
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByUserIdAutotest -->
    <select id="MS-USER-BASE-INFO-FIND-BY-USER-ID-AUTOTEST" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-USER-ID-AUTOTEST*/ user_base_id, user_id, user_name, nickname, real_name, log_password, pay_password, account_id, account_name, mobile, mobile_binding, mail, mail_binding, type, state, row_add_time, row_update_time, identity_name, identity_start_no, identity_end_no, ex_identity_no, real_name_authentication, pwd_error_count, change_lock_time, user_level, user_real_status, user_province, user_county, user_city, fixed_phone, zip, birthday, qq, user_custom_type, user_custom_type1, user_custom_type2, enterprise_type, user_register_from, app_register_from from user_base_info where (user_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByAccountIdAutotest -->
    <select id="MS-USER-BASE-INFO-FIND-BY-ACCOUNT-ID-AUTOTEST" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-ACCOUNT-ID-AUTOTEST*/ user_base_id, user_id, user_name, nickname, real_name, log_password, pay_password, account_id, account_name, mobile, mobile_binding, mail, mail_binding, type, state, row_add_time, row_update_time, identity_name, identity_start_no, identity_end_no, ex_identity_no, real_name_authentication, pwd_error_count, change_lock_time, user_level, user_real_status, certify_level, user_province, user_county, user_city, fixed_phone, zip, birthday, qq, user_custom_type, user_custom_type1, user_custom_type2, enterprise_type, user_register_from, app_register_from from user_base_info where (account_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.deleteByIdAutotest -->
    <delete id="MS-USER-BASE-INFO-DELETE-BY-ID-AUTOTEST">
    <![CDATA[
        delete /*MS-ESUPPLIER-USER-BASE-INFO-DELETE-BY-ID-AUTOTEST*/ from user_base_info where (user_base_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findSupplierCount -->
    <select id="MS-USER-BASE-INFO-FIND-SUPPLIER-COUNT" resultClass="long">
        SELECT /*MS-ESUPPLIER-USER-BASE-INFO-FIND-SUPPLIER-COUNT*/  count(u.user_base_id)  FROM 
			user_base_info u,tbl_supplier s WHERE 1=1 and u.user_id = s.supplier_id
			<dynamic>
				<isNotEmpty property="userBaseInfo.userCustomType"  prepend=" and ">
					<![CDATA[ user_custom_type = #userBaseInfo.userCustomType#   ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.type"  prepend=" and ">
					<![CDATA[ type = #userBaseInfo.type#   ]]>
				</isNotEmpty>
				<isGreaterThan property="userBaseInfo.belongTo" compareValue="0" prepend=" and ">
				<![CDATA[  belong_to = #userBaseInfo.belongTo#  ]]>
				</isGreaterThan>	
				<isNotEmpty property="userBaseInfo.state"  prepend=" and ">
					<![CDATA[ state = #userBaseInfo.state#    ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.storeName"  prepend=" and ">
					<![CDATA[ store_name like #tblSupplierDo.storeName#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.merchantState"  prepend=" and ">
					<![CDATA[ s.merchant_state = #tblSupplierDo.merchantState#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.merchantType"  prepend=" and ">
					<![CDATA[ s.merchant_type = #tblSupplierDo.merchantType#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.toShop"  prepend=" and ">
					<![CDATA[ s.toShop = #tblSupplierDo.toShop#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.orderMeal"  prepend=" and ">
					<![CDATA[ s.order_meal = #tblSupplierDo.orderMeal#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.hotels"  prepend=" and ">
					<![CDATA[ s.hotels = #tblSupplierDo.hotels#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.o2o"  prepend=" and ">
					<![CDATA[ s.o2o = #tblSupplierDo.o2o#    ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.recommend"  prepend=" and ">
					<![CDATA[ s.recommend = #tblSupplierDo.recommend#    ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.shopGrade"  prepend=" and ">
					<![CDATA[ s.shopGrade = #tblSupplierDo.shopGrade#   ]]>
				</isNotEmpty>
			</dynamic>
				ORDER BY u.row_add_time DESC
			<isGreaterThan property="limitStart" compareValue="-1" >
					LIMIT #limitStart#,#pageSize#;
			</isGreaterThan>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findSupplier -->
    <select id="MS-USER-BASE-INFO-FIND-SUPPLIER" resultMap="RM-USER-BASE-INFO">
        SELECT /*MS-ESUPPLIER-USER-BASE-INFO-FIND-SUPPLIER*/  *  FROM 
			user_base_info u,tbl_supplier s WHERE 1=1 and u.user_id = s.supplier_id
			<dynamic>
				<isNotEmpty property="userBaseInfo.userCustomType"  prepend=" and ">
					<![CDATA[ user_custom_type = #userBaseInfo.userCustomType#   ]]>
				</isNotEmpty>
				<isNotEmpty property="userBaseInfo.type"  prepend=" and ">
					<![CDATA[ type = #userBaseInfo.type#   ]]>
				</isNotEmpty>
				<isGreaterThan property="userBaseInfo.belongTo" compareValue="0" prepend=" and ">
				<![CDATA[  belong_to = #userBaseInfo.belongTo#  ]]>
				</isGreaterThan>	
				<isNotEmpty property="userBaseInfo.state"  prepend=" and ">
					<![CDATA[ state = #userBaseInfo.state#    ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.storeName"  prepend=" and ">
					<![CDATA[ store_name like #tblSupplierDo.storeName#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.merchantState"  prepend=" and ">
					<![CDATA[ s.merchant_state = #tblSupplierDo.merchantState#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.merchantType"  prepend=" and ">
					<![CDATA[ s.merchant_type = #tblSupplierDo.merchantType#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.toShop"  prepend=" and ">
					<![CDATA[ s.toShop = #tblSupplierDo.toShop#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.orderMeal"  prepend=" and ">
					<![CDATA[ s.order_meal = #tblSupplierDo.orderMeal#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.hotels"  prepend=" and ">
					<![CDATA[ s.hotels = #tblSupplierDo.hotels#   ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.o2o"  prepend=" and ">
					<![CDATA[ s.o2o = #tblSupplierDo.o2o#    ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.recommend"  prepend=" and ">
					<![CDATA[ s.recommend = #tblSupplierDo.recommend#    ]]>
				</isNotEmpty>
				<isNotEmpty property="tblSupplierDo.shopGrade"  prepend=" and ">
					<![CDATA[ s.shopGrade = #tblSupplierDo.shopGrade#   ]]>
				</isNotEmpty>
			</dynamic>
            <dynamic>
				<isEqual property="scoreSort" compareValue="asc">
					ORDER by s.review_average asc,u.user_id desc
				</isEqual>
				<isEqual property="scoreSort" compareValue="asc">
					 ORDER by  s.review_average desc,u.user_id desc
				</isEqual>

				<isEqual property="amountSort" compareValue="asc">
					ORDER by s.product_sum asc,u.user_id desc
				</isEqual>
				<isEqual property="amountSort" compareValue="asc">
					 ORDER by  s.product_sum desc,u.user_id desc
				</isEqual>

            </dynamic>

				<isEmpty property="scoreSort">
					  <isEmpty property="amountSort">
						  <isNotEmpty property="latitude" >
							  <isNotEmpty property="longitude">
						ORDER BY  IFNULL(fun_getDistance(#latitude#,#longitude#,ifnull(s.latitude,0),ifnull(s.longitude,0)),0),u.user_id desc
							</isNotEmpty>
						  </isNotEmpty>
					  </isEmpty>
				</isEmpty>

            <isEmpty property="scoreSort">
            	  <isEmpty property="amountSort">
					 <isEmpty property="latitude">
						ORDER BY u.user_id desc
				    </isEmpty>
            	  </isEmpty>
            </isEmpty>


			<isGreaterThan property="limitStart" compareValue="-1" >
					LIMIT #limitStart#,#pageSize#;
			</isGreaterThan>
    </select>

    <!-- mapped statement for IbatisUserBaseInfoDAO.deleteByUserIdAutotest -->
    <delete id="MS-USER-BASE-INFO-DELETE-BY-USER-ID-AUTOTEST">
    <![CDATA[
        delete /*MS-ESUPPLIER-USER-BASE-INFO-DELETE-BY-USER-ID-AUTOTEST*/ from user_base_info where (user_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisUserBaseInfoDAO.deleteByUserNameAutotest -->
    <delete id="MS-USER-BASE-INFO-DELETE-BY-USER-NAME-AUTOTEST">
    <![CDATA[
        delete /*MS-ESUPPLIER-USER-BASE-INFO-DELETE-BY-USER-NAME-AUTOTEST*/ from user_base_info where (user_name = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisUserBaseInfoDAO.findByRealNameAutoTest -->
    <select id="MS-USER-BASE-INFO-FIND-BY-REAL-NAME-AUTO-TEST" resultMap="RM-USER-BASE-INFO">
    <![CDATA[
        select /*MS-ESUPPLIER-USER-BASE-INFO-FIND-BY-REAL-NAME-AUTO-TEST*/ * from user_base_info where (real_name = #value#)
    ]]>
    </select>

</sqlMap>
