/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.RepayPlanDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;
import java.util.HashMap;

/**
 * A dao interface provides methods to access database table <tt>repay_plan</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/repay_plan.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface RepayPlanDAO {
	/**
	 *  Insert one <tt>RepayPlanDO</tt> object to DB table <tt>repay_plan</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into repay_plan(repay_plan_id,period_no,period_count,trade_name,trade_id,repay_user_id,repay_user_name,repay_user_real_name,repay_division_way,amount,repay_principal_amount,original_amount,status,repay_date,actual_repay_date,self_pay_actual_user_time,raw_add_time,note,actual_user_id,actual_repay_user_name,actual_repay_user_real_name,repay_role_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param repayPlan
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(RepayPlanDO repayPlan) throws DataAccessException;

	/**
	 *  Update DB table <tt>repay_plan</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update repay_plan set period_no=?, period_count=?, trade_name=?, trade_id=?, repay_user_id=?, repay_user_name=?, repay_user_real_name=?, repay_division_way=?, amount=?, repay_principal_amount=?, original_amount=?, status=?, repay_date=?, actual_repay_date=?, self_pay_actual_user_time=?, note=?, actual_user_id=?, actual_repay_user_name=?, actual_repay_user_real_name=?, repay_role_id=? where (repay_plan_id = ?)</tt>
	 *
	 *	@param repayPlan
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(RepayPlanDO repayPlan) throws DataAccessException;

	/**
	 *  Query DB table <tt>repay_plan</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select repay_plan_id, period_no, period_count, trade_name, trade_id, repay_user_id, repay_user_name, repay_user_real_name, repay_division_way, amount, repay_principal_amount, original_amount, status, repay_date, actual_repay_date, self_pay_actual_user_time, raw_add_time, raw_update_time, note, actual_user_id, actual_repay_user_name, actual_repay_user_real_name, repay_role_id from repay_plan where (repay_plan_id = ?)</tt>
	 *
	 *	@param repayPlanId
	 *	@return RepayPlanDO
	 *	@throws DataAccessException
	 */	 
    public RepayPlanDO findById(long repayPlanId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>repay_plan</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from repay_plan where (repay_plan_id = ?)</tt>
	 *
	 *	@param repayPlanId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long repayPlanId) throws DataAccessException;

	/**
	 *  Query DB table <tt>repay_plan</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from repay_plan</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException;

	/**
	 *  Query DB table <tt>repay_plan</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select repay_plan_id, period_no, period_count, trade_name, trade_id, repay_user_id, repay_user_name, repay_user_real_name, repay_division_way, amount, repay_principal_amount, original_amount, status, repay_date, actual_repay_date, self_pay_actual_user_time, raw_add_time, raw_update_time, note, actual_user_id, actual_repay_user_name, actual_repay_user_real_name, repay_role_id from repay_plan where (1 = 2)</tt>
	 *
	 *	@param repayPlan
	 *	@param limitStart
	 *	@param pageSize
	 *	@param startRepayDate
	 *	@param endRepayDate
	 *	@param actualStartRepayDate
	 *	@param actualEndRepayDate
	 *	@param repayUserName
	 *	@param actualRepayUserName
	 *	@param tradeName
	 *	@param statusList
	 *	@param orderBy
	 *	@return List<RepayPlanDO>
	 *	@throws DataAccessException
	 */	 
    public List<RepayPlanDO> findByCondition(RepayPlanDO repayPlan, long limitStart, long pageSize, Date startRepayDate, Date endRepayDate, Date actualStartRepayDate, Date actualEndRepayDate, String repayUserName, String actualRepayUserName, String tradeName, List statusList, String orderBy) throws DataAccessException;

	/**
	 *  Query DB table <tt>repay_plan</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select distinct r.self_pay_actual_user_time, r.repay_plan_id, r.period_no, r.period_count, r.trade_name, r.trade_id, r.repay_user_id, r.repay_user_name, r.repay_user_real_name, r.repay_division_way, r.amount, repay_principal_amount, r.original_amount, r.status, r.repay_date, r.actual_repay_date, r.raw_add_time, r.raw_update_time, r.note, r.actual_user_id, r.actual_repay_user_name, r.actual_repay_user_real_name, r.repay_role_id from loan_demand l, repay_plan r, trade t where ((r.trade_id = t.trade_id) AND (t.demand_id = l.demand_id))</tt>
	 *
	 *	@param repayPlan
	 *	@param limitStart
	 *	@param pageSize
	 *	@param startRepayDate
	 *	@param endRepayDate
	 *	@param actualStartRepayDate
	 *	@param actualEndRepayDate
	 *	@param repayUserName
	 *	@param actualRepayUserName
	 *	@param tradeName
	 *	@param statusList
	 *	@return List<RepayPlanDO>
	 *	@throws DataAccessException
	 */	 
    public List<RepayPlanDO> findByLoanCondition(RepayPlanDO repayPlan, long limitStart, long pageSize, Date startRepayDate, Date endRepayDate, Date actualStartRepayDate, Date actualEndRepayDate, String repayUserName, String actualRepayUserName, String tradeName, List statusList) throws DataAccessException;

	/**
	 *  Query DB table <tt>repay_plan</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) total_count, SUM(amount) totalAmount from repay_plan r, loan_demand l, trade t where ((r.trade_id = t.trade_id) AND (t.demand_id = l.demand_id))</tt>
	 *
	 *	@param repayPlan
	 *	@param startRepayDate
	 *	@param endRepayDate
	 *	@param actualStartRepayDate
	 *	@param actualEndRepayDate
	 *	@param repayUserName
	 *	@param actualRepayUserName
	 *	@param tradeName
	 *	@param statusList
	 *	@return HashMap
	 *	@throws DataAccessException
	 */	 
    public HashMap findByLoanConditionCount(RepayPlanDO repayPlan, Date startRepayDate, Date endRepayDate, Date actualStartRepayDate, Date actualEndRepayDate, String repayUserName, String actualRepayUserName, String tradeName, List statusList) throws DataAccessException;

	/**
	 *  Query DB table <tt>repay_plan</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) total_count, sum(amount) total_amount from repay_plan</tt>
	 *
	 *	@param repayPlan
	 *	@param startRepayDate
	 *	@param endRepayDate
	 *	@param actualStartRepayDate
	 *	@param actualEndRepayDate
	 *	@param repayUserName
	 *	@param actualRepayUserName
	 *	@param tradeName
	 *	@param statusList
	 *	@return HashMap
	 *	@throws DataAccessException
	 */	 
    public HashMap findByConditionCount(RepayPlanDO repayPlan, Date startRepayDate, Date endRepayDate, Date actualStartRepayDate, Date actualEndRepayDate, String repayUserName, String actualRepayUserName, String tradeName, List statusList) throws DataAccessException;

	/**
	 *  Query DB table <tt>repay_plan</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select repay_plan_id, self_pay_actual_user_time, period_no, period_count, trade_name, trade_id, repay_user_id, repay_user_name, repay_user_real_name, repay_division_way, amount, repay_principal_amount, original_amount, status, repay_date, actual_repay_date, raw_add_time, raw_update_time, note, actual_user_id, actual_repay_user_name, actual_repay_user_real_name, repay_role_id from repay_plan where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return List<RepayPlanDO>
	 *	@throws DataAccessException
	 */	 
    public List<RepayPlanDO> findByTradeIdAutotest(long tradeId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>repay_plan</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from repay_plan where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByTradeIdAutoTest(long tradeId) throws DataAccessException;

	/**
	 *  Insert one <tt>RepayPlanDO</tt> object to DB table <tt>repay_plan</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into repay_plan(repay_plan_id,period_no,period_count,trade_name,trade_id,repay_user_id,repay_user_name,repay_user_real_name,repay_division_way,amount,repay_principal_amount,original_amount,status,repay_date,actual_repay_date,raw_add_time,note,actual_user_id,actual_repay_user_name,actual_repay_user_real_name,repay_role_id,self_pay_actual_user_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param repayPlan
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(RepayPlanDO repayPlan) throws DataAccessException;

}