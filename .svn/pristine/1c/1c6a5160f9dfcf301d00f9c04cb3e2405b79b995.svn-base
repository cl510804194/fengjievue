/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.TblProductTypeDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.TblProductTypeDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.TblProductTypeDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/tbl_product_type.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisTblProductTypeDAO extends SqlMapClientDaoSupport implements TblProductTypeDAO {
	/**
	 *  Insert one <tt>TblProductTypeDO</tt> object to DB table <tt>tbl_product_type</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into tbl_product_type(pt_id,pt_code,pt_type_name,pt_parent_id,priority,pt_seq,product_count,pt_code_ln,pt_add_columns,pt_note,pt_tag,pt_keyWords,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tblProductType
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(TblProductTypeDO tblProductType) throws DataAccessException {
    	if (tblProductType == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TBL-PRODUCT-TYPE-INSERT", tblProductType);

        return tblProductType.getPtId();
    }

	/**
	 *  Update DB table <tt>tbl_product_type</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_product_type set pt_code=?, pt_type_name=?, pt_parent_id=?, priority=?, pt_seq=?, product_count=?, pt_code_ln=?, pt_add_columns=?, pt_note=?, pt_tag=?, pt_keyWords=? where (pt_id = ?)</tt>
	 *
	 *	@param tblProductType
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TblProductTypeDO tblProductType) throws DataAccessException {
    	if (tblProductType == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-TBL-PRODUCT-TYPE-UPDATE", tblProductType);
    }

	/**
	 *  Query DB table <tt>tbl_product_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tbl_product_type where (pt_code = ?) for update</tt>
	 *
	 *	@param ptCode
	 *	@return TblProductTypeDO
	 *	@throws DataAccessException
	 */	 
    public TblProductTypeDO findByCodeForUpdate(String ptCode) throws DataAccessException {

        return (TblProductTypeDO) getSqlMapClientTemplate().queryForObject("MS-TBL-PRODUCT-TYPE-FIND-BY-CODE-FOR-UPDATE", ptCode);

    }

	/**
	 *  Update DB table <tt>tbl_product_type</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_product_type set product_count=(product_count + 1) where (pt_id = ?)</tt>
	 *
	 *	@param ptId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProductCount(long ptId) throws DataAccessException {
        Long param = new Long(ptId);

        return getSqlMapClientTemplate().update("MS-TBL-PRODUCT-TYPE-UPDATE-PRODUCT-COUNT", param);
    }

	/**
	 *  Query DB table <tt>tbl_product_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select pt_id, pt_code, pt_type_name, pt_parent_id, priority, pt_seq, product_count, pt_code_ln, pt_add_columns, pt_note, pt_tag, pt_keyWords, raw_add_time, raw_update_time from tbl_product_type where (pt_id = ?)</tt>
	 *
	 *	@param ptId
	 *	@return TblProductTypeDO
	 *	@throws DataAccessException
	 */	 
    public TblProductTypeDO findById(long ptId) throws DataAccessException {
        Long param = new Long(ptId);

        return (TblProductTypeDO) getSqlMapClientTemplate().queryForObject("MS-TBL-PRODUCT-TYPE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>tbl_product_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select pt_id, pt_code, pt_type_name, pt_parent_id, priority, pt_seq, product_count, pt_code_ln, pt_add_columns, pt_note, pt_tag, pt_keyWords, raw_add_time, raw_update_time from tbl_product_type where (pt_code = ?) order by pt_code ASC</tt>
	 *
	 *	@param ptCode
	 *	@return TblProductTypeDO
	 *	@throws DataAccessException
	 */	 
    public TblProductTypeDO findByPtCode(String ptCode) throws DataAccessException {

        return (TblProductTypeDO) getSqlMapClientTemplate().queryForObject("MS-TBL-PRODUCT-TYPE-FIND-BY-PT-CODE", ptCode);

    }

	/**
	 *  Query DB table <tt>tbl_product_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select pt_id, pt_code, pt_type_name, pt_parent_id, priority, pt_seq, product_count, pt_code_ln, pt_add_columns, pt_note, pt_tag, pt_keyWords, raw_add_time, raw_update_time from tbl_product_type where (pt_code LIKE ?) order by pt_code ASC</tt>
	 *
	 *	@param ptCode
	 *	@return List<TblProductTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblProductTypeDO> findByLikePtCode(String ptCode) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TBL-PRODUCT-TYPE-FIND-BY-LIKE-PT-CODE", ptCode);

    }

	/**
	 *  Query DB table <tt>tbl_product_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select pt_id, pt_code, pt_type_name, pt_parent_id, priority, pt_seq, product_count, pt_code_ln, pt_add_columns, pt_note, pt_tag, pt_keyWords, raw_add_time, raw_update_time from tbl_product_type where (pt_parent_id = ?) order by pt_code ASC</tt>
	 *
	 *	@param ptParentId
	 *	@return List<TblProductTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblProductTypeDO> findByPtParentId(long ptParentId) throws DataAccessException {
        Long param = new Long(ptParentId);

        return getSqlMapClientTemplate().queryForList("MS-TBL-PRODUCT-TYPE-FIND-BY-PT-PARENT-ID", param);

    }

	/**
	 *  Query DB table <tt>tbl_product_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select pt_id, pt_code, pt_type_name, pt_parent_id, priority, pt_seq, product_count, pt_code_ln, pt_add_columns, pt_note, pt_tag, pt_keyWords, raw_add_time, raw_update_time from tbl_product_type where (1 = 1)</tt>
	 *
	 *	@param tblProductType
	 *	@param limitStart
	 *	@param pageSize
	 *	@param searchName
	 *	@return List<TblProductTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblProductTypeDO> findByCondition(TblProductTypeDO tblProductType, long limitStart, long pageSize, String searchName) throws DataAccessException {
    	if (tblProductType == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblProductType", tblProductType);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("searchName", searchName);

        return getSqlMapClientTemplate().queryForList("MS-TBL-PRODUCT-TYPE-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>tbl_product_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_product_type where (1 = 1)</tt>
	 *
	 *	@param tblProductType
	 *	@param searchName
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(TblProductTypeDO tblProductType, String searchName) throws DataAccessException {
    	if (tblProductType == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tblProductType", tblProductType);
        param.put("searchName", searchName);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-TBL-PRODUCT-TYPE-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Delete records from DB table <tt>tbl_product_type</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_product_type where (pt_id = ?)</tt>
	 *
	 *	@param ptId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long ptId) throws DataAccessException {
        Long param = new Long(ptId);

        return getSqlMapClientTemplate().delete("MS-TBL-PRODUCT-TYPE-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>tbl_product_type</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_product_type where (pt_code LIKE ?)</tt>
	 *
	 *	@param ptCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByPtCode(String ptCode) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-TBL-PRODUCT-TYPE-DELETE-BY-PT-CODE", ptCode);
    }

	/**
	 *  Query DB table <tt>tbl_product_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_product_type</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TBL-PRODUCT-TYPE-FIND-ALL-COUNT", null);

    }

}