/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.UserLoginDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.UserLoginDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.UserLoginDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/user_login.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisUserLoginDAO extends SqlMapClientDaoSupport implements UserLoginDAO {
	/**
	 *  Insert one <tt>UserLoginDO</tt> object to DB table <tt>user_login</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into user_login(login_id,login_name,user_id,login_type,raw_add_time) values (?, ?, ?, ?, ?)</tt>
	 *
	 *	@param userLogin
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(UserLoginDO userLogin) throws DataAccessException {
    	if (userLogin == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-USER-LOGIN-INSERT", userLogin);

        return userLogin.getLoginId();
    }

	/**
	 *  Update DB table <tt>user_login</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_login set login_name=?, user_id=?, login_type=? where (login_id = ?)</tt>
	 *
	 *	@param userLogin
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(UserLoginDO userLogin) throws DataAccessException {
    	if (userLogin == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-USER-LOGIN-UPDATE", userLogin);
    }

	/**
	 *  Query DB table <tt>user_login</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_login where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return List<UserLoginDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserLoginDO> findByUserId(long userId) throws DataAccessException {
        Long param = new Long(userId);

        return getSqlMapClientTemplate().queryForList("MS-USER-LOGIN-FIND-BY-USER-ID", param);

    }

	/**
	 *  Query DB table <tt>user_login</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select distinct l.* from user_base_info u, user_login l where ((u.user_id = l.user_id) AND (login_name = ?))</tt>
	 *
	 *	@param loginName
	 *	@return UserLoginDO
	 *	@throws DataAccessException
	 */	 
    public UserLoginDO findByLoginName(String loginName) throws DataAccessException {

        return (UserLoginDO) getSqlMapClientTemplate().queryForObject("MS-USER-LOGIN-FIND-BY-LOGIN-NAME", loginName);

    }

	/**
	 *  Query DB table <tt>user_login</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_login where (login_id = ?)</tt>
	 *
	 *	@param loginId
	 *	@return UserLoginDO
	 *	@throws DataAccessException
	 */	 
    public UserLoginDO findById(long loginId) throws DataAccessException {
        Long param = new Long(loginId);

        return (UserLoginDO) getSqlMapClientTemplate().queryForObject("MS-USER-LOGIN-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>user_login</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_login where (login_id = ?)</tt>
	 *
	 *	@param loginId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long loginId) throws DataAccessException {
        Long param = new Long(loginId);

        return getSqlMapClientTemplate().delete("MS-USER-LOGIN-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>user_login</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from user_login</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException {

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-USER-LOGIN-FIND-ALL-COUNT", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Delete records from DB table <tt>user_login</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_login where (login_name = ?)</tt>
	 *
	 *	@param loginName
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByLoginNameAutoTest(String loginName) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-USER-LOGIN-DELETE-BY-LOGIN-NAME-AUTO-TEST", loginName);
    }

}