/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.TblStorageDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.TblStorageDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.TblStorageDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/tbl_storage.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisTblStorageDAO extends SqlMapClientDaoSupport implements TblStorageDAO {
	/**
	 *  Insert one <tt>TblStorageDO</tt> object to DB table <tt>tbl_storage</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into tbl_storage(product_id,stock_amount,unit,payed_count,saleing_count,saleing_all_count,sale_completion_count,alarm_amountu,alarm_amountd,status,modify_time,modify_man,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tblStorage
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(TblStorageDO tblStorage) throws DataAccessException {
    	if (tblStorage == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TBL-STORAGE-INSERT", tblStorage);

        return tblStorage.getProductId();
    }

	/**
	 *  Update DB table <tt>tbl_storage</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_storage set stock_amount=?, unit=?, payed_count=?, saleing_count=?, saleing_all_count=?, sale_completion_count=?, alarm_amountu=?, alarm_amountd=?, status=?, modify_time=?, modify_man=? where (product_id = ?)</tt>
	 *
	 *	@param tblStorage
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TblStorageDO tblStorage) throws DataAccessException {
    	if (tblStorage == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-TBL-STORAGE-UPDATE", tblStorage);
    }

	/**
	 *  Update DB table <tt>tbl_storage</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_storage set stock_amount=1 where (product_id = ?)</tt>
	 *
	 *	@param tblStorage
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateStockAmount(TblStorageDO tblStorage) throws DataAccessException {
    	if (tblStorage == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-TBL-STORAGE-UPDATE-STOCK-AMOUNT", tblStorage);
    }

	/**
	 *  Query DB table <tt>tbl_storage</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select product_id, stock_amount, unit, payed_count, saleing_count, saleing_all_count, sale_completion_count, alarm_amountu, alarm_amountd, status, modify_time, modify_man, raw_add_time, raw_update_time from tbl_storage where (product_id = ?)</tt>
	 *
	 *	@param productId
	 *	@return TblStorageDO
	 *	@throws DataAccessException
	 */	 
    public TblStorageDO findById(long productId) throws DataAccessException {
        Long param = new Long(productId);

        return (TblStorageDO) getSqlMapClientTemplate().queryForObject("MS-TBL-STORAGE-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>tbl_storage</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_storage where (product_id = ?)</tt>
	 *
	 *	@param productId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long productId) throws DataAccessException {
        Long param = new Long(productId);

        return getSqlMapClientTemplate().delete("MS-TBL-STORAGE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>tbl_storage</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_storage</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-TBL-STORAGE-FIND-ALL-COUNT", null);

    }

}