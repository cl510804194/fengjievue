/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.LotteryConditionDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.LotteryConditionDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.LotteryConditionDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/lottery_condition.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisLotteryConditionDAO extends SqlMapClientDaoSupport implements LotteryConditionDAO {
	/**
	 *  Insert one <tt>LotteryConditionDO</tt> object to DB table <tt>lottery_condition</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into lottery_condition(lottery_condition_id,lottery_id,seq_num,lottery_condition_type,condition_value,lottery_times_type,start_period,end_period,time,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param lotteryCondition
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(LotteryConditionDO lotteryCondition) throws DataAccessException {
    	if (lotteryCondition == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-LOTTERY-CONDITION-INSERT", lotteryCondition);

        return lotteryCondition.getLotteryConditionId();
    }

	/**
	 *  Update DB table <tt>lottery_condition</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update lottery_condition set lottery_id=?, seq_num=?, lottery_condition_type=?, condition_value=?, lottery_times_type=?, start_period=?, end_period=?, time=? where (lottery_condition_id = ?)</tt>
	 *
	 *	@param lotteryCondition
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(LotteryConditionDO lotteryCondition) throws DataAccessException {
    	if (lotteryCondition == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-LOTTERY-CONDITION-UPDATE", lotteryCondition);
    }

	/**
	 *  Query DB table <tt>lottery_condition</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select lottery_condition_id, lottery_id, seq_num, lottery_condition_type, condition_value, lottery_times_type, start_period, end_period, time, raw_add_time, raw_update_time from lottery_condition where (lottery_condition_id = ?)</tt>
	 *
	 *	@param lotteryConditionId
	 *	@return LotteryConditionDO
	 *	@throws DataAccessException
	 */	 
    public LotteryConditionDO findById(long lotteryConditionId) throws DataAccessException {
        Long param = new Long(lotteryConditionId);

        return (LotteryConditionDO) getSqlMapClientTemplate().queryForObject("MS-LOTTERY-CONDITION-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>lottery_condition</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select lottery_condition_id, lottery_id, seq_num, lottery_condition_type, condition_value, lottery_times_type, start_period, end_period, time, raw_add_time, raw_update_time from lottery_condition where (lottery_id = ?) order by seq_num ASC</tt>
	 *
	 *	@param lotteryId
	 *	@return List<LotteryConditionDO>
	 *	@throws DataAccessException
	 */	 
    public List<LotteryConditionDO> findByLotteryId(long lotteryId) throws DataAccessException {
        Long param = new Long(lotteryId);

        return getSqlMapClientTemplate().queryForList("MS-LOTTERY-CONDITION-FIND-BY-LOTTERY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>lottery_condition</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from lottery_condition where (lottery_condition_id = ?)</tt>
	 *
	 *	@param lotteryConditionId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long lotteryConditionId) throws DataAccessException {
        Long param = new Long(lotteryConditionId);

        return getSqlMapClientTemplate().delete("MS-LOTTERY-CONDITION-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>lottery_condition</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from lottery_condition where (lottery_id = ?)</tt>
	 *
	 *	@param lotteryId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByLotteryId(long lotteryId) throws DataAccessException {
        Long param = new Long(lotteryId);

        return getSqlMapClientTemplate().delete("MS-LOTTERY-CONDITION-DELETE-BY-LOTTERY-ID", param);
    }

	/**
	 *  Insert one <tt>LotteryConditionDO</tt> object to DB table <tt>lottery_condition</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into lottery_condition(lottery_condition_id,lottery_id,seq_num,lottery_condition_type,condition_value,lottery_times_type,start_period,end_period,time,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param lotteryCondition
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(LotteryConditionDO lotteryCondition) throws DataAccessException {
    	if (lotteryCondition == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-LOTTERY-CONDITION-INSERT-AUTOTEST", lotteryCondition);

        return lotteryCondition.getLotteryConditionId();
    }

	/**
	 *  Query DB table <tt>lottery_condition</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select lottery_condition_id, lottery_id, seq_num, lottery_condition_type, condition_value, lottery_times_type, start_period, end_period, time, raw_add_time, raw_update_time from lottery_condition where (lottery_id = ?) order by seq_num ASC</tt>
	 *
	 *	@param lotteryId
	 *	@return List<LotteryConditionDO>
	 *	@throws DataAccessException
	 */	 
    public List<LotteryConditionDO> findByLotteryIdAutotest(long lotteryId) throws DataAccessException {
        Long param = new Long(lotteryId);

        return getSqlMapClientTemplate().queryForList("MS-LOTTERY-CONDITION-FIND-BY-LOTTERY-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>lottery_condition</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from lottery_condition where (lottery_id = ?)</tt>
	 *
	 *	@param lotteryId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByLotteryIdAutotest(long lotteryId) throws DataAccessException {
        Long param = new Long(lotteryId);

        return getSqlMapClientTemplate().delete("MS-LOTTERY-CONDITION-DELETE-BY-LOTTERY-ID-AUTOTEST", param);
    }

}