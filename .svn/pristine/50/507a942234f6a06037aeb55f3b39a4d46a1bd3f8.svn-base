/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.UserBaseInfoDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import com.yjf.esupplier.dal.dataobject.TblSupplierDO;

/**
 * A dao interface provides methods to access database table <tt>user_base_info</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/user_base_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface UserBaseInfoDAO {
	/**
	 *  Insert one <tt>UserBaseInfoDO</tt> object to DB table <tt>user_base_info</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into user_base_info(user_base_id,user_id,user_name,nickname,real_name,log_password,pay_password,account_id,account_name,mobile,mobile_binding,mail,mail_binding,type,state,row_add_time,row_update_time,identity_name,identity_start_no,identity_end_no,ex_identity_no,real_name_authentication,pwd_error_count,change_lock_time,user_level,user_real_status,certify_level,user_province,user_county,user_city,fixed_phone,zip,birthday,qq,belong_to,user_custom_type,user_custom_type1,user_custom_type2,enterprise_type,user_register_from,app_register_from,link_code,operate_password) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param userBaseInfo
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(UserBaseInfoDO userBaseInfo) throws DataAccessException;

	/**
	 *  Update DB table <tt>user_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_base_info set user_id=?, user_name=?, nickname=?, real_name=?, log_password=?, pay_password=?, account_id=?, account_name=?, mobile=?, mobile_binding=?, mail=?, mail_binding=?, type=?, state=?, row_add_time=?, row_update_time=?, identity_name=?, identity_start_no=?, identity_end_no=?, ex_identity_no=?, real_name_authentication=?, pwd_error_count=?, change_lock_time=?, user_level=?, user_real_status=?, certify_level=?, user_province=?, user_county=?, user_city=?, fixed_phone=?, zip=?, birthday=?, qq=?, belong_to=?, user_custom_type=?, user_custom_type1=?, user_custom_type2=?, enterprise_type=?, user_register_from=?, app_register_from=?, link_code=?, operate_password=? where (user_base_id = ?)</tt>
	 *
	 *	@param userBaseInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(UserBaseInfoDO userBaseInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_base_info where (user_base_id = ?)</tt>
	 *
	 *	@param userBaseId
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByUserBaseId(String userBaseId) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_base_info where (account_name = ?)</tt>
	 *
	 *	@param accountName
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByAccountName(String accountName) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_base_info where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByUserId(long userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_base_info where (user_id = ?) for update</tt>
	 *
	 *	@param userId
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByUserIdForUpdate(long userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select distinct u.* from user_base_info u, user_login l where ((u.user_id = l.user_id) AND (user_name = ?))</tt>
	 *
	 *	@param userName
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByUserName(String userName) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select distinct u.* from user_base_info u, user_login l where ((u.user_id = l.user_id) AND (mobile = ?))</tt>
	 *
	 *	@param mobile
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByMobile(String mobile) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_base_info where (link_code = ?)</tt>
	 *
	 *	@param linkCode
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByLinkCode(String linkCode) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_base_info where (1 = 1)</tt>
	 *
	 *	@param userBaseInfo
	 *	@param roleId
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<UserBaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserBaseInfoDO> findByCondAndRole(UserBaseInfoDO userBaseInfo, long roleId, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(user_base_id) from user_base_info where (1 = 1)</tt>
	 *
	 *	@param userBaseInfo
	 *	@param roleId
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByCondAndRoleCount(UserBaseInfoDO userBaseInfo, long roleId) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_base_info u where (1 = 1)</tt>
	 *
	 *	@param userBaseInfo
	 *	@param limitStart
	 *	@param pageSize
	 *	@param accountIsNull
	 *	@return List<UserBaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserBaseInfoDO> findByCondition(UserBaseInfoDO userBaseInfo, long limitStart, long pageSize, String accountIsNull) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from user_base_info u where (1 = 1)</tt>
	 *
	 *	@param userBaseInfo
	 *	@param limitStart
	 *	@param pageSize
	 *	@param accountIsNull
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(UserBaseInfoDO userBaseInfo, long limitStart, long pageSize, String accountIsNull) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>user_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_base_info where (user_base_id = ?)</tt>
	 *
	 *	@param userBaseId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(String userBaseId) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from user_base_info where ((log_password = ?) AND (user_base_id = ?))</tt>
	 *
	 *	@param userBaseInfo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long validationLogPassword(UserBaseInfoDO userBaseInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from user_base_info where ((pay_password = ?) AND (user_base_id = ?))</tt>
	 *
	 *	@param userBaseInfo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long validationCheckPassword(UserBaseInfoDO userBaseInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from user_base_info where ((operate_password = ?) AND (user_base_id = ?))</tt>
	 *
	 *	@param userBaseInfo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long validationOperatePassword(UserBaseInfoDO userBaseInfo) throws DataAccessException;

	/**
	 *  Update DB table <tt>user_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_base_info set log_password=? where (user_base_id = ?)</tt>
	 *
	 *	@param userBaseInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateLogPassword(UserBaseInfoDO userBaseInfo) throws DataAccessException;

	/**
	 *  Update DB table <tt>user_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_base_info set pay_password=? where (user_base_id = ?)</tt>
	 *
	 *	@param userBaseInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateCheckPassword(UserBaseInfoDO userBaseInfo) throws DataAccessException;

	/**
	 *  Update DB table <tt>user_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_base_info set operate_password=? where (user_base_id = ?)</tt>
	 *
	 *	@param userBaseInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateOperatePassword(UserBaseInfoDO userBaseInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from user_base_info u where (u.user_name = ?)</tt>
	 *
	 *	@param userBaseInfo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long validationUserName(UserBaseInfoDO userBaseInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from user_base_info</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_base_id, user_id, user_name, nickname, real_name, log_password, pay_password, account_id, account_name, mobile, mobile_binding, mail, mail_binding, type, state, row_add_time, row_update_time, identity_name, identity_start_no, identity_end_no, ex_identity_no, real_name_authentication, pwd_error_count, change_lock_time, user_level, user_real_status, user_province, user_county, user_city, fixed_phone, zip, birthday, qq, user_custom_type, user_custom_type1, user_custom_type2, enterprise_type, user_register_from, app_register_from from user_base_info where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByUserIdAutotest(long userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_base_id, user_id, user_name, nickname, real_name, log_password, pay_password, account_id, account_name, mobile, mobile_binding, mail, mail_binding, type, state, row_add_time, row_update_time, identity_name, identity_start_no, identity_end_no, ex_identity_no, real_name_authentication, pwd_error_count, change_lock_time, user_level, user_real_status, certify_level, user_province, user_county, user_city, fixed_phone, zip, birthday, qq, user_custom_type, user_custom_type1, user_custom_type2, enterprise_type, user_register_from, app_register_from from user_base_info where (account_id = ?)</tt>
	 *
	 *	@param accountId
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByAccountIdAutotest(String accountId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>user_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_base_info where (user_base_id = ?)</tt>
	 *
	 *	@param userBaseId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByIdAutotest(String userBaseId) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(u.user_base_id) from user_base_info u, tbl_supplier s where ((1 = 1) AND (u.user_id = s.supplier_id))</tt>
	 *
	 *	@param userBaseInfo
	 *	@param roleId
	 *	@param tblSupplierDo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findSupplierCount(UserBaseInfoDO userBaseInfo, long roleId, TblSupplierDO tblSupplierDo) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_base_info u, tbl_supplier s where ((1 = 1) AND (u.user_id = s.supplier_id))</tt>
	 *
	 *	@param userBaseInfo
	 *	@param latitude
	 *	@param longitude
	 *	@param scoreSort
	 *	@param amountSort
	 *	@param roleId
	 *	@param limitStart
	 *	@param pageSize
	 *	@param tblSupplierDo
	 *	@return List<UserBaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserBaseInfoDO> findSupplier(UserBaseInfoDO userBaseInfo, String latitude, String longitude, String scoreSort, String amountSort, long roleId, long limitStart, long pageSize, TblSupplierDO tblSupplierDo) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>user_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_base_info where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserIdAutotest(long userId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>user_base_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_base_info where (user_name = ?)</tt>
	 *
	 *	@param userName
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserNameAutotest(String userName) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_base_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_base_info where (real_name = ?)</tt>
	 *
	 *	@param realName
	 *	@return UserBaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserBaseInfoDO findByRealNameAutoTest(String realName) throws DataAccessException;

}