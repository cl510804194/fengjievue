/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.DemandPdfTemplateDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.DemandPdfTemplateDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.DemandPdfTemplateDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/demand_pdf_template.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisDemandPdfTemplateDAO extends SqlMapClientDaoSupport implements DemandPdfTemplateDAO {
	/**
	 *  Insert one <tt>DemandPdfTemplateDO</tt> object to DB table <tt>demand_pdf_template</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into demand_pdf_template(id,demand_id,type_code,pdf_template_id,pdf_file_path,pdf_request_path) values (?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param demandPdfTemplate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(DemandPdfTemplateDO demandPdfTemplate) throws DataAccessException {
    	if (demandPdfTemplate == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-DEMAND-PDF-TEMPLATE-INSERT", demandPdfTemplate);

        return demandPdfTemplate.getId();
    }

	/**
	 *  Update DB table <tt>demand_pdf_template</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update demand_pdf_template set demand_id=?, type_code=?, pdf_template_id=?, pdf_file_path=?, pdf_request_path=? where (id = ?)</tt>
	 *
	 *	@param demandPdfTemplate
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(DemandPdfTemplateDO demandPdfTemplate) throws DataAccessException {
    	if (demandPdfTemplate == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-DEMAND-PDF-TEMPLATE-UPDATE", demandPdfTemplate);
    }

	/**
	 *  Delete records from DB table <tt>demand_pdf_template</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from demand_pdf_template where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-DEMAND-PDF-TEMPLATE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>demand_pdf_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, demand_id, type_code, pdf_template_id, pdf_file_path, pdf_request_path from demand_pdf_template where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return DemandPdfTemplateDO
	 *	@throws DataAccessException
	 */	 
    public DemandPdfTemplateDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (DemandPdfTemplateDO) getSqlMapClientTemplate().queryForObject("MS-DEMAND-PDF-TEMPLATE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>demand_pdf_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, demand_id, type_code, pdf_template_id, pdf_file_path, pdf_request_path from demand_pdf_template where (1 = 1)</tt>
	 *
	 *	@param demandPdfTemplate
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<DemandPdfTemplateDO>
	 *	@throws DataAccessException
	 */	 
    public List<DemandPdfTemplateDO> findByCondition(DemandPdfTemplateDO demandPdfTemplate, long limitStart, long pageSize) throws DataAccessException {
    	if (demandPdfTemplate == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("demandPdfTemplate", demandPdfTemplate);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-DEMAND-PDF-TEMPLATE-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>demand_pdf_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from demand_pdf_template where (1 = 1)</tt>
	 *
	 *	@param demandPdfTemplate
	 *	@param limitStart
	 *	@param pageSize
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(DemandPdfTemplateDO demandPdfTemplate, long limitStart, long pageSize) throws DataAccessException {
    	if (demandPdfTemplate == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("demandPdfTemplate", demandPdfTemplate);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-DEMAND-PDF-TEMPLATE-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>demand_pdf_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, demand_id, type_code, pdf_template_id, pdf_file_path, pdf_request_path from demand_pdf_template where ((demand_id = ?) AND (type_code = ?))</tt>
	 *
	 *	@param demandId
	 *	@param typeCode
	 *	@return DemandPdfTemplateDO
	 *	@throws DataAccessException
	 */	 
    public DemandPdfTemplateDO findByIdAndCode(long demandId, String typeCode) throws DataAccessException {
        Map param = new HashMap();

        param.put("demandId", new Long(demandId));
        param.put("typeCode", typeCode);

        return (DemandPdfTemplateDO) getSqlMapClientTemplate().queryForObject("MS-DEMAND-PDF-TEMPLATE-FIND-BY-ID-AND-CODE", param);

    }

	/**
	 *  Query DB table <tt>demand_pdf_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from pdf_template</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException {

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-DEMAND-PDF-TEMPLATE-FIND-ALL-COUNT", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}