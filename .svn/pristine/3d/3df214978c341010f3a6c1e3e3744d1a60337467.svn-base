/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.GiftMoneyTemplateRuleDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.GiftMoneyTemplateRuleDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.GiftMoneyTemplateRuleDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/gift_money_template_rule.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisGiftMoneyTemplateRuleDAO extends SqlMapClientDaoSupport implements GiftMoneyTemplateRuleDAO {
	/**
	 *  Insert one <tt>GiftMoneyTemplateRuleDO</tt> object to DB table <tt>gift_money_template_rule</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into gift_money_template_rule(rule_id,template_id,rule_amount,amount) values (?, ?, ?, ?)</tt>
	 *
	 *	@param giftMoneyTemplateRule
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(GiftMoneyTemplateRuleDO giftMoneyTemplateRule) throws DataAccessException {
    	if (giftMoneyTemplateRule == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-GIFT-MONEY-TEMPLATE-RULE-INSERT", giftMoneyTemplateRule);

        return giftMoneyTemplateRule.getRuleId();
    }

	/**
	 *  Update DB table <tt>gift_money_template_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update gift_money_template_rule set template_id=?, ruleAmount=?, amount=? where (rule_id = ?)</tt>
	 *
	 *	@param giftMoneyTemplateRule
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(GiftMoneyTemplateRuleDO giftMoneyTemplateRule) throws DataAccessException {
    	if (giftMoneyTemplateRule == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-GIFT-MONEY-TEMPLATE-RULE-UPDATE", giftMoneyTemplateRule);
    }

	/**
	 *  Query DB table <tt>gift_money_template_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select rule_id, template_id, rule_amount, amount from gift_money_template_rule where (template_id = ?)</tt>
	 *
	 *	@param templateId
	 *	@return List<GiftMoneyTemplateRuleDO>
	 *	@throws DataAccessException
	 */	 
    public List<GiftMoneyTemplateRuleDO> findByTemplateId(long templateId) throws DataAccessException {
        Long param = new Long(templateId);

        return getSqlMapClientTemplate().queryForList("MS-GIFT-MONEY-TEMPLATE-RULE-FIND-BY-TEMPLATE-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>gift_money_template_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from gift_money_template_rule where (template_id = ?)</tt>
	 *
	 *	@param templateId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long templateId) throws DataAccessException {
        Long param = new Long(templateId);

        return getSqlMapClientTemplate().delete("MS-GIFT-MONEY-TEMPLATE-RULE-DELETE-BY-ID", param);
    }

	/**
	 *  Insert one <tt>GiftMoneyTemplateRuleDO</tt> object to DB table <tt>gift_money_template_rule</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into gift_money_template_rule(rule_id,template_id,rule_amount,amount) values (?, ?, ?, ?)</tt>
	 *
	 *	@param giftMoneyTemplateRule
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(GiftMoneyTemplateRuleDO giftMoneyTemplateRule) throws DataAccessException {
    	if (giftMoneyTemplateRule == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-GIFT-MONEY-TEMPLATE-RULE-INSERT-AUTOTEST", giftMoneyTemplateRule);

        return giftMoneyTemplateRule.getRuleId();
    }

	/**
	 *  Query DB table <tt>gift_money_template_rule</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select rule_id, template_id, rule_amount, amount from gift_money_template_rule where (template_id = ?)</tt>
	 *
	 *	@param templateId
	 *	@return List<GiftMoneyTemplateRuleDO>
	 *	@throws DataAccessException
	 */	 
    public List<GiftMoneyTemplateRuleDO> findByTemplateIdAutotest(long templateId) throws DataAccessException {
        Long param = new Long(templateId);

        return getSqlMapClientTemplate().queryForList("MS-GIFT-MONEY-TEMPLATE-RULE-FIND-BY-TEMPLATE-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>gift_money_template_rule</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from gift_money_template_rule where (template_id = ?)</tt>
	 *
	 *	@param templateId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByIdAutotest(long templateId) throws DataAccessException {
        Long param = new Long(templateId);

        return getSqlMapClientTemplate().delete("MS-GIFT-MONEY-TEMPLATE-RULE-DELETE-BY-ID-AUTOTEST", param);
    }

}