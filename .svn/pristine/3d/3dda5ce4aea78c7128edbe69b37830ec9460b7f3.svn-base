/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.TblProductUserDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;

/**
 * A dao interface provides methods to access database table <tt>tbl_product_user</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/tbl_product_user.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface TblProductUserDAO {
	/**
	 *  Insert one <tt>TblProductUserDO</tt> object to DB table <tt>tbl_product_user</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into tbl_product_user(product_user_id,product_id,supplier_id,user_id,raw_add_time) values (?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tblProductUser
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(TblProductUserDO tblProductUser) throws DataAccessException;

	/**
	 *  Update DB table <tt>tbl_product_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tbl_product_user set product_id=?, user_id=?, supplier_id=? where (product_user_id = ?)</tt>
	 *
	 *	@param tblProductUser
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TblProductUserDO tblProductUser) throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_product_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select product_user_id, product_id, supplier_id, user_id, raw_add_time, raw_update_time from tbl_product_user where (product_user_id = ?)</tt>
	 *
	 *	@param productUserId
	 *	@return TblProductUserDO
	 *	@throws DataAccessException
	 */	 
    public TblProductUserDO findById(long productUserId) throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_product_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select product_user_id, product_id, supplier_id, user_id, raw_add_time, raw_update_time from tbl_product_user where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return List<TblProductUserDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblProductUserDO> findByUserId(long userId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>tbl_product_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_product_user where (product_user_id = ?)</tt>
	 *
	 *	@param productUserId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long productUserId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>tbl_product_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_product_user where ((user_id = ?) AND (product_id = ?))</tt>
	 *
	 *	@param userId
	 *	@param productId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProductAndUser(long userId, long productId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>tbl_product_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tbl_product_user where ((user_id = ?) AND (supplier_id = ?))</tt>
	 *
	 *	@param userId
	 *	@param supplierId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteBySupplierAndUser(long userId, long supplierId) throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_product_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_product_user</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_product_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select product_user_id, product_id, user_id, supplier_id, raw_add_time, raw_update_time from tbl_product_user where (1 = 1)</tt>
	 *
	 *	@param tblProductUser
	 *	@param limitStart
	 *	@param pageSize
	 *	@param beginDate
	 *	@param endDate
	 *	@return List<TblProductUserDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblProductUserDO> findByCondition(TblProductUserDO tblProductUser, long limitStart, long pageSize, Date beginDate, Date endDate) throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_product_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tbl_product_user where (1 = 1)</tt>
	 *
	 *	@param tblProductUser
	 *	@param beginDate
	 *	@param endDate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(TblProductUserDO tblProductUser, Date beginDate, Date endDate) throws DataAccessException;

	/**
	 *  Query DB table <tt>tbl_product_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select product_user_id, product_id, supplier_id, user_id, raw_add_time, raw_update_time from tbl_product_user where (1 = 1)</tt>
	 *
	 *	@param tblProductUser
	 *	@param productIds
	 *	@param supplierIds
	 *	@param userId
	 *	@return List<TblProductUserDO>
	 *	@throws DataAccessException
	 */	 
    public List<TblProductUserDO> findCollectByProductIds(TblProductUserDO tblProductUser, List productIds, List supplierIds, long userId) throws DataAccessException;

}