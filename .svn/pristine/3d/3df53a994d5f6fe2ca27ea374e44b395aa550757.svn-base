/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.LoanParamDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.LoanParamDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.LoanParamDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/loan_param.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisLoanParamDAO extends SqlMapClientDaoSupport implements LoanParamDAO {
	/**
	 *  Insert one <tt>LoanParamDO</tt> object to DB table <tt>loan_param</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into loan_param(loan_param_id,month_rate,month_manager_fee_rate,month_service_fee_rate,loan_type,commodity_type,stage_num,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param loanParam
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(LoanParamDO loanParam) throws DataAccessException {
    	if (loanParam == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-LOAN-PARAM-INSERT", loanParam);

        return loanParam.getLoanParamId();
    }

	/**
	 *  Update DB table <tt>loan_param</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update loan_param set month_rate=?, month_manager_fee_rate=?, month_service_fee_rate=?, loan_type=?, commodity_type=?, stage_num=? where (loan_param_id = ?)</tt>
	 *
	 *	@param loanParam
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(LoanParamDO loanParam) throws DataAccessException {
    	if (loanParam == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-LOAN-PARAM-UPDATE", loanParam);
    }

	/**
	 *  Query DB table <tt>loan_param</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select loan_param_id, month_rate, month_manager_fee_rate, month_service_fee_rate, loan_type, commodity_type, stage_num, raw_add_time, raw_update_time from loan_param where (loan_param_id = ?)</tt>
	 *
	 *	@param loanParamId
	 *	@return LoanParamDO
	 *	@throws DataAccessException
	 */	 
    public LoanParamDO findById(long loanParamId) throws DataAccessException {
        Long param = new Long(loanParamId);

        return (LoanParamDO) getSqlMapClientTemplate().queryForObject("MS-LOAN-PARAM-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>loan_param</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select loan_param_id, store_id, loan_type, commodity_type, stage_num, raw_add_time, raw_update_time from loan_param where ((stage_num = ?) AND (commodity_type = ?) AND (loan_type = ?))</tt>
	 *
	 *	@param stageNum
	 *	@param commodityType
	 *	@param loanType
	 *	@return LoanParamDO
	 *	@throws DataAccessException
	 */	 
    public LoanParamDO findLoanParam(long stageNum, String commodityType, String loanType) throws DataAccessException {
        Map param = new HashMap();

        param.put("stageNum", new Long(stageNum));
        param.put("commodityType", commodityType);
        param.put("loanType", loanType);

        return (LoanParamDO) getSqlMapClientTemplate().queryForObject("MS-LOAN-PARAM-FIND-LOAN-PARAM", param);

    }

	/**
	 *  Delete records from DB table <tt>loan_param</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from loan_param where (loan_param_id = ?)</tt>
	 *
	 *	@param loanParamId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long loanParamId) throws DataAccessException {
        Long param = new Long(loanParamId);

        return getSqlMapClientTemplate().delete("MS-LOAN-PARAM-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>loan_param</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from loan_param</tt>
	 *
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findAllCount() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-LOAN-PARAM-FIND-ALL-COUNT", null);

    }

}