/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.daointerface;

// auto generated imports
import com.yjf.esupplier.dal.dataobject.PersonalInfoDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>personal_info</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/personal_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface PersonalInfoDAO {
	/**
	 *  Insert one <tt>PersonalInfoDO</tt> object to DB table <tt>personal_info</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into personal_info(id,user_base_id,real_name,cert_no,business_period,cert_front_path,cert_back_path,bank_open_name,bank_card_no,bank_type,bank_key,bank_province,bank_city,bank_address,gender,referees,customer_source) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param personalInfo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(PersonalInfoDO personalInfo) throws DataAccessException;

	/**
	 *  Update DB table <tt>personal_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update personal_info set real_name=?, cert_no=?, business_period=?, cert_front_path=?, cert_back_path=?, bank_open_name=?, bank_card_no=?, bank_type=?, bank_key=?, bank_province=?, bank_city=?, bank_address=?, gender=?, referees=?, customer_source=?, raw_add_time=?, raw_update_time=? where (user_base_id = ?)</tt>
	 *
	 *	@param personalInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(PersonalInfoDO personalInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>personal_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_base_id, real_name, cert_no, business_period, cert_front_path, cert_back_path, bank_open_name, bank_card_no, bank_type, bank_key, bank_province, bank_city, bank_address, gender, referees, customer_source, raw_add_time, raw_update_time from personal_info where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return PersonalInfoDO
	 *	@throws DataAccessException
	 */	 
    public PersonalInfoDO findById(long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>personal_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_base_id, real_name, cert_no, business_period, cert_front_path, cert_back_path, bank_open_name, bank_card_no, bank_type, bank_key, bank_province, bank_city, bank_address, gender, referees, customer_source, raw_add_time, raw_update_time from personal_info where (user_base_id = ?)</tt>
	 *
	 *	@param userBaseId
	 *	@return PersonalInfoDO
	 *	@throws DataAccessException
	 */	 
    public PersonalInfoDO findByUserBaseId(String userBaseId) throws DataAccessException;

	/**
	 *  Query DB table <tt>personal_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_base_id, real_name, cert_no, business_period, cert_front_path, cert_back_path, bank_open_name, bank_card_no, bank_type, bank_key, bank_province, bank_city, bank_address, gender, referees, customer_source, raw_add_time, raw_update_time from personal_info where (1 = 1)</tt>
	 *
	 *	@param personalInfo
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<PersonalInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<PersonalInfoDO> findByCondition(PersonalInfoDO personalInfo, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>personal_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from personal_info where (1 = 1)</tt>
	 *
	 *	@param personalInfo
	 *	@param limitStart
	 *	@param pageSize
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(PersonalInfoDO personalInfo, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>personal_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from personal_info where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>personal_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from personal_info</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>personal_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from personal_info where (user_base_id = ?)</tt>
	 *
	 *	@param userBaseId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserBaseIdAutoTest(String userBaseId) throws DataAccessException;

	/**
	 *  Query DB table <tt>personal_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from personal_info where (real_name = ?)</tt>
	 *
	 *	@param realName
	 *	@return PersonalInfoDO
	 *	@throws DataAccessException
	 */	 
    public PersonalInfoDO findByRealNameAutoTest(String realName) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>personal_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from personal_info where (real_name = ?)</tt>
	 *
	 *	@param realName
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByRealNameAutoTest(String realName) throws DataAccessException;

}