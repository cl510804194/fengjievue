/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.yjf.esupplier.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.yjf.esupplier.dal.daointerface.TradeDetailTransferDAO;


// auto generated imports
import com.yjf.esupplier.dal.dataobject.TradeDetailTransferDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.yjf.esupplier.dal.daointerface.TradeDetailTransferDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/trade_detail_transfer.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisTradeDetailTransferDAO extends SqlMapClientDaoSupport implements TradeDetailTransferDAO {
	/**
	 *  Insert one <tt>TradeDetailTransferDO</tt> object to DB table <tt>trade_detail_transfer</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into trade_detail_transfer(trade_transfer_id,apply_user_id,apply_user_name,apply_real_name,amount,original_amount,note,profit_rate,trade_id,trade_name,trade_detail_id,status,ext_order,recipient_id,recipient_name,recipient_real_name,release_date,transfer_date,time_limit,time_limit_unit,trade_effective_date,trade_expire_date,real_profit_rate,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tradeDetailTransfer
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(TradeDetailTransferDO tradeDetailTransfer) throws DataAccessException {
    	if (tradeDetailTransfer == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TRADE-DETAIL-TRANSFER-INSERT", tradeDetailTransfer);

        return tradeDetailTransfer.getTradeTransferId();
    }

	/**
	 *  Update DB table <tt>trade_detail_transfer</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update trade_detail_transfer set apply_user_id=?, apply_user_name=?, apply_real_name=?, amount=?, original_amount=?, note=?, profit_rate=?, trade_id=?, trade_name=?, trade_detail_id=?, status=?, ext_order=?, recipient_id=?, recipient_name=?, recipient_real_name=?, release_date=?, transfer_date=?, time_limit=?, time_limit_unit=?, trade_effective_date=?, trade_expire_date=?, real_profit_rate=? where (trade_transfer_id = ?)</tt>
	 *
	 *	@param tradeDetailTransfer
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(TradeDetailTransferDO tradeDetailTransfer) throws DataAccessException {
    	if (tradeDetailTransfer == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-TRADE-DETAIL-TRANSFER-UPDATE", tradeDetailTransfer);
    }

	/**
	 *  Query DB table <tt>trade_detail_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_transfer_id, apply_user_id, apply_user_name, apply_real_name, amount, original_amount, note, profit_rate, trade_id, trade_name, trade_detail_id, status, ext_order, recipient_id, recipient_name, recipient_real_name, release_date, transfer_date, time_limit, time_limit_unit, trade_effective_date, trade_expire_date, real_profit_rate, raw_add_time, raw_update_time from trade_detail_transfer where (trade_transfer_id = ?)</tt>
	 *
	 *	@param tradeTransferId
	 *	@return TradeDetailTransferDO
	 *	@throws DataAccessException
	 */	 
    public TradeDetailTransferDO findById(long tradeTransferId) throws DataAccessException {
        Long param = new Long(tradeTransferId);

        return (TradeDetailTransferDO) getSqlMapClientTemplate().queryForObject("MS-TRADE-DETAIL-TRANSFER-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>trade_detail_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_transfer_id, apply_user_id, apply_user_name, apply_real_name, amount, original_amount, note, profit_rate, trade_id, trade_name, trade_detail_id, status, ext_order, recipient_id, recipient_name, recipient_real_name, release_date, transfer_date, time_limit, time_limit_unit, trade_effective_date, trade_expire_date, real_profit_rate, raw_add_time, raw_update_time from trade_detail_transfer where (trade_transfer_id = ?) for update</tt>
	 *
	 *	@param tradeTransferId
	 *	@return TradeDetailTransferDO
	 *	@throws DataAccessException
	 */	 
    public TradeDetailTransferDO findByIdForUpdate(long tradeTransferId) throws DataAccessException {
        Long param = new Long(tradeTransferId);

        return (TradeDetailTransferDO) getSqlMapClientTemplate().queryForObject("MS-TRADE-DETAIL-TRANSFER-FIND-BY-ID-FOR-UPDATE", param);

    }

	/**
	 *  Delete records from DB table <tt>trade_detail_transfer</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from trade_detail_transfer where (trade_transfer_id = ?)</tt>
	 *
	 *	@param tradeTransferId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long tradeTransferId) throws DataAccessException {
        Long param = new Long(tradeTransferId);

        return getSqlMapClientTemplate().delete("MS-TRADE-DETAIL-TRANSFER-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>trade_detail_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from trade_detail_transfer</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException {

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-TRADE-DETAIL-TRANSFER-FIND-ALL-COUNT", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>trade_detail_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_transfer_id, apply_user_id, apply_user_name, apply_real_name, amount, original_amount, note, profit_rate, trade_id, trade_name, trade_detail_id, status, ext_order, recipient_id, recipient_name, recipient_real_name, release_date, transfer_date, time_limit, time_limit_unit, trade_effective_date, trade_expire_date, real_profit_rate, raw_add_time, raw_update_time from trade_detail_transfer where (1 = 2)</tt>
	 *
	 *	@param tradeDetailTransfer
	 *	@param limitStart
	 *	@param pageSize
	 *	@param startTransferDate
	 *	@param endTransferDate
	 *	@param startCreateDate
	 *	@param endCreateDate
	 *	@param statusList
	 *	@return List<TradeDetailTransferDO>
	 *	@throws DataAccessException
	 */	 
    public List<TradeDetailTransferDO> findByCondition(TradeDetailTransferDO tradeDetailTransfer, long limitStart, long pageSize, Date startTransferDate, Date endTransferDate, Date startCreateDate, Date endCreateDate, List statusList) throws DataAccessException {
    	if (tradeDetailTransfer == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tradeDetailTransfer", tradeDetailTransfer);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("startTransferDate", startTransferDate);
        param.put("endTransferDate", endTransferDate);
        param.put("startCreateDate", startCreateDate);
        param.put("endCreateDate", endCreateDate);
        param.put("statusList", statusList);

        return getSqlMapClientTemplate().queryForList("MS-TRADE-DETAIL-TRANSFER-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>trade_detail_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from trade_detail_transfer</tt>
	 *
	 *	@param tradeDetailTransfer
	 *	@param startTransferDate
	 *	@param endTransferDate
	 *	@param startCreateDate
	 *	@param endCreateDate
	 *	@param statusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(TradeDetailTransferDO tradeDetailTransfer, Date startTransferDate, Date endTransferDate, Date startCreateDate, Date endCreateDate, List statusList) throws DataAccessException {
    	if (tradeDetailTransfer == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("tradeDetailTransfer", tradeDetailTransfer);
        param.put("startTransferDate", startTransferDate);
        param.put("endTransferDate", endTransferDate);
        param.put("startCreateDate", startCreateDate);
        param.put("endCreateDate", endCreateDate);
        param.put("statusList", statusList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-TRADE-DETAIL-TRANSFER-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Insert one <tt>TradeDetailTransferDO</tt> object to DB table <tt>trade_detail_transfer</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into trade_detail_transfer(trade_transfer_id,apply_user_id,apply_user_name,apply_real_name,amount,original_amount,note,profit_rate,trade_id,trade_name,trade_detail_id,status,ext_order,recipient_id,recipient_name,recipient_real_name,release_date,transfer_date,time_limit,time_limit_unit,trade_effective_date,trade_expire_date,real_profit_rate,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tradeDetailTransfer
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insertAutotest(TradeDetailTransferDO tradeDetailTransfer) throws DataAccessException {
    	if (tradeDetailTransfer == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-TRADE-DETAIL-TRANSFER-INSERT-AUTOTEST", tradeDetailTransfer);

        return tradeDetailTransfer.getTradeTransferId();
    }

	/**
	 *  Query DB table <tt>trade_detail_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select trade_transfer_id, apply_user_id, apply_user_name, apply_real_name, amount, original_amount, note, profit_rate, trade_id, trade_name, trade_detail_id, status, ext_order, recipient_id, recipient_name, recipient_real_name, release_date, transfer_date, time_limit, time_limit_unit, trade_effective_date, trade_expire_date, real_profit_rate, raw_add_time, raw_update_time from trade_detail_transfer where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return List<TradeDetailTransferDO>
	 *	@throws DataAccessException
	 */	 
    public List<TradeDetailTransferDO> findByTradeIdAutotest(long tradeId) throws DataAccessException {
        Long param = new Long(tradeId);

        return getSqlMapClientTemplate().queryForList("MS-TRADE-DETAIL-TRANSFER-FIND-BY-TRADE-ID-AUTOTEST", param);

    }

	/**
	 *  Delete records from DB table <tt>trade_detail_transfer</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from trade_detail_transfer where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByTradeIdAutotest(long tradeId) throws DataAccessException {
        Long param = new Long(tradeId);

        return getSqlMapClientTemplate().delete("MS-TRADE-DETAIL-TRANSFER-DELETE-BY-TRADE-ID-AUTOTEST", param);
    }

}