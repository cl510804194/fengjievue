<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table to_card_flow -->
    <resultMap id="RM-TO-CARD-FLOW" class="com.yjf.esupplier.dal.dataobject.ToCardFlowDO">
        <result property="flowId" column="flow_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="userId" column="user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="yjfAccountId" column="yjf_account_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userName" column="user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userRealName" column="user_real_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="outUserId" column="out_user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="outYjfAccountId" column="out_yjf_account_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="outUserName" column="out_user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="outUserRealName" column="out_user_real_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="outBizNo" column="out_biz_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="bankCode" column="bank_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="bankName" column="bank_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="bankAccountNo" column="bank_account_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="bankAcountName" column="bank_acount_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="bankProvince" column="bank_province" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="bankCity" column="bank_city" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="amount" column="amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="DECIMAL"/>
        <result property="publicTag" column="public_tag" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="payType" column="pay_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="inOutType" column="in_out_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="payTime" column="pay_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="status" column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rem1" column="rem1" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisToCardFlowDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisToCardFlowDAO.insert -->
    <insert id="MS-TO-CARD-FLOW-INSERT">
        insert /*MS-ESUPPLIER-TO-CARD-FLOW-INSERT*/  into to_card_flow(flow_id,user_id,yjf_account_id,user_name,user_real_name,out_user_id,out_yjf_account_id,out_user_name,out_user_real_name,out_biz_no,bank_code,bank_name,bank_account_no,bank_acount_name,bank_province,bank_city,amount,public_tag,pay_type,in_out_type,pay_time,status,rem1,raw_add_time) values (#flowId#, #userId#, #yjfAccountId#, #userName#, #userRealName#, #outUserId#, #outYjfAccountId#, #outUserName#, #outUserRealName#, #outBizNo#, #bankCode#, #bankName#, #bankAccountNo#, #bankAcountName#, #bankProvince#, #bankCity#, #amount.cent#, #publicTag#, #payType#, #inOutType#, #payTime#, #status#, #rem1#, #rawAddTime#)
	      	 <selectKey  resultClass ="long"  keyProperty ="flowId" >   
	          		 SELECT LAST_INSERT_ID() AS ID 
	      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisToCardFlowDAO.update -->
    <update id="MS-TO-CARD-FLOW-UPDATE">
    <![CDATA[
        update /*MS-ESUPPLIER-TO-CARD-FLOW-UPDATE*/ to_card_flow set user_id=#userId#, yjf_account_id=#yjfAccountId#, user_name=#userName#, user_real_name=#userRealName#, out_user_id=#outUserId#, out_yjf_account_id=#outYjfAccountId#, out_user_name=#outUserName#, out_user_real_name=#outUserRealName#, out_biz_no=#outBizNo#, bank_name=#bankName#, bank_code=#bankCode#, bank_account_no=#bankAccountNo#, bank_acount_name=#bankAcountName#, bank_province=#bankProvince#, bank_city=#bankCity#, amount=#amount.cent#, public_tag=#publicTag#, pay_type=#payType#, in_out_type=#inOutType#, pay_time=#payTime#, status=#status#, rem1=#rem1# where (flow_id = #flowId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisToCardFlowDAO.findById -->
    <select id="MS-TO-CARD-FLOW-FIND-BY-ID" resultMap="RM-TO-CARD-FLOW">
    <![CDATA[
        select /*MS-ESUPPLIER-TO-CARD-FLOW-FIND-BY-ID*/ * from to_card_flow where (flow_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisToCardFlowDAO.findByOutBizNo -->
    <select id="MS-TO-CARD-FLOW-FIND-BY-OUT-BIZ-NO" resultMap="RM-TO-CARD-FLOW">
    <![CDATA[
        select /*MS-ESUPPLIER-TO-CARD-FLOW-FIND-BY-OUT-BIZ-NO*/ * from to_card_flow where (out_biz_no = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisToCardFlowDAO.findByIdForUpdate -->
    <select id="MS-TO-CARD-FLOW-FIND-BY-ID-FOR-UPDATE" resultMap="RM-TO-CARD-FLOW">
    <![CDATA[
        select /*MS-ESUPPLIER-TO-CARD-FLOW-FIND-BY-ID-FOR-UPDATE*/ * from to_card_flow where (flow_id = #value#) for update
    ]]>
    </select>

    <!-- mapped statement for IbatisToCardFlowDAO.deleteById -->
    <delete id="MS-TO-CARD-FLOW-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-ESUPPLIER-TO-CARD-FLOW-DELETE-BY-ID*/ from to_card_flow where (flow_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisToCardFlowDAO.findAllCount -->
    <select id="MS-TO-CARD-FLOW-FIND-ALL-COUNT" resultClass="long">
    <![CDATA[
        select /*MS-ESUPPLIER-TO-CARD-FLOW-FIND-ALL-COUNT*/ COUNT(*) from to_card_flow
    ]]>
    </select>

    <!-- mapped statement for IbatisToCardFlowDAO.findByCondtion -->
    <select id="MS-TO-CARD-FLOW-FIND-BY-CONDTION" resultMap="RM-TO-CARD-FLOW">
        SELECT /*MS-ESUPPLIER-TO-CARD-FLOW-FIND-BY-CONDTION*/ 
				*
	  		FROM to_card_flow r
	  		WHERE 1=1
	  		<isNotEmpty property="yjfAccountId">
	  			AND (r.yjf_account_id = #yjfAccountId#)
			</isNotEmpty>
	  		<isNotEmpty property="status">
	  			AND r.status = #status#
			</isNotEmpty>


			<isNotEmpty property="toCardFlow.userName">
                AND r.user_name = #toCardFlow.userName#
            </isNotEmpty>
            <isNotEmpty property="toCardFlow.bankAcountName">
                AND r.bank_acount_name = #toCardFlow.bankAcountName#
            </isNotEmpty>
            <isNotEmpty property="toCardFlow.bankAccountNo">
                AND r.bank_account_no like   '%$toCardFlow.bankAccountNo$%'
            </isNotEmpty>


			<isGreaterThan property="toCardFlow.userId"  compareValue="0" prepend=" and ">
	                r.user_id=#toCardFlow.userId#
	        </isGreaterThan>
			<isNotEmpty property="toCardFlow.bankCode">
	  			AND r.bank_code = #toCardFlow.bankCode#
			</isNotEmpty>
			
			<isNotEmpty property="payType">
				<isEqual property="payType" compareValue="DEPOSIT">
					AND (r.pay_type = 'DEDUCT' OR r.pay_type = 'EBANK') 
				</isEqual>
				<isEqual property="payType" compareValue="DEPOSIT_WITHDRAW">
					AND (r.pay_type = 'DEDUCT' OR r.pay_type = 'EBANK' OR r.pay_type = 'WITHDRAW') 
				</isEqual>
				<isEqual property="payType" compareValue="WITHDRAW">
					AND r.pay_type = 'WITHDRAW'
				</isEqual>
				<isEqual property="payType" compareValue="OTHER">
					AND r.pay_type = 'OTHER'
				</isEqual>
			</isNotEmpty>
			<isNotEmpty property="startTime">
			<![CDATA[	 AND r.pay_time >= #startTime#  ]]>
			</isNotEmpty>
			<isNotEmpty property="endTime">
			<![CDATA[	 AND r.pay_time <= #endTime# ]]>
			</isNotEmpty>
				ORDER BY r.pay_time DESC
			LIMIT #limitStart#,#pageSize#;
    </select>

    <!-- mapped statement for IbatisToCardFlowDAO.findByCountCondtion -->
    <select id="MS-TO-CARD-FLOW-FIND-BY-COUNT-CONDTION" resultClass="long">
        SELECT /*MS-ESUPPLIER-TO-CARD-FLOW-FIND-BY-COUNT-CONDTION*/ COUNT(0) 
	  		FROM to_card_flow r
	  		WHERE 1 = 1
	  		<isNotEmpty property="yjfAccountId">
	  			AND (r.yjf_account_id = #yjfAccountId#)
			</isNotEmpty>
	  		<isNotEmpty property="status">
	  			AND r.status = #status#
			</isNotEmpty>

			<isNotEmpty property="toCardFlow.userName">
                AND r.user_name = #toCardFlow.userName#
            </isNotEmpty>
            <isNotEmpty property="toCardFlow.bankAcountName">
                AND r.bank_acount_name = #toCardFlow.bankAcountName#
            </isNotEmpty>
            <isNotEmpty property="toCardFlow.bankAccountNo">
                AND r.bank_account_no like   '%$toCardFlow.bankAccountNo$%'
            </isNotEmpty>


			<isGreaterThan property="toCardFlow.userId"  compareValue="0" prepend=" and ">
	                r.user_id=#toCardFlow.userId#
	        </isGreaterThan>
	        <isNotEmpty property="toCardFlow.bankCode">
	  			AND r.bank_code = #toCardFlow.bankCode#
			</isNotEmpty>
			<isNotEmpty property="payType">
				<isEqual property="payType" compareValue="DEPOSIT">
					AND (r.pay_type = 'DEDUCT' OR r.pay_type = 'EBANK') 
				</isEqual>
				<isEqual property="payType" compareValue="DEPOSIT_WITHDRAW">
					AND (r.pay_type = 'DEDUCT' OR r.pay_type = 'EBANK' OR r.pay_type = 'WITHDRAW') 
				</isEqual>
				<isEqual property="payType" compareValue="WITHDRAW">
					AND r.pay_type = 'WITHDRAW'
				</isEqual>
				<isEqual property="payType" compareValue="OTHER">
					AND r.pay_type = 'OTHER'
				</isEqual>
			</isNotEmpty>
			<isNotEmpty property="startTime">
			<![CDATA[	 AND r.pay_time >= #startTime#  ]]>
			</isNotEmpty>
			<isNotEmpty property="endTime">
			<![CDATA[	 AND r.pay_time <= #endTime# ]]>
			</isNotEmpty>
    </select>

    <!-- mapped statement for IbatisToCardFlowDAO.selectSumAmount -->
    <select id="MS-TO-CARD-FLOW-SELECT-SUM-AMOUNT" resultClass="com.yjf.common.lang.util.money.Money">
        SELECT /*MS-ESUPPLIER-TO-CARD-FLOW-SELECT-SUM-AMOUNT*/ SUM(r.amount) FROM to_card_flow r WHERE 1=1
				
				
		  		<dynamic>
		  			<isGreaterThan property="toCardFlow.userId"  compareValue="0" prepend=" and ">
	                	r.user_id=#toCardFlow.userId#
	       			</isGreaterThan>
	       			<isNotEmpty property="toCardFlow.bankCode">
			  			AND r.bank_code = #toCardFlow.bankCode#
					</isNotEmpty>
		  			<isNotEmpty property="startTime" prepend=" and ">
						<![CDATA[ r.pay_time >= #startTime# ]]>
					</isNotEmpty>
					<isNotEmpty property="endTime" prepend=" and ">
						<![CDATA[  r.pay_time <= #endTime#  ]]>
					</isNotEmpty>
					<isNotEmpty property="payType" prepend=" and ">
						<![CDATA[ r.pay_type = #payType# ]]>
					</isNotEmpty>
					<isNotEmpty property="bankAccountNo" prepend=" and ">
						<![CDATA[ r.bank_account_no = #bankAccountNo# ]]>
					</isNotEmpty>
		  			<isNotEmpty property="status" prepend=" and ">
						 r.status in 
						<iterate property="status" open="(" close=")" conjunction=",">
							#status[]#
						</iterate>
					</isNotEmpty>
		  		</dynamic>
    </select>

</sqlMap>
